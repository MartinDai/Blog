{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/custom-logo.png","path":"images/custom-logo.png","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0385f24259ca10f39c17a6967f001110153d7b82","modified":1715499841299},{"_id":"source/_posts/.DS_Store","hash":"14e66422bc24e12b88cc8c5dd636f47962920eba","modified":1715501554028},{"_id":"source/images/favicon-16x16.png","hash":"6124306ae077b5538d72d3b435ee1a1cf57f144b","modified":1715498033000},{"_id":"source/images/custom-logo.png","hash":"6c937ccdbe66706125c14dba3c7cf915d82df2de","modified":1715498033000},{"_id":"source/images/apple-touch-icon.png","hash":"309c7e81505996284311dcb0dce86ab8ae21326c","modified":1715498033000},{"_id":"source/images/favicon-32x32.png","hash":"ca78c7b84704a0686087c1cefd09cef7111cb143","modified":1715498034000},{"_id":"source/images/safari-pinned-tab.svg","hash":"05fd9a195d89bdc3486a4ab7cc102d2ad42bcc11","modified":1715498035000},{"_id":"source/images/favicon.ico","hash":"cf619119a4560502f2ee298b936e1b64ff8b97d2","modified":1715498034000},{"_id":"source/_posts/nginx/nginx-config.md","hash":"2dfc86b5d99547f4af95a89500359fe3d6c58ec5","modified":1715500641792},{"_id":"source/_posts/java/java-use-redis-bloom-filter.md","hash":"8d4c6ad84cbe1fccce9397ed6fc00cd94e8ce077","modified":1715501041086},{"_id":"source/categories/index.md","hash":"c8b03a4bf0f37c4fa07b20ca444d6f1419db086a","modified":1715499005352},{"_id":"source/_posts/java/java8-stream.md","hash":"15ccca9e4f7c5f45275d987257928cb6e9328735","modified":1715501025383},{"_id":"source/_posts/mysql/mysql-limit-optimization.md","hash":"6975b2d22abeccd8cfaf52cc296289813b80148a","modified":1715500539642},{"_id":"source/_posts/docker/build-multi-platform-image.md","hash":"82d84521540d9a82dd4ae458a5f9d76457a53a60","modified":1715502740205},{"_id":"source/_posts/docker/docker-learn-note.md","hash":"8ed08aff8dd3d16ea07cbb9260a70b7b2b3c8e03","modified":1715501011978},{"_id":"source/_posts/translate/start-jetty-9.md","hash":"b505b8f7f1c59e392bcf8cf5919f0eaa91f55881","modified":1715501091090},{"_id":"source/_posts/other/serverless-with-cloudflare-support-https.md","hash":"1899d1ac1d8fb7d47a3e12bc65ab856b6903b1d4","modified":1715501001568},{"_id":"source/_posts/problem/record-once-no-heap-oom.md","hash":"b1c580f22db29503f809883c84903628263c5425","modified":1715501305251},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1715494078357},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1715494078366},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1715494078366},{"_id":"themes/next/_vendors.yml","hash":"3907151d0f181d5be0b4778b4f930015296c475a","modified":1715494078367},{"_id":"themes/next/README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1715494078366},{"_id":"themes/next/package.json","hash":"655accf88e80dfdd525042da1d65114b47dcb52a","modified":1715494078405},{"_id":"themes/next/_config.yml","hash":"df15ee5204757684b0c22877d3cf4e8ba7d3686d","modified":1715494078367},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1715494078357},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1715494078367},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1715494078365},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1715494078406},{"_id":"themes/next/eslint.config.js","hash":"14b5636ce297048ea6835f7db4b1e4cf625a2c79","modified":1715494078371},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1715494078357},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1715494078358},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1715494078358},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1715494078359},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2296426023773991b0c48c7fffeb790baca59b19","modified":1715494078361},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1715494078361},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1715494078361},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"5fd78aaaf3e6bb4811abde0cc5d75a3174ce4882","modified":1715494078362},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1715494078362},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1715494078371},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1715494078368},{"_id":"themes/next/.github/labeler.yml","hash":"b7f67daa031c535940be82ea96f0fb9db59e1022","modified":1715494078362},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1715494078368},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1715494078372},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1715494078372},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1715494078373},{"_id":"themes/next/languages/default.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1715494078373},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1715494078369},{"_id":"themes/next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1715494078372},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1715494078373},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1715494078374},{"_id":"themes/next/.DS_Store","hash":"99a0e7658399eb64cd5c1c3104475d28db19ff9a","modified":1715501576332},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1715494078373},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1715494078374},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1715494078374},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1715494078375},{"_id":"themes/next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1715494078374},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1715494078375},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1715494078374},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1715494078376},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1715494078376},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1715494078377},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1715494078375},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1715494078377},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1715494078378},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1715494078377},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1715494078379},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1715494078378},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1715494078379},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1715494078379},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1715494078378},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1715494078380},{"_id":"themes/next/layout/.DS_Store","hash":"2a5f16c9815862d00d6505cbb09ec609716b41a3","modified":1715501576336},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1715494078404},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1715494078404},{"_id":"themes/next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1715494078404},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1715494078405},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1715494078405},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1715494078404},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1715494078360},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1715494078360},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1715494078360},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1715494078472},{"_id":"themes/next/source/.DS_Store","hash":"d4512f1081d22442af4e985924d02d175102d243","modified":1715497059911},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"70a8975c47f4334ebcdd4e543b940346940054d6","modified":1715494078363},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1715494078361},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44eb8b9706b31a4917cacddde2b3aca4ff82955b","modified":1715494078363},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"48e6e1e1406705379112766f4fd8388e1c53b281","modified":1715494078363},{"_id":"themes/next/.github/workflows/tester.yml","hash":"9a8c366c8a0bf0e0b92035fedd93e8979adaa560","modified":1715494078365},{"_id":"themes/next/.github/workflows/lock.yml","hash":"275650a678684523f37187d0532f96aa0f49ce00","modified":1715494078365},{"_id":"themes/next/.github/workflows/linter.yml","hash":"1d3d8fe53e9350e35d8349a19f65664789665e54","modified":1715494078364},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1715494078412},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1715494078411},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1715494078406},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1715494078370},{"_id":"themes/next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1715494078412},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1715494078412},{"_id":"themes/next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1715494078413},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1715494078413},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1715494078414},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1715494078414},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1715494078413},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1715494078414},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1715494078415},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1715494078414},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1715494078415},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1715494078415},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1715494078370},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1715494078416},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1715494078417},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1715494078415},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1715494078417},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1715494078417},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1715494078417},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1715494078418},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1715494078418},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1715494078418},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1715494078418},{"_id":"themes/next/docs/ru/README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1715494078369},{"_id":"themes/next/docs/zh-CN/README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1715494078371},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1715494078380},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1715494078381},{"_id":"themes/next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1715494078381},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1715494078382},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1715494078388},{"_id":"themes/next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1715494078382},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1715494078386},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1715494078392},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1715494078391},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1715494078397},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1715494078399},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"b9fcc26bbe2e7685210f050e770b42f45b0b76f0","modified":1715501593033},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1715494078392},{"_id":"themes/next/layout/_scripts/index.njk","hash":"7ed1fa981bf4765af092d7b178acbdeeb95d5b20","modified":1715494078392},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1715494078397},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1715494078399},{"_id":"themes/next/source/css/_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1715494078439},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1715494078419},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1715494078447},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1715494078448},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1715494078448},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1715494078448},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1715494078449},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1715494078451},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1715494078450},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1715494078471},{"_id":"themes/next/test/helpers/next-url.js","hash":"90092dc7e78100bc1ebd1f8ffe4d1543f48e76a8","modified":1715494078472},{"_id":"themes/next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1715494078451},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1715494078471},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1715494078454},{"_id":"themes/next/source/js/motion.js","hash":"3e88306a3e07f6619b8a4fd0ab9ded9b9fe1ac23","modified":1715494078454},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1715494078453},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1715494078452},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1715494078450},{"_id":"themes/next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1715494078455},{"_id":"themes/next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1715494078456},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1715494078472},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1715494078476},{"_id":"themes/next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1715494078457},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1715494078473},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1715494078473},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1715494078457},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1715494078473},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1715494078473},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1715494078474},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1715494078475},{"_id":"themes/next/test/tags/mermaid.js","hash":"ea8e28bb5219417bddb97c5685a7f705ee2c8a80","modified":1715494078475},{"_id":"themes/next/source/js/utils.js","hash":"10a7e2122a1dd3e731f21d844a8209342d02a762","modified":1715494078470},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1715494078474},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1715494078475},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1715494078476},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1715494078407},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1715494078475},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1715494078407},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1715494078408},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1715494078407},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1715494078408},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1715494078409},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1715494078409},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1715494078410},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1715494078410},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1715494078408},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1715494078410},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1715494078411},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1715494078411},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1715494078410},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1715494078409},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1715494078389},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1715494078389},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1715494078390},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1715494078390},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1715494078389},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1715494078390},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1715494078383},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1715494078384},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1715494078389},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1715494078384},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1715494078385},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5fd6645ba76784bce126b2af0943ef8c7d242313","modified":1715502140079},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1715494078384},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1715494078385},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1715494078387},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1715494078388},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1715494078387},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1715494078388},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1715494078391},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1715494078387},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1715494078393},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1715494078393},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1715494078394},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1715494078394},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1715494078394},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1715494078394},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1715494078395},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1715494078393},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1715494078395},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1715494078395},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1715494078398},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1715494078398},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1715494078395},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1715494078396},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1715494078396},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1715494078396},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1715494078396},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1715494078397},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1715494078397},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1715494078399},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1715494078400},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1715494078400},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1715494078396},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1715494078399},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1715494078402},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1715494078403},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1715494078403},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1715494078400},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1715494078403},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1715494078446},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1715494078446},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1715494078400},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1715494078446},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1715494078445},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1715494078466},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1715494078458},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1715494078419},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1715494078465},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1715494078420},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b4100f316e9924f2410802615107130588d721e","modified":1715494078447},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1715494078467},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1715494078424},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1715494078441},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1715494078441},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1715494078441},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1715494078442},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1715494078441},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1715494078440},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1715494078442},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1715494078443},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1715494078443},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1715494078443},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1715494078444},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1715494078443},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1715494078429},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1715494078429},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1715494078444},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"549541d3a62d296427426fde8976289cb7ee2cc4","modified":1715494078444},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bc0b1b8312ec2e076c802419d603e382a1c32232","modified":1715494078445},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1715494078445},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1715494078444},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1715494078445},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1715494078432},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1715494078433},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1715494078435},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1715494078435},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1715494078435},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1715494078433},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1715494078439},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1715494078460},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1715494078459},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1715494078460},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1715494078435},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1715494078461},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1715494078462},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1715494078460},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1715494078463},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1715494078463},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1715494078463},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1715494078464},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1715494078464},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1715494078465},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"81a24bd19554b5bd148975026db64338d8710774","modified":1715494078468},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1715494078465},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1715494078468},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"1a733d77cfed18bd85f626c89ba6aba7a146edd9","modified":1715494078469},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1715494078469},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1715494078470},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1715494078466},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1715494078465},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1715494078469},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"35401af771f43dc633dd99a92ebf5295cd0b158a","modified":1715494078468},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1715494078421},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1715494078420},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1715494078420},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1715494078421},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1715494078422},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1715494078422},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1715494078422},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1715494078422},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1715494078423},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1715494078421},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1715494078423},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1715494078423},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1715494078424},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1715494078423},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1715494078424},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1715494078425},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1715494078425},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1715494078427},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1715494078426},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1715494078426},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1715494078426},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1715494078426},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1715494078427},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1715494078427},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1715494078428},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1715494078428},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1715494078428},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"0944dc38b11e89b472a17607ef049393f2a0439f","modified":1715494078429},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1715494078430},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1715494078430},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1715494078430},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1715494078430},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1715494078431},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1715494078431},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1715494078432},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1715494078431},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1715494078432},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1715494078433},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1715494078434},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1715494078434},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1715494078436},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1715494078436},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1715494078437},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1715494078436},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1715494078437},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1715494078437},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1715494078438},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1715494078438},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1715494078439},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1715494078439},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1715494078428}],"Category":[{"name":"Nginx","_id":"clw39umov00032rvf6s36583y"},{"name":"Java","_id":"clw39umoy00072rvfc34g8sq8"},{"name":"MySQL","_id":"clw39umoz000b2rvfd44rd2ns"},{"name":"Docker","_id":"clw39ump2000f2rvfgzsufxce"},{"name":"其他","_id":"clw39ump2000j2rvff1u4bxyh"},{"name":"问题排查","_id":"clw39ump3000m2rvf55po68dj"},{"name":"翻译","_id":"clw39umpd000q2rvfb5oihg5y"}],"Data":[],"Page":[{"title":"文章分类","date":"2024-05-12T07:27:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2024-05-12 15:27:24\ntype: \"categories\"\n---\n","updated":"2024-05-12T07:30:05.352Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clw39umon00002rvfasfz9w8h","content":"","excerpt":"","more":""}],"Post":[{"title":"Nginx正向代理和反向代理配置","date":"2018-12-16T12:48:00.000Z","_content":"\n# 前言\n\n> Nginx的反向代理功能应该是Nginx诸多功能里面最常用的一个功能了，正向代理的话可能使用的场景比较少，平时接触的也不多，本章内容仅包含这两个功能的基本使用配置，因为是本地版本的，所以不包含负载均衡相关的内容。\n\n\n# 完整配置和注释\n```nginx\nuser   root owner;\nworker_processes  4;\n\n#error_log  /usr/local/etc/nginx/logs/error.log;\n#error_log  /usr/local/etc/nginx/logs/info.log info;\n\npid        /Users/martin/nginx.pid;\n\nevents {\n    worker_connections  256;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #日志的格式\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #访问日志\n    #access_log  /usr/local/etc/nginx/logs/access_log_pipe  main;\n\n    #sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    #反向代理配置\n\n    server {\n        listen       443 ssl;          #监听443端口\n        server_name  app.doodl6.com;   #服务域名\n        ssl          on;               #是否开启SSL加密\n        ssl_certificate         /Users/martin/Documents/ssl/doodl6.crt; # SSL加密证书\n        ssl_certificate_key     /Users/martin/Documents/ssl/doodl6.key; # SSL加密秘钥\n\n        charset UTF-8;   #编码指定\n\n        location ~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less)$ {   #代理指定后缀的请求，这里配的是常见的前端资源\n            proxy_pass https://127.0.0.1:80;  #转向提供内容的真实服务器地址，也可以配置本地目录（见HTTP代理配置）\n            proxy_set_header Host $http_host;  #写入Header值，\n            proxy_set_header referer \"$http_referer\";\n        }  \n\n        location = / {        #代理域名请求，也就只有域名的请求，如：https://app.doodl6.com\n            proxy_pass https://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        } \n\n        location ~ / {       #代理所有请求，不符合上面两种配置的请求都会走这个代理配置\n            proxy_pass http://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        }\n    }\n\n    server {\n        listen       80;\n        server_name  app.doodl6.com;\n        charset UTF-8; \n\n        location ~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less|ico)$ {\n            expires 30s;   #内容缓存30秒\n            root /Users/martin/project/app/front;  #指定文件根目录\n        } \n\n        location ~ / {\n            proxy_pass http://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        }\n    }\n\n    #正向代理配置\n\n    server{\n        listen 82;   #监听端口 \n        resolver 8.8.8.8;   #DNS\n        resolver_timeout 10s;  # DNS解析超时时间\n        location / {\n            proxy_pass http://$http_host$request_uri;\n            proxy_set_header Host $http_host;\n            proxy_buffers 256 4k;\n            proxy_max_temp_file_size 0;\n            proxy_connect_timeout 30;\n            proxy_cache_valid 200 302 10m;\n            proxy_cache_valid 301 1h;\n            proxy_cache_valid any 1m;\n        }\n    }\n\n    #本地反向转正向代理\n\n    server {\n        listen       80;\n        server_name  proxy.doodl6.com;\n        charset UTF-8; \n\n        location ~ / {\n            proxy_pass http://127.0.0.1:82;  #转到本地正向代理\n            proxy_set_header Host $http_host;\n        }\n    }\n\n}\n```","source":"_posts/nginx/nginx-config.md","raw":"---\ntitle: Nginx正向代理和反向代理配置\ndate: 2018-12-16 20:48:00\ncategories: \n- Nginx\n---\n\n# 前言\n\n> Nginx的反向代理功能应该是Nginx诸多功能里面最常用的一个功能了，正向代理的话可能使用的场景比较少，平时接触的也不多，本章内容仅包含这两个功能的基本使用配置，因为是本地版本的，所以不包含负载均衡相关的内容。\n\n\n# 完整配置和注释\n```nginx\nuser   root owner;\nworker_processes  4;\n\n#error_log  /usr/local/etc/nginx/logs/error.log;\n#error_log  /usr/local/etc/nginx/logs/info.log info;\n\npid        /Users/martin/nginx.pid;\n\nevents {\n    worker_connections  256;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #日志的格式\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #访问日志\n    #access_log  /usr/local/etc/nginx/logs/access_log_pipe  main;\n\n    #sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    #反向代理配置\n\n    server {\n        listen       443 ssl;          #监听443端口\n        server_name  app.doodl6.com;   #服务域名\n        ssl          on;               #是否开启SSL加密\n        ssl_certificate         /Users/martin/Documents/ssl/doodl6.crt; # SSL加密证书\n        ssl_certificate_key     /Users/martin/Documents/ssl/doodl6.key; # SSL加密秘钥\n\n        charset UTF-8;   #编码指定\n\n        location ~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less)$ {   #代理指定后缀的请求，这里配的是常见的前端资源\n            proxy_pass https://127.0.0.1:80;  #转向提供内容的真实服务器地址，也可以配置本地目录（见HTTP代理配置）\n            proxy_set_header Host $http_host;  #写入Header值，\n            proxy_set_header referer \"$http_referer\";\n        }  \n\n        location = / {        #代理域名请求，也就只有域名的请求，如：https://app.doodl6.com\n            proxy_pass https://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        } \n\n        location ~ / {       #代理所有请求，不符合上面两种配置的请求都会走这个代理配置\n            proxy_pass http://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        }\n    }\n\n    server {\n        listen       80;\n        server_name  app.doodl6.com;\n        charset UTF-8; \n\n        location ~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less|ico)$ {\n            expires 30s;   #内容缓存30秒\n            root /Users/martin/project/app/front;  #指定文件根目录\n        } \n\n        location ~ / {\n            proxy_pass http://127.0.0.1:8080;\n            proxy_set_header Host $http_host;\n        }\n    }\n\n    #正向代理配置\n\n    server{\n        listen 82;   #监听端口 \n        resolver 8.8.8.8;   #DNS\n        resolver_timeout 10s;  # DNS解析超时时间\n        location / {\n            proxy_pass http://$http_host$request_uri;\n            proxy_set_header Host $http_host;\n            proxy_buffers 256 4k;\n            proxy_max_temp_file_size 0;\n            proxy_connect_timeout 30;\n            proxy_cache_valid 200 302 10m;\n            proxy_cache_valid 301 1h;\n            proxy_cache_valid any 1m;\n        }\n    }\n\n    #本地反向转正向代理\n\n    server {\n        listen       80;\n        server_name  proxy.doodl6.com;\n        charset UTF-8; \n\n        location ~ / {\n            proxy_pass http://127.0.0.1:82;  #转到本地正向代理\n            proxy_set_header Host $http_host;\n        }\n    }\n\n}\n```","slug":"nginx/nginx-config","published":1,"updated":"2024-05-12T07:57:21.792Z","comments":1,"layout":"post","photos":[],"_id":"clw39umoq00012rvfar7o07l7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Nginx的反向代理功能应该是Nginx诸多功能里面最常用的一个功能了，正向代理的话可能使用的场景比较少，平时接触的也不多，本章内容仅包含这两个功能的基本使用配置，因为是本地版本的，所以不包含负载均衡相关的内容。</p>\n</blockquote>\n<h1 id=\"完整配置和注释\"><a href=\"#完整配置和注释\" class=\"headerlink\" title=\"完整配置和注释\"></a>完整配置和注释</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>   root owner;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  /usr/local/etc/nginx/logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  /usr/local/etc/nginx/logs/info.log info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /Users/martin/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">256</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#日志的格式</span></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#访问日志</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /usr/local/etc/nginx/logs/access_log_pipe  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#sendfile        on;</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#反向代理配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;          <span class=\"comment\">#监听443端口</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  app.doodl6.com;   <span class=\"comment\">#服务域名</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl</span>          <span class=\"literal\">on</span>;               <span class=\"comment\">#是否开启SSL加密</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span>         /Users/martin/Documents/ssl/doodl6.crt; <span class=\"comment\"># SSL加密证书</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span>     /Users/martin/Documents/ssl/doodl6.key; <span class=\"comment\"># SSL加密秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>;   <span class=\"comment\">#编码指定</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less)$</span> &#123;   <span class=\"comment\">#代理指定后缀的请求，这里配的是常见的前端资源</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://127.0.0.1:80;  <span class=\"comment\">#转向提供内容的真实服务器地址，也可以配置本地目录（见HTTP代理配置）</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;  <span class=\"comment\">#写入Header值，</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> referer <span class=\"string\">&quot;<span class=\"variable\">$http_referer</span>&quot;</span>;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> = / &#123;        <span class=\"comment\">#代理域名请求，也就只有域名的请求，如：https://app.doodl6.com</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;       <span class=\"comment\">#代理所有请求，不符合上面两种配置的请求都会走这个代理配置</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  app.doodl6.com;</span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less|ico)$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">30s</span>;   <span class=\"comment\">#内容缓存30秒</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span> /Users/martin/project/app/front;  <span class=\"comment\">#指定文件根目录</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#正向代理配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">82</span>;   <span class=\"comment\">#监听端口 </span></span><br><span class=\"line\">        <span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>;   <span class=\"comment\">#DNS</span></span><br><span class=\"line\">        <span class=\"attribute\">resolver_timeout</span> <span class=\"number\">10s</span>;  <span class=\"comment\"># DNS解析超时时间</span></span><br><span class=\"line\">        <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">256</span> <span class=\"number\">4k</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_max_temp_file_size</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_connect_timeout</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">302</span> <span class=\"number\">10m</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">301</span> <span class=\"number\">1h</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">1m</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#本地反向转正向代理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  proxy.doodl6.com;</span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:82;  <span class=\"comment\">#转到本地正向代理</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Nginx的反向代理功能应该是Nginx诸多功能里面最常用的一个功能了，正向代理的话可能使用的场景比较少，平时接触的也不多，本章内容仅包含这两个功能的基本使用配置，因为是本地版本的，所以不包含负载均衡相关的内容。</p>\n</blockquote>\n<h1 id=\"完整配置和注释\"><a href=\"#完整配置和注释\" class=\"headerlink\" title=\"完整配置和注释\"></a>完整配置和注释</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>   root owner;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  /usr/local/etc/nginx/logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  /usr/local/etc/nginx/logs/info.log info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /Users/martin/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">256</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#日志的格式</span></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#访问日志</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /usr/local/etc/nginx/logs/access_log_pipe  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#sendfile        on;</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#反向代理配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;          <span class=\"comment\">#监听443端口</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  app.doodl6.com;   <span class=\"comment\">#服务域名</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl</span>          <span class=\"literal\">on</span>;               <span class=\"comment\">#是否开启SSL加密</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span>         /Users/martin/Documents/ssl/doodl6.crt; <span class=\"comment\"># SSL加密证书</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span>     /Users/martin/Documents/ssl/doodl6.key; <span class=\"comment\"># SSL加密秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>;   <span class=\"comment\">#编码指定</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less)$</span> &#123;   <span class=\"comment\">#代理指定后缀的请求，这里配的是常见的前端资源</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://127.0.0.1:80;  <span class=\"comment\">#转向提供内容的真实服务器地址，也可以配置本地目录（见HTTP代理配置）</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;  <span class=\"comment\">#写入Header值，</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> referer <span class=\"string\">&quot;<span class=\"variable\">$http_referer</span>&quot;</span>;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> = / &#123;        <span class=\"comment\">#代理域名请求，也就只有域名的请求，如：https://app.doodl6.com</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;       <span class=\"comment\">#代理所有请求，不符合上面两种配置的请求都会走这个代理配置</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  app.doodl6.com;</span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~* ^.+\\.(xls|woff2|log|jpg|jpeg|gif|png|ico|html|cfm|cfc|afp|asp|lasso|pl|py|txt|fla|swf|zip|js|css|less|ico)$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">30s</span>;   <span class=\"comment\">#内容缓存30秒</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span> /Users/martin/project/app/front;  <span class=\"comment\">#指定文件根目录</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#正向代理配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">82</span>;   <span class=\"comment\">#监听端口 </span></span><br><span class=\"line\">        <span class=\"attribute\">resolver</span> <span class=\"number\">8.8.8.8</span>;   <span class=\"comment\">#DNS</span></span><br><span class=\"line\">        <span class=\"attribute\">resolver_timeout</span> <span class=\"number\">10s</span>;  <span class=\"comment\"># DNS解析超时时间</span></span><br><span class=\"line\">        <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://<span class=\"variable\">$http_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">256</span> <span class=\"number\">4k</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_max_temp_file_size</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_connect_timeout</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">302</span> <span class=\"number\">10m</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">301</span> <span class=\"number\">1h</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">1m</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#本地反向转正向代理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  proxy.doodl6.com;</span><br><span class=\"line\">        <span class=\"attribute\">charset</span> UTF-<span class=\"number\">8</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ /</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:82;  <span class=\"comment\">#转到本地正向代理</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用Java结合Redis的bitmap结构实现布隆过滤器","date":"2019-02-21T11:15:00.000Z","_content":"\n# 前言\n\n> 最近在研究布隆过滤器（如果不了解什么是布隆过滤器的，推荐看这篇[如何判断一个元素在亿级数据中是否存在？][1]了解），发现Guava提供了封装好的类，但是只能单机使用，一般现在的应用都是部署在分布式系统的，所以想找个可以在分布式系统下使用的布隆过滤器，找了半天只找到一个基于redis开发的模块项目[ReBloom][2]，但是这个是需要额外安装的，而且文档里只说了怎么在docker下运行，没研究过docker所以放弃了。后来找到一篇博客讲怎么利用布隆过滤器统计消息未读数的（博客地址不记得了，是一位淘宝同学写的），博客最后放了一份整合redis和bloomFilter的代码demo，详见[BloomFilter.java][3]，看了下实现比较简单，但是使用方式不是我想要的，所以参考着自己整理了一份。\n\n# BloomFilterHelper\n\n```java\npackage com.doodl6.springmvc.service.cache.redis;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.hash.Funnel;\nimport com.google.common.hash.Hashing;\n\npublic class BloomFilterHelper<T> {\n\n    private int numHashFunctions;\n\n    private int bitSize;\n\n    private Funnel<T> funnel;\n\n    public BloomFilterHelper(Funnel<T> funnel, int expectedInsertions, double fpp) {\n        Preconditions.checkArgument(funnel != null, \"funnel不能为空\");\n        this.funnel = funnel;\n        bitSize = optimalNumOfBits(expectedInsertions, fpp);\n        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);\n    }\n\n    int[] murmurHashOffset(T value) {\n        int[] offset = new int[numHashFunctions];\n\n        long hash64 = Hashing.murmur3_128().hashObject(value, funnel).asLong();\n        int hash1 = (int) hash64;\n        int hash2 = (int) (hash64 >>> 32);\n        for (int i = 1; i <= numHashFunctions; i++) {\n            int nextHash = hash1 + i * hash2;\n            if (nextHash < 0) {\n                nextHash = ~nextHash;\n            }\n            offset[i - 1] = nextHash % bitSize;\n        }\n\n        return offset;\n    }\n\n    /**\n     * 计算bit数组长度\n     */\n    private int optimalNumOfBits(long n, double p) {\n        if (p == 0) {\n            p = Double.MIN_VALUE;\n        }\n        return (int) (-n * Math.log(p) / (Math.log(2) * Math.log(2)));\n    }\n\n    /**\n     * 计算hash方法执行次数\n     */\n    private int optimalNumOfHashFunctions(long n, long m) {\n        return Math.max(1, (int) Math.round((double) m / n * Math.log(2)));\n    }\n}\n```\n\n**BloomFilterHelper**是实现功能的关键，包含了计算bitmap的核心算法，其实大部分代码都是来源于Guava库里面的BloomFilterStrategies类，但是因为这个类是专门为Guava的BloomFilter类使用的，所以没有对外暴露一些重要的算法逻辑。\n\n再来看怎么结合redis一起使用BloomFilterHelper\n\n<!--more-->\n\n# RedisService\n\n```java\npackage com.doodl6.springmvc.service.cache.redis;\n\nimport com.google.common.base.Preconditions;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class RedisService {\n\n    @Resource\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 根据给定的布隆过滤器添加值\n     */\n    public <T> void addByBloomFilter(BloomFilterHelper<T> bloomFilterHelper, String key, T value) {\n        Preconditions.checkArgument(bloomFilterHelper != null, \"bloomFilterHelper不能为空\");\n        int[] offset = bloomFilterHelper.murmurHashOffset(value);\n        for (int i : offset) {\n            redisTemplate.opsForValue().setBit(key, i, true);\n        }\n    }\n\n    /**\n     * 根据给定的布隆过滤器判断值是否存在\n     */\n    public <T> boolean includeByBloomFilter(BloomFilterHelper<T> bloomFilterHelper, String key, T value) {\n        Preconditions.checkArgument(bloomFilterHelper != null, \"bloomFilterHelper不能为空\");\n        int[] offset = bloomFilterHelper.murmurHashOffset(value);\n        for (int i : offset) {\n            if (!redisTemplate.opsForValue().getBit(key, i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n```\n\n\nRedisService很简单，只有两个方法\n\n**addByBloomFilter**，往redis里面添加元素\n\n**includeByBloomFilter**，检查元素是否在redis bloomFilter里面\n\n这里redis的客户端使用的是spring-data-redis封装的，可以在我的项目[SpringMVC-Project][4]中查看完整的使用代码。\n\n\n  [1]: https://crossoverjie.top/2018/11/26/guava/guava-bloom-filter/\n  [2]: https://github.com/RedisLabsModules/rebloom\n  [3]: https://github.com/olylakers/RedisBloomFilter/blob/master/src/main/java/org/olylakers/bloomfilter/BloomFilter.java\n  [4]: https://github.com/MartinDai/SpringMVC-Project","source":"_posts/java/java-use-redis-bloom-filter.md","raw":"---\ntitle: 使用Java结合Redis的bitmap结构实现布隆过滤器\ndate: 2019-02-21 19:15:00\ncategories: \n- Java\n---\n\n# 前言\n\n> 最近在研究布隆过滤器（如果不了解什么是布隆过滤器的，推荐看这篇[如何判断一个元素在亿级数据中是否存在？][1]了解），发现Guava提供了封装好的类，但是只能单机使用，一般现在的应用都是部署在分布式系统的，所以想找个可以在分布式系统下使用的布隆过滤器，找了半天只找到一个基于redis开发的模块项目[ReBloom][2]，但是这个是需要额外安装的，而且文档里只说了怎么在docker下运行，没研究过docker所以放弃了。后来找到一篇博客讲怎么利用布隆过滤器统计消息未读数的（博客地址不记得了，是一位淘宝同学写的），博客最后放了一份整合redis和bloomFilter的代码demo，详见[BloomFilter.java][3]，看了下实现比较简单，但是使用方式不是我想要的，所以参考着自己整理了一份。\n\n# BloomFilterHelper\n\n```java\npackage com.doodl6.springmvc.service.cache.redis;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.hash.Funnel;\nimport com.google.common.hash.Hashing;\n\npublic class BloomFilterHelper<T> {\n\n    private int numHashFunctions;\n\n    private int bitSize;\n\n    private Funnel<T> funnel;\n\n    public BloomFilterHelper(Funnel<T> funnel, int expectedInsertions, double fpp) {\n        Preconditions.checkArgument(funnel != null, \"funnel不能为空\");\n        this.funnel = funnel;\n        bitSize = optimalNumOfBits(expectedInsertions, fpp);\n        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);\n    }\n\n    int[] murmurHashOffset(T value) {\n        int[] offset = new int[numHashFunctions];\n\n        long hash64 = Hashing.murmur3_128().hashObject(value, funnel).asLong();\n        int hash1 = (int) hash64;\n        int hash2 = (int) (hash64 >>> 32);\n        for (int i = 1; i <= numHashFunctions; i++) {\n            int nextHash = hash1 + i * hash2;\n            if (nextHash < 0) {\n                nextHash = ~nextHash;\n            }\n            offset[i - 1] = nextHash % bitSize;\n        }\n\n        return offset;\n    }\n\n    /**\n     * 计算bit数组长度\n     */\n    private int optimalNumOfBits(long n, double p) {\n        if (p == 0) {\n            p = Double.MIN_VALUE;\n        }\n        return (int) (-n * Math.log(p) / (Math.log(2) * Math.log(2)));\n    }\n\n    /**\n     * 计算hash方法执行次数\n     */\n    private int optimalNumOfHashFunctions(long n, long m) {\n        return Math.max(1, (int) Math.round((double) m / n * Math.log(2)));\n    }\n}\n```\n\n**BloomFilterHelper**是实现功能的关键，包含了计算bitmap的核心算法，其实大部分代码都是来源于Guava库里面的BloomFilterStrategies类，但是因为这个类是专门为Guava的BloomFilter类使用的，所以没有对外暴露一些重要的算法逻辑。\n\n再来看怎么结合redis一起使用BloomFilterHelper\n\n<!--more-->\n\n# RedisService\n\n```java\npackage com.doodl6.springmvc.service.cache.redis;\n\nimport com.google.common.base.Preconditions;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class RedisService {\n\n    @Resource\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 根据给定的布隆过滤器添加值\n     */\n    public <T> void addByBloomFilter(BloomFilterHelper<T> bloomFilterHelper, String key, T value) {\n        Preconditions.checkArgument(bloomFilterHelper != null, \"bloomFilterHelper不能为空\");\n        int[] offset = bloomFilterHelper.murmurHashOffset(value);\n        for (int i : offset) {\n            redisTemplate.opsForValue().setBit(key, i, true);\n        }\n    }\n\n    /**\n     * 根据给定的布隆过滤器判断值是否存在\n     */\n    public <T> boolean includeByBloomFilter(BloomFilterHelper<T> bloomFilterHelper, String key, T value) {\n        Preconditions.checkArgument(bloomFilterHelper != null, \"bloomFilterHelper不能为空\");\n        int[] offset = bloomFilterHelper.murmurHashOffset(value);\n        for (int i : offset) {\n            if (!redisTemplate.opsForValue().getBit(key, i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n```\n\n\nRedisService很简单，只有两个方法\n\n**addByBloomFilter**，往redis里面添加元素\n\n**includeByBloomFilter**，检查元素是否在redis bloomFilter里面\n\n这里redis的客户端使用的是spring-data-redis封装的，可以在我的项目[SpringMVC-Project][4]中查看完整的使用代码。\n\n\n  [1]: https://crossoverjie.top/2018/11/26/guava/guava-bloom-filter/\n  [2]: https://github.com/RedisLabsModules/rebloom\n  [3]: https://github.com/olylakers/RedisBloomFilter/blob/master/src/main/java/org/olylakers/bloomfilter/BloomFilter.java\n  [4]: https://github.com/MartinDai/SpringMVC-Project","slug":"java/java-use-redis-bloom-filter","published":1,"updated":"2024-05-12T08:04:01.086Z","comments":1,"layout":"post","photos":[],"_id":"clw39umot00022rvfauawe1j7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>最近在研究布隆过滤器（如果不了解什么是布隆过滤器的，推荐看这篇<a href=\"https://crossoverjie.top/2018/11/26/guava/guava-bloom-filter/\">如何判断一个元素在亿级数据中是否存在？</a>了解），发现Guava提供了封装好的类，但是只能单机使用，一般现在的应用都是部署在分布式系统的，所以想找个可以在分布式系统下使用的布隆过滤器，找了半天只找到一个基于redis开发的模块项目<a href=\"https://github.com/RedisLabsModules/rebloom\">ReBloom</a>，但是这个是需要额外安装的，而且文档里只说了怎么在docker下运行，没研究过docker所以放弃了。后来找到一篇博客讲怎么利用布隆过滤器统计消息未读数的（博客地址不记得了，是一位淘宝同学写的），博客最后放了一份整合redis和bloomFilter的代码demo，详见<a href=\"https://github.com/olylakers/RedisBloomFilter/blob/master/src/main/java/org/olylakers/bloomfilter/BloomFilter.java\">BloomFilter.java</a>，看了下实现比较简单，但是使用方式不是我想要的，所以参考着自己整理了一份。</p>\n</blockquote>\n<h1 id=\"BloomFilterHelper\"><a href=\"#BloomFilterHelper\" class=\"headerlink\" title=\"BloomFilterHelper\"></a>BloomFilterHelper</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.doodl6.springmvc.service.cache.redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Funnel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilterHelper</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numHashFunctions;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> bitSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Funnel&lt;T&gt; funnel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BloomFilterHelper</span><span class=\"params\">(Funnel&lt;T&gt; funnel, <span class=\"type\">int</span> expectedInsertions, <span class=\"type\">double</span> fpp)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(funnel != <span class=\"literal\">null</span>, <span class=\"string\">&quot;funnel不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.funnel = funnel;</span><br><span class=\"line\">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class=\"line\">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] murmurHashOffset(T value) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numHashFunctions];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">hash64</span> <span class=\"operator\">=</span> Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash1</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) hash64;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash2</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (hash64 &gt;&gt;&gt; <span class=\"number\">32</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= numHashFunctions; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">nextHash</span> <span class=\"operator\">=</span> hash1 + i * hash2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextHash &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                nextHash = ~nextHash;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            offset[i - <span class=\"number\">1</span>] = nextHash % bitSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算bit数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">optimalNumOfBits</span><span class=\"params\">(<span class=\"type\">long</span> n, <span class=\"type\">double</span> p)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            p = Double.MIN_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) (-n * Math.log(p) / (Math.log(<span class=\"number\">2</span>) * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算hash方法执行次数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">optimalNumOfHashFunctions</span><span class=\"params\">(<span class=\"type\">long</span> n, <span class=\"type\">long</span> m)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(<span class=\"number\">1</span>, (<span class=\"type\">int</span>) Math.round((<span class=\"type\">double</span>) m / n * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>BloomFilterHelper</strong>是实现功能的关键，包含了计算bitmap的核心算法，其实大部分代码都是来源于Guava库里面的BloomFilterStrategies类，但是因为这个类是专门为Guava的BloomFilter类使用的，所以没有对外暴露一些重要的算法逻辑。</p>\n<p>再来看怎么结合redis一起使用BloomFilterHelper</p>\n<span id=\"more\"></span>\n\n<h1 id=\"RedisService\"><a href=\"#RedisService\" class=\"headerlink\" title=\"RedisService\"></a>RedisService</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.doodl6.springmvc.service.cache.redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据给定的布隆过滤器添加值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">addByBloomFilter</span><span class=\"params\">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(bloomFilterHelper != <span class=\"literal\">null</span>, <span class=\"string\">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : offset) &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().setBit(key, i, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据给定的布隆过滤器判断值是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">includeByBloomFilter</span><span class=\"params\">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(bloomFilterHelper != <span class=\"literal\">null</span>, <span class=\"string\">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : offset) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!redisTemplate.opsForValue().getBit(key, i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>RedisService很简单，只有两个方法</p>\n<p><strong>addByBloomFilter</strong>，往redis里面添加元素</p>\n<p><strong>includeByBloomFilter</strong>，检查元素是否在redis bloomFilter里面</p>\n<p>这里redis的客户端使用的是spring-data-redis封装的，可以在我的项目<a href=\"https://github.com/MartinDai/SpringMVC-Project\">SpringMVC-Project</a>中查看完整的使用代码。</p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>最近在研究布隆过滤器（如果不了解什么是布隆过滤器的，推荐看这篇<a href=\"https://crossoverjie.top/2018/11/26/guava/guava-bloom-filter/\">如何判断一个元素在亿级数据中是否存在？</a>了解），发现Guava提供了封装好的类，但是只能单机使用，一般现在的应用都是部署在分布式系统的，所以想找个可以在分布式系统下使用的布隆过滤器，找了半天只找到一个基于redis开发的模块项目<a href=\"https://github.com/RedisLabsModules/rebloom\">ReBloom</a>，但是这个是需要额外安装的，而且文档里只说了怎么在docker下运行，没研究过docker所以放弃了。后来找到一篇博客讲怎么利用布隆过滤器统计消息未读数的（博客地址不记得了，是一位淘宝同学写的），博客最后放了一份整合redis和bloomFilter的代码demo，详见<a href=\"https://github.com/olylakers/RedisBloomFilter/blob/master/src/main/java/org/olylakers/bloomfilter/BloomFilter.java\">BloomFilter.java</a>，看了下实现比较简单，但是使用方式不是我想要的，所以参考着自己整理了一份。</p>\n</blockquote>\n<h1 id=\"BloomFilterHelper\"><a href=\"#BloomFilterHelper\" class=\"headerlink\" title=\"BloomFilterHelper\"></a>BloomFilterHelper</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.doodl6.springmvc.service.cache.redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Funnel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilterHelper</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numHashFunctions;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> bitSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Funnel&lt;T&gt; funnel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BloomFilterHelper</span><span class=\"params\">(Funnel&lt;T&gt; funnel, <span class=\"type\">int</span> expectedInsertions, <span class=\"type\">double</span> fpp)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(funnel != <span class=\"literal\">null</span>, <span class=\"string\">&quot;funnel不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.funnel = funnel;</span><br><span class=\"line\">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class=\"line\">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] murmurHashOffset(T value) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numHashFunctions];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">hash64</span> <span class=\"operator\">=</span> Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash1</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) hash64;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">hash2</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (hash64 &gt;&gt;&gt; <span class=\"number\">32</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= numHashFunctions; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">nextHash</span> <span class=\"operator\">=</span> hash1 + i * hash2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextHash &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                nextHash = ~nextHash;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            offset[i - <span class=\"number\">1</span>] = nextHash % bitSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算bit数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">optimalNumOfBits</span><span class=\"params\">(<span class=\"type\">long</span> n, <span class=\"type\">double</span> p)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            p = Double.MIN_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) (-n * Math.log(p) / (Math.log(<span class=\"number\">2</span>) * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算hash方法执行次数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">optimalNumOfHashFunctions</span><span class=\"params\">(<span class=\"type\">long</span> n, <span class=\"type\">long</span> m)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(<span class=\"number\">1</span>, (<span class=\"type\">int</span>) Math.round((<span class=\"type\">double</span>) m / n * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>BloomFilterHelper</strong>是实现功能的关键，包含了计算bitmap的核心算法，其实大部分代码都是来源于Guava库里面的BloomFilterStrategies类，但是因为这个类是专门为Guava的BloomFilter类使用的，所以没有对外暴露一些重要的算法逻辑。</p>\n<p>再来看怎么结合redis一起使用BloomFilterHelper</p>","more":"<h1 id=\"RedisService\"><a href=\"#RedisService\" class=\"headerlink\" title=\"RedisService\"></a>RedisService</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.doodl6.springmvc.service.cache.redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据给定的布隆过滤器添加值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">addByBloomFilter</span><span class=\"params\">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(bloomFilterHelper != <span class=\"literal\">null</span>, <span class=\"string\">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : offset) &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().setBit(key, i, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据给定的布隆过滤器判断值是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">includeByBloomFilter</span><span class=\"params\">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> &#123;</span><br><span class=\"line\">        Preconditions.checkArgument(bloomFilterHelper != <span class=\"literal\">null</span>, <span class=\"string\">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : offset) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!redisTemplate.opsForValue().getBit(key, i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>RedisService很简单，只有两个方法</p>\n<p><strong>addByBloomFilter</strong>，往redis里面添加元素</p>\n<p><strong>includeByBloomFilter</strong>，检查元素是否在redis bloomFilter里面</p>\n<p>这里redis的客户端使用的是spring-data-redis封装的，可以在我的项目<a href=\"https://github.com/MartinDai/SpringMVC-Project\">SpringMVC-Project</a>中查看完整的使用代码。</p>"},{"title":"MySQL分页查询offset过大，Sql优化经验","date":"2019-02-20T13:05:00.000Z","_content":"\n# 低性能版\n\n```sql\nSELECT\n*\nFROM table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000\n```\n当offset特别大时，这条语句的执行效率会明显减低，而且效率是随着offset的增大而降低的。\n原因为：\nMySQL并不是跳过`offset`行，而是取`offset+N`行，然后返回放弃前`offset`行，返回`N`行，当`offset`特别大，然后单条数据也很大的时候，每次查询需要获取的数据就越多，自然就会很慢。\n\n# 优化版本\n\n```sql\nSELECT\n*\nFROM table\nJOIN\n(select id from table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000)\nas tmp using(id)\n```\n\n或者\n\n```sql\nSELECT a.* FROM table a, \n(select id from table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000) b \nwhere a.id = b.id\n```\n\n\n先获取主键列表，再通过主键查询目标数据，即使offset很大，也是获取了很多的主键，而不是所有的字段数据，相对而言效率会提升很多。","source":"_posts/mysql/mysql-limit-optimization.md","raw":"---\ntitle: MySQL分页查询offset过大，Sql优化经验\ndate: 2019-02-20 21:05:00\ncategories: \n- MySQL\n---\n\n# 低性能版\n\n```sql\nSELECT\n*\nFROM table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000\n```\n当offset特别大时，这条语句的执行效率会明显减低，而且效率是随着offset的增大而降低的。\n原因为：\nMySQL并不是跳过`offset`行，而是取`offset+N`行，然后返回放弃前`offset`行，返回`N`行，当`offset`特别大，然后单条数据也很大的时候，每次查询需要获取的数据就越多，自然就会很慢。\n\n# 优化版本\n\n```sql\nSELECT\n*\nFROM table\nJOIN\n(select id from table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000)\nas tmp using(id)\n```\n\n或者\n\n```sql\nSELECT a.* FROM table a, \n(select id from table\nwhere condition1 = 0\nand condition2 = 0\nand condition3 = -1\nand condition4 = -1\norder by id asc\nLIMIT 2000 OFFSET 50000) b \nwhere a.id = b.id\n```\n\n\n先获取主键列表，再通过主键查询目标数据，即使offset很大，也是获取了很多的主键，而不是所有的字段数据，相对而言效率会提升很多。","slug":"mysql/mysql-limit-optimization","published":1,"updated":"2024-05-12T07:55:39.642Z","comments":1,"layout":"post","photos":[],"_id":"clw39umow00042rvf4dhu9unq","content":"<h1 id=\"低性能版\"><a href=\"#低性能版\" class=\"headerlink\" title=\"低性能版\"></a>低性能版</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span></span><br></pre></td></tr></table></figure>\n<p>当offset特别大时，这条语句的执行效率会明显减低，而且效率是随着offset的增大而降低的。<br>原因为：<br>MySQL并不是跳过<code>offset</code>行，而是取<code>offset+N</code>行，然后返回放弃前<code>offset</code>行，返回<code>N</code>行，当<code>offset</code>特别大，然后单条数据也很大的时候，每次查询需要获取的数据就越多，自然就会很慢。</p>\n<h1 id=\"优化版本\"><a href=\"#优化版本\" class=\"headerlink\" title=\"优化版本\"></a>优化版本</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span>)</span><br><span class=\"line\"><span class=\"keyword\">as</span> tmp <span class=\"keyword\">using</span>(id)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> a.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> a, </span><br><span class=\"line\">(<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span>) b </span><br><span class=\"line\"><span class=\"keyword\">where</span> a.id <span class=\"operator\">=</span> b.id</span><br></pre></td></tr></table></figure>\n\n\n<p>先获取主键列表，再通过主键查询目标数据，即使offset很大，也是获取了很多的主键，而不是所有的字段数据，相对而言效率会提升很多。</p>\n","excerpt":"","more":"<h1 id=\"低性能版\"><a href=\"#低性能版\" class=\"headerlink\" title=\"低性能版\"></a>低性能版</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span></span><br></pre></td></tr></table></figure>\n<p>当offset特别大时，这条语句的执行效率会明显减低，而且效率是随着offset的增大而降低的。<br>原因为：<br>MySQL并不是跳过<code>offset</code>行，而是取<code>offset+N</code>行，然后返回放弃前<code>offset</code>行，返回<code>N</code>行，当<code>offset</code>特别大，然后单条数据也很大的时候，每次查询需要获取的数据就越多，自然就会很慢。</p>\n<h1 id=\"优化版本\"><a href=\"#优化版本\" class=\"headerlink\" title=\"优化版本\"></a>优化版本</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span>)</span><br><span class=\"line\"><span class=\"keyword\">as</span> tmp <span class=\"keyword\">using</span>(id)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> a.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> a, </span><br><span class=\"line\">(<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> condition1 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition2 <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition3 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> condition4 <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">asc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">2000</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">50000</span>) b </span><br><span class=\"line\"><span class=\"keyword\">where</span> a.id <span class=\"operator\">=</span> b.id</span><br></pre></td></tr></table></figure>\n\n\n<p>先获取主键列表，再通过主键查询目标数据，即使offset很大，也是获取了很多的主键，而不是所有的字段数据，相对而言效率会提升很多。</p>\n"},{"title":"Java8 Stream完全使用指南","date":"2020-05-30T12:44:00.000Z","_content":"\n## 什么是Stream\n\n`Stream`是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。\n\n\n## 如何获得Stream实例\n\n`Stream`提供了静态构建方法，可以基于不同的参数创建返回Stream实例\n使用`Collection`的子类实例调用`stream()`或者`parallelStream()`方法也可以得到Stream实例，两个方法的区别在于后续执行`Stream`其他方法的时候是单线程还是多线程\n\n```java\nStream<String> stringStream = Stream.of(\"1\", \"2\", \"3\");\n//无限长的偶数流\nStream<Integer> evenNumStream = Stream.iterate(0, n -> n + 2);\n\nList<String> strList = new ArrayList<>();\nstrList.add(\"1\");\nstrList.add(\"2\");\nstrList.add(\"3\");\nStream<String> strStream = strList.stream();\nStream<String> strParallelStream = strList.parallelStream();\n```\n\n## filter\n\n`filter`方法用于根据指定的条件做过滤，返回符合条件的流\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//获得只包含正数的流，positiveNumStream -> (1，2，3)\nStream<Integer> positiveNumStream = numStream.filter(num -> num > 0);\n```\n\n## map\n\n`map`方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//转换成字符串流\nStream<String> strStream = numStream.map(String::valueOf);\n```\n\n<!--more-->\n\n## mapToInt mapToLong mapToDouble\n\n这三个方法是对`map`方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nIntStream intStream = stringStream.mapToInt(Integer::parseInt);\nLongStream longStream = stringStream.mapToLong(Long::parseLong);\nDoubleStream doubleStream = stringStream.mapToDouble(Double::parseDouble);\n```\n\n## flatMap\n\n`flatMap`方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法，如下：\n\n```java\nStream<Item> allItemStream = orderList.stream().flatMap(order -> order.itemList.stream());\n```\n\n## flatMapToInt flatMapToLong flatMapToDouble\n\n这三个方法是对`flatMap`方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上\n\n## distinct\n\n`distinct`方法用于对流中的元素去重，判断元素是否重复使用的是`equals`方法\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 0, 1, 2, 2, 3);\n//不重复的数字流，uniqueNumStream -> (-2, -1, 0, 1, 2, 3)\nStream<Integer> uniqueNumStream = numStream.distinct();\n```\n\n## sorted\n\n`sorted`有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现`Comparable`接口，不然会报`java.lang.ClassCastException`异常\n\n```java\nStream<Integer> unorderedStream = Stream.of(5, 6, 32, 7, 27, 4);\n//按从小到大排序完成的流，orderedStream -> (4, 5, 6, 7, 27, 32)\nStream<Integer> orderedStream = unorderedStream.sorted();\n```\n\n有参方法`sorted(Comparator<? super T> comparator)`不需要元素实现`Comparable`接口，通过指定的元素比较器对流内的元素进行排序\n\n```java\nStream<String> unorderedStream = Stream.of(\"1234\", \"123\", \"12\", \"12345\", \"123456\", \"1\");\n//按字符串长度从小到大排序完成的流，orderedStream -> (\"1\", \"12\", \"123\", \"1234\", \"12345\", \"123456\")\nStream<String> orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));\n```\n\n## peek\n\n`peek`方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为`Stream`使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现\n\n```java\nStream.of(\"one\", \"two\", \"three\", \"four\")\n     .filter(e -> e.length() > 3)\n     .peek(e -> System.out.println(\"Filtered value: \" + e))\n     .map(String::toUpperCase)\n     .peek(e -> System.out.println(\"Mapped value: \" + e))\n     .collect(Collectors.toList());\n     \n输出：\nFiltered value: three\nMapped value: THREE\nFiltered value: four\nMapped value: FOUR\n```\n\n## limit(long maxSize)\n\n`limit`方法会对流进行顺序截取，从第1个元素开始，保留最多`maxSize`个元素\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//截取前3个元素，subStringStream -> (\"-2\", \"-1\", \"0\")\nStream<String> subStringStream = stringStream.limit(3);\n```\n\n## skip(long n)\n\n`skip`方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//跳过前3个元素，subStringStream -> (\"1\", \"2\", \"3\")\nStream<String> subStringStream = stringStream.skip(3);\n```\n\n## forEach\n\n`forEach`方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//单线程遍历输出元素\nstringStream.forEach(System.out::println);\n//多线程遍历输出元素\nstringStream.parallel().forEach(System.out::println);\n```\n\n## forEachOrdered\n\n`forEachOrdered`方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过`parallel`方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//顺序遍历输出元素\nstringStream.forEachOrdered(System.out::println);\n//多线程遍历输出元素，下面这行跟上面的执行结果是一样的\n//stringStream.parallel().forEachOrdered(System.out::println);\n```\n\n## toArray\n\n`toArray`有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nObject[] objArray = stringStream.toArray();\n```\n\n有参方法`toArray(IntFunction<A[]> generator)`支持把流中的元素转换成指定类型的元素数组\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nString[] strArray = stringStream.toArray(String[]::new);\n```\n\n## reduce\n\n`reduce`有三个重载方法，作用是对流内元素做累进操作\n\n第一个`reduce(BinaryOperator<T> accumulator)`\n\n`accumulator` 为累进操作的具体计算\n\n单线程等下如下代码\n\n```java\nboolean foundAny = false;\nT result = null;\nfor (T element : this stream) {\n  if (!foundAny) {\n      foundAny = true;\n      result = element;\n  }\n  else\n      result = accumulator.apply(result, element);\n}\nreturn foundAny ? Optional.of(result) : Optional.empty();\n```\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//查找最小值\nOptional<Integer> min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));\n//输出 -2\nSystem.out.println(min.get());\n\n//过滤出大于5的元素流\nnumStream = Stream.of(-2, -1, 0, 1, 2, 3).filter(num -> num > 5);\n//查找最小值\nmin = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));\n//输出 Optional.empty\nSystem.out.println(min);\n```\n\n第二个`reduce(T identity, BinaryOperator<T> accumulator)`\n\n`identity` 为累进操作的初始值\n`accumulator` 同上\n\n单线程等价如下代码\n\n```java\nT result = identity;\nfor (T element : this stream)\n  result = accumulator.apply(result, element)\nreturn result;\n```\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//累加计算所有元素的和，sum=3\nint sum = numStream.reduce(0, Integer::sum);\n```\n\n第三个`reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)`\n\n`identity`和`accumulator`同上\n`combiner`用于多线程执行的情况下合并最终结果\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nint sum = numStream.parallel().reduce(0, (a, b) -> {\n    System.out.println(\"accumulator执行:\" + a + \" + \" + b);\n    return a + b;\n}, (a, b) -> {\n    System.out.println(\"combiner执行:\" + a + \" + \" + b);\n    return a + b;\n});\nSystem.out.println(\"最终结果：\"+sum);\n\n输出：\naccumulator执行:0 + -1\naccumulator执行:0 + 1\naccumulator执行:0 + 0\naccumulator执行:0 + 2\naccumulator执行:0 + -2\naccumulator执行:0 + 3\ncombiner执行:2 + 3\ncombiner执行:-1 + 0\ncombiner执行:1 + 5\ncombiner执行:-2 + -1\ncombiner执行:-3 + 6\n最终结果：3\n```\n\n## collect\n\n`collect`有两个重载方法，主要作用是把流中的元素作为集合转换成其他`Collection`的子类，其内部实现类似于前面的累进操作\n\n第一个`collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)`\n\n`supplier` 需要返回开始执行时的默认结果\n`accumulator` 用于累进计算用\n`combiner` 用于多线程合并结果\n\n单线程执行等价于如下代码\n\n```java\nR result = supplier.get();\nfor (T element : this stream)\n  accumulator.accept(result, element);\nreturn result;\n```\n\n第二个`collect(Collector<? super T, A, R> collector)`\n\n`collector`其实是对上面的方法参数的一个封装，内部执行逻辑是一样的，只不过JDK提供了一些默认的`Collector`实现\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nList<Integer> numList = numStream.collect(Collectors.toList());\nSet<Integer> numSet = numStream.collect(Collectors.toSet());\n```\n\n## min\n\n`min`方法用于计算流内元素的最小值\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> min = numStream.min(Integer::compareTo);\n```\n\n## max\n\n`min`方法用于计算流内元素的最大值\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> max = numStream.max(Integer::compareTo);\n```\n\n## count\n\n`count`方法用于统计流内元素的总个数\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//count=6\nlong count = numStream.count();\n```\n\n## anyMatch\n\n`anyMatch`方法用于匹配校验流内元素是否有符合指定条件的元素\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否包含正数，hasPositiveNum=true\nboolean hasPositiveNum = numStream.anyMatch(num -> num > 0);\n```\n\n## allMatch\n\n`allMatch`方法用于匹配校验流内元素是否所有元素都符合指定条件\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否全部是正数，allNumPositive=false\nboolean allNumPositive = numStream.allMatch(num -> num > 0);\n```\n\n## noneMatch\n\n`noneMatch`方法用于匹配校验流内元素是否都不符合指定条件\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否没有小于0的元素，noNegativeNum=false\nboolean noNegativeNum = numStream.noneMatch(num -> num < 0);\n```\n\n## findFirst\n\n`findFirst`方法用于获取第一个元素，如果流是空的，则返回Optional.empty\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//获取第一个元素，firstNum=-2\nOptional<Integer> firstNum = numStream.findFirst();\n```\n\n## findAny\n\n`findAny`方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> anyNum = numStream.findAny();\n```","source":"_posts/java/java8-stream.md","raw":"---\ntitle: Java8 Stream完全使用指南\ndate: 2020-05-30 20:44:00\ncategories: \n- Java\n---\n\n## 什么是Stream\n\n`Stream`是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。\n\n\n## 如何获得Stream实例\n\n`Stream`提供了静态构建方法，可以基于不同的参数创建返回Stream实例\n使用`Collection`的子类实例调用`stream()`或者`parallelStream()`方法也可以得到Stream实例，两个方法的区别在于后续执行`Stream`其他方法的时候是单线程还是多线程\n\n```java\nStream<String> stringStream = Stream.of(\"1\", \"2\", \"3\");\n//无限长的偶数流\nStream<Integer> evenNumStream = Stream.iterate(0, n -> n + 2);\n\nList<String> strList = new ArrayList<>();\nstrList.add(\"1\");\nstrList.add(\"2\");\nstrList.add(\"3\");\nStream<String> strStream = strList.stream();\nStream<String> strParallelStream = strList.parallelStream();\n```\n\n## filter\n\n`filter`方法用于根据指定的条件做过滤，返回符合条件的流\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//获得只包含正数的流，positiveNumStream -> (1，2，3)\nStream<Integer> positiveNumStream = numStream.filter(num -> num > 0);\n```\n\n## map\n\n`map`方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//转换成字符串流\nStream<String> strStream = numStream.map(String::valueOf);\n```\n\n<!--more-->\n\n## mapToInt mapToLong mapToDouble\n\n这三个方法是对`map`方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nIntStream intStream = stringStream.mapToInt(Integer::parseInt);\nLongStream longStream = stringStream.mapToLong(Long::parseLong);\nDoubleStream doubleStream = stringStream.mapToDouble(Double::parseDouble);\n```\n\n## flatMap\n\n`flatMap`方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法，如下：\n\n```java\nStream<Item> allItemStream = orderList.stream().flatMap(order -> order.itemList.stream());\n```\n\n## flatMapToInt flatMapToLong flatMapToDouble\n\n这三个方法是对`flatMap`方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上\n\n## distinct\n\n`distinct`方法用于对流中的元素去重，判断元素是否重复使用的是`equals`方法\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 0, 1, 2, 2, 3);\n//不重复的数字流，uniqueNumStream -> (-2, -1, 0, 1, 2, 3)\nStream<Integer> uniqueNumStream = numStream.distinct();\n```\n\n## sorted\n\n`sorted`有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现`Comparable`接口，不然会报`java.lang.ClassCastException`异常\n\n```java\nStream<Integer> unorderedStream = Stream.of(5, 6, 32, 7, 27, 4);\n//按从小到大排序完成的流，orderedStream -> (4, 5, 6, 7, 27, 32)\nStream<Integer> orderedStream = unorderedStream.sorted();\n```\n\n有参方法`sorted(Comparator<? super T> comparator)`不需要元素实现`Comparable`接口，通过指定的元素比较器对流内的元素进行排序\n\n```java\nStream<String> unorderedStream = Stream.of(\"1234\", \"123\", \"12\", \"12345\", \"123456\", \"1\");\n//按字符串长度从小到大排序完成的流，orderedStream -> (\"1\", \"12\", \"123\", \"1234\", \"12345\", \"123456\")\nStream<String> orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));\n```\n\n## peek\n\n`peek`方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为`Stream`使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现\n\n```java\nStream.of(\"one\", \"two\", \"three\", \"four\")\n     .filter(e -> e.length() > 3)\n     .peek(e -> System.out.println(\"Filtered value: \" + e))\n     .map(String::toUpperCase)\n     .peek(e -> System.out.println(\"Mapped value: \" + e))\n     .collect(Collectors.toList());\n     \n输出：\nFiltered value: three\nMapped value: THREE\nFiltered value: four\nMapped value: FOUR\n```\n\n## limit(long maxSize)\n\n`limit`方法会对流进行顺序截取，从第1个元素开始，保留最多`maxSize`个元素\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//截取前3个元素，subStringStream -> (\"-2\", \"-1\", \"0\")\nStream<String> subStringStream = stringStream.limit(3);\n```\n\n## skip(long n)\n\n`skip`方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//跳过前3个元素，subStringStream -> (\"1\", \"2\", \"3\")\nStream<String> subStringStream = stringStream.skip(3);\n```\n\n## forEach\n\n`forEach`方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//单线程遍历输出元素\nstringStream.forEach(System.out::println);\n//多线程遍历输出元素\nstringStream.parallel().forEach(System.out::println);\n```\n\n## forEachOrdered\n\n`forEachOrdered`方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过`parallel`方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\n//顺序遍历输出元素\nstringStream.forEachOrdered(System.out::println);\n//多线程遍历输出元素，下面这行跟上面的执行结果是一样的\n//stringStream.parallel().forEachOrdered(System.out::println);\n```\n\n## toArray\n\n`toArray`有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nObject[] objArray = stringStream.toArray();\n```\n\n有参方法`toArray(IntFunction<A[]> generator)`支持把流中的元素转换成指定类型的元素数组\n\n```java\nStream<String> stringStream = Stream.of(\"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\");\nString[] strArray = stringStream.toArray(String[]::new);\n```\n\n## reduce\n\n`reduce`有三个重载方法，作用是对流内元素做累进操作\n\n第一个`reduce(BinaryOperator<T> accumulator)`\n\n`accumulator` 为累进操作的具体计算\n\n单线程等下如下代码\n\n```java\nboolean foundAny = false;\nT result = null;\nfor (T element : this stream) {\n  if (!foundAny) {\n      foundAny = true;\n      result = element;\n  }\n  else\n      result = accumulator.apply(result, element);\n}\nreturn foundAny ? Optional.of(result) : Optional.empty();\n```\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//查找最小值\nOptional<Integer> min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));\n//输出 -2\nSystem.out.println(min.get());\n\n//过滤出大于5的元素流\nnumStream = Stream.of(-2, -1, 0, 1, 2, 3).filter(num -> num > 5);\n//查找最小值\nmin = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));\n//输出 Optional.empty\nSystem.out.println(min);\n```\n\n第二个`reduce(T identity, BinaryOperator<T> accumulator)`\n\n`identity` 为累进操作的初始值\n`accumulator` 同上\n\n单线程等价如下代码\n\n```java\nT result = identity;\nfor (T element : this stream)\n  result = accumulator.apply(result, element)\nreturn result;\n```\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//累加计算所有元素的和，sum=3\nint sum = numStream.reduce(0, Integer::sum);\n```\n\n第三个`reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)`\n\n`identity`和`accumulator`同上\n`combiner`用于多线程执行的情况下合并最终结果\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nint sum = numStream.parallel().reduce(0, (a, b) -> {\n    System.out.println(\"accumulator执行:\" + a + \" + \" + b);\n    return a + b;\n}, (a, b) -> {\n    System.out.println(\"combiner执行:\" + a + \" + \" + b);\n    return a + b;\n});\nSystem.out.println(\"最终结果：\"+sum);\n\n输出：\naccumulator执行:0 + -1\naccumulator执行:0 + 1\naccumulator执行:0 + 0\naccumulator执行:0 + 2\naccumulator执行:0 + -2\naccumulator执行:0 + 3\ncombiner执行:2 + 3\ncombiner执行:-1 + 0\ncombiner执行:1 + 5\ncombiner执行:-2 + -1\ncombiner执行:-3 + 6\n最终结果：3\n```\n\n## collect\n\n`collect`有两个重载方法，主要作用是把流中的元素作为集合转换成其他`Collection`的子类，其内部实现类似于前面的累进操作\n\n第一个`collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)`\n\n`supplier` 需要返回开始执行时的默认结果\n`accumulator` 用于累进计算用\n`combiner` 用于多线程合并结果\n\n单线程执行等价于如下代码\n\n```java\nR result = supplier.get();\nfor (T element : this stream)\n  accumulator.accept(result, element);\nreturn result;\n```\n\n第二个`collect(Collector<? super T, A, R> collector)`\n\n`collector`其实是对上面的方法参数的一个封装，内部执行逻辑是一样的，只不过JDK提供了一些默认的`Collector`实现\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nList<Integer> numList = numStream.collect(Collectors.toList());\nSet<Integer> numSet = numStream.collect(Collectors.toSet());\n```\n\n## min\n\n`min`方法用于计算流内元素的最小值\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> min = numStream.min(Integer::compareTo);\n```\n\n## max\n\n`min`方法用于计算流内元素的最大值\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> max = numStream.max(Integer::compareTo);\n```\n\n## count\n\n`count`方法用于统计流内元素的总个数\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//count=6\nlong count = numStream.count();\n```\n\n## anyMatch\n\n`anyMatch`方法用于匹配校验流内元素是否有符合指定条件的元素\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否包含正数，hasPositiveNum=true\nboolean hasPositiveNum = numStream.anyMatch(num -> num > 0);\n```\n\n## allMatch\n\n`allMatch`方法用于匹配校验流内元素是否所有元素都符合指定条件\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否全部是正数，allNumPositive=false\nboolean allNumPositive = numStream.allMatch(num -> num > 0);\n```\n\n## noneMatch\n\n`noneMatch`方法用于匹配校验流内元素是否都不符合指定条件\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//判断是否没有小于0的元素，noNegativeNum=false\nboolean noNegativeNum = numStream.noneMatch(num -> num < 0);\n```\n\n## findFirst\n\n`findFirst`方法用于获取第一个元素，如果流是空的，则返回Optional.empty\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\n//获取第一个元素，firstNum=-2\nOptional<Integer> firstNum = numStream.findFirst();\n```\n\n## findAny\n\n`findAny`方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素\n\n```java\nStream<Integer> numStream = Stream.of(-2, -1, 0, 1, 2, 3);\nOptional<Integer> anyNum = numStream.findAny();\n```","slug":"java/java8-stream","published":1,"updated":"2024-05-12T08:03:45.383Z","comments":1,"layout":"post","photos":[],"_id":"clw39umow00052rvfbk0i883s","content":"<h2 id=\"什么是Stream\"><a href=\"#什么是Stream\" class=\"headerlink\" title=\"什么是Stream\"></a>什么是Stream</h2><p><code>Stream</code>是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。</p>\n<h2 id=\"如何获得Stream实例\"><a href=\"#如何获得Stream实例\" class=\"headerlink\" title=\"如何获得Stream实例\"></a>如何获得Stream实例</h2><p><code>Stream</code>提供了静态构建方法，可以基于不同的参数创建返回Stream实例<br>使用<code>Collection</code>的子类实例调用<code>stream()</code>或者<code>parallelStream()</code>方法也可以得到Stream实例，两个方法的区别在于后续执行<code>Stream</code>其他方法的时候是单线程还是多线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//无限长的偶数流</span></span><br><span class=\"line\">Stream&lt;Integer&gt; evenNumStream = Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">Stream&lt;String&gt; strStream = strList.stream();</span><br><span class=\"line\">Stream&lt;String&gt; strParallelStream = strList.parallelStream();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p><code>filter</code>方法用于根据指定的条件做过滤，返回符合条件的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//获得只包含正数的流，positiveNumStream -&gt; (1，2，3)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; positiveNumStream = numStream.filter(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p><code>map</code>方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//转换成字符串流</span></span><br><span class=\"line\">Stream&lt;String&gt; strStream = numStream.map(String::valueOf);</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"mapToInt-mapToLong-mapToDouble\"><a href=\"#mapToInt-mapToLong-mapToDouble\" class=\"headerlink\" title=\"mapToInt mapToLong mapToDouble\"></a>mapToInt mapToLong mapToDouble</h2><p>这三个方法是对<code>map</code>方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">IntStream</span> <span class=\"variable\">intStream</span> <span class=\"operator\">=</span> stringStream.mapToInt(Integer::parseInt);</span><br><span class=\"line\"><span class=\"type\">LongStream</span> <span class=\"variable\">longStream</span> <span class=\"operator\">=</span> stringStream.mapToLong(Long::parseLong);</span><br><span class=\"line\"><span class=\"type\">DoubleStream</span> <span class=\"variable\">doubleStream</span> <span class=\"operator\">=</span> stringStream.mapToDouble(Double::parseDouble);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p><code>flatMap</code>方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Item&gt; allItemStream = orderList.stream().flatMap(order -&gt; order.itemList.stream());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"flatMapToInt-flatMapToLong-flatMapToDouble\"><a href=\"#flatMapToInt-flatMapToLong-flatMapToDouble\" class=\"headerlink\" title=\"flatMapToInt flatMapToLong flatMapToDouble\"></a>flatMapToInt flatMapToLong flatMapToDouble</h2><p>这三个方法是对<code>flatMap</code>方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上</p>\n<h2 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h2><p><code>distinct</code>方法用于对流中的元素去重，判断元素是否重复使用的是<code>equals</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//不重复的数字流，uniqueNumStream -&gt; (-2, -1, 0, 1, 2, 3)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; uniqueNumStream = numStream.distinct();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h2><p><code>sorted</code>有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现<code>Comparable</code>接口，不然会报<code>java.lang.ClassCastException</code>异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; unorderedStream = Stream.of(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//按从小到大排序完成的流，orderedStream -&gt; (4, 5, 6, 7, 27, 32)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; orderedStream = unorderedStream.sorted();</span><br></pre></td></tr></table></figure>\n\n<p>有参方法<code>sorted(Comparator&lt;? super T&gt; comparator)</code>不需要元素实现<code>Comparable</code>接口，通过指定的元素比较器对流内的元素进行排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; unorderedStream = Stream.of(<span class=\"string\">&quot;1234&quot;</span>, <span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//按字符串长度从小到大排序完成的流，orderedStream -&gt; (&quot;1&quot;, &quot;12&quot;, &quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;123456&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"peek\"><a href=\"#peek\" class=\"headerlink\" title=\"peek\"></a>peek</h2><p><code>peek</code>方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为<code>Stream</code>使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.of(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>, <span class=\"string\">&quot;four&quot;</span>)</span><br><span class=\"line\">     .filter(e -&gt; e.length() &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">     .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Filtered value: &quot;</span> + e))</span><br><span class=\"line\">     .map(String::toUpperCase)</span><br><span class=\"line\">     .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Mapped value: &quot;</span> + e))</span><br><span class=\"line\">     .collect(Collectors.toList());</span><br><span class=\"line\">     </span><br><span class=\"line\">输出：</span><br><span class=\"line\">Filtered value: three</span><br><span class=\"line\">Mapped value: THREE</span><br><span class=\"line\">Filtered value: four</span><br><span class=\"line\">Mapped value: FOUR</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"limit-long-maxSize\"><a href=\"#limit-long-maxSize\" class=\"headerlink\" title=\"limit(long maxSize)\"></a>limit(long maxSize)</h2><p><code>limit</code>方法会对流进行顺序截取，从第1个元素开始，保留最多<code>maxSize</code>个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//截取前3个元素，subStringStream -&gt; (&quot;-2&quot;, &quot;-1&quot;, &quot;0&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; subStringStream = stringStream.limit(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"skip-long-n\"><a href=\"#skip-long-n\" class=\"headerlink\" title=\"skip(long n)\"></a>skip(long n)</h2><p><code>skip</code>方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//跳过前3个元素，subStringStream -&gt; (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; subStringStream = stringStream.skip(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><p><code>forEach</code>方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//单线程遍历输出元素</span></span><br><span class=\"line\">stringStream.forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//多线程遍历输出元素</span></span><br><span class=\"line\">stringStream.parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEachOrdered\"><a href=\"#forEachOrdered\" class=\"headerlink\" title=\"forEachOrdered\"></a>forEachOrdered</h2><p><code>forEachOrdered</code>方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过<code>parallel</code>方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//顺序遍历输出元素</span></span><br><span class=\"line\">stringStream.forEachOrdered(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//多线程遍历输出元素，下面这行跟上面的执行结果是一样的</span></span><br><span class=\"line\"><span class=\"comment\">//stringStream.parallel().forEachOrdered(System.out::println);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a>toArray</h2><p><code>toArray</code>有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">Object[] objArray = stringStream.toArray();</span><br></pre></td></tr></table></figure>\n\n<p>有参方法<code>toArray(IntFunction&lt;A[]&gt; generator)</code>支持把流中的元素转换成指定类型的元素数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">String[] strArray = stringStream.toArray(String[]::<span class=\"keyword\">new</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p><code>reduce</code>有三个重载方法，作用是对流内元素做累进操作</p>\n<p>第一个<code>reduce(BinaryOperator&lt;T&gt; accumulator)</code></p>\n<p><code>accumulator</code> 为累进操作的具体计算</p>\n<p>单线程等下如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">foundAny</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!foundAny) &#123;</span><br><span class=\"line\">      foundAny = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      result = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = accumulator.apply(result, element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//查找最小值</span></span><br><span class=\"line\">Optional&lt;Integer&gt; min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class=\"line\"><span class=\"comment\">//输出 -2</span></span><br><span class=\"line\">System.out.println(min.get());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤出大于5的元素流</span></span><br><span class=\"line\">numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).filter(num -&gt; num &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//查找最小值</span></span><br><span class=\"line\">min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class=\"line\"><span class=\"comment\">//输出 Optional.empty</span></span><br><span class=\"line\">System.out.println(min);</span><br></pre></td></tr></table></figure>\n\n<p>第二个<code>reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></p>\n<p><code>identity</code> 为累进操作的初始值<br><code>accumulator</code> 同上</p>\n<p>单线程等价如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> identity;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream)</span><br><span class=\"line\">  result = accumulator.apply(result, element)</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//累加计算所有元素的和，sum=3</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numStream.reduce(<span class=\"number\">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>\n\n<p>第三个<code>reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code></p>\n<p><code>identity</code>和<code>accumulator</code>同上<br><code>combiner</code>用于多线程执行的情况下合并最终结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numStream.parallel().reduce(<span class=\"number\">0</span>, (a, b) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;accumulator执行:&quot;</span> + a + <span class=\"string\">&quot; + &quot;</span> + b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, (a, b) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;combiner执行:&quot;</span> + a + <span class=\"string\">&quot; + &quot;</span> + b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;最终结果：&quot;</span>+sum);</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + -<span class=\"number\">1</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">1</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">0</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">2</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + -<span class=\"number\">2</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">3</span></span><br><span class=\"line\">combiner执行:<span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">1</span> + <span class=\"number\">0</span></span><br><span class=\"line\">combiner执行:<span class=\"number\">1</span> + <span class=\"number\">5</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">2</span> + -<span class=\"number\">1</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">3</span> + <span class=\"number\">6</span></span><br><span class=\"line\">最终结果：<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h2><p><code>collect</code>有两个重载方法，主要作用是把流中的元素作为集合转换成其他<code>Collection</code>的子类，其内部实现类似于前面的累进操作</p>\n<p>第一个<code>collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R, ? super T&gt; accumulator, BiConsumer&lt;R, R&gt; combiner)</code></p>\n<p><code>supplier</code> 需要返回开始执行时的默认结果<br><code>accumulator</code> 用于累进计算用<br><code>combiner</code> 用于多线程合并结果</p>\n<p>单线程执行等价于如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">R</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> supplier.get();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream)</span><br><span class=\"line\">  accumulator.accept(result, element);</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n\n<p>第二个<code>collect(Collector&lt;? super T, A, R&gt; collector)</code></p>\n<p><code>collector</code>其实是对上面的方法参数的一个封装，内部执行逻辑是一样的，只不过JDK提供了一些默认的<code>Collector</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">List&lt;Integer&gt; numList = numStream.collect(Collectors.toList());</span><br><span class=\"line\">Set&lt;Integer&gt; numSet = numStream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min\"></a>min</h2><p><code>min</code>方法用于计算流内元素的最小值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; min = numStream.min(Integer::compareTo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max\"></a>max</h2><p><code>min</code>方法用于计算流内元素的最大值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; max = numStream.max(Integer::compareTo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a>count</h2><p><code>count</code>方法用于统计流内元素的总个数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//count=6</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> numStream.count();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"anyMatch\"><a href=\"#anyMatch\" class=\"headerlink\" title=\"anyMatch\"></a>anyMatch</h2><p><code>anyMatch</code>方法用于匹配校验流内元素是否有符合指定条件的元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否包含正数，hasPositiveNum=true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">hasPositiveNum</span> <span class=\"operator\">=</span> numStream.anyMatch(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allMatch\"><a href=\"#allMatch\" class=\"headerlink\" title=\"allMatch\"></a>allMatch</h2><p><code>allMatch</code>方法用于匹配校验流内元素是否所有元素都符合指定条件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否全部是正数，allNumPositive=false</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">allNumPositive</span> <span class=\"operator\">=</span> numStream.allMatch(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noneMatch\"><a href=\"#noneMatch\" class=\"headerlink\" title=\"noneMatch\"></a>noneMatch</h2><p><code>noneMatch</code>方法用于匹配校验流内元素是否都不符合指定条件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否没有小于0的元素，noNegativeNum=false</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">noNegativeNum</span> <span class=\"operator\">=</span> numStream.noneMatch(num -&gt; num &lt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findFirst\"><a href=\"#findFirst\" class=\"headerlink\" title=\"findFirst\"></a>findFirst</h2><p><code>findFirst</code>方法用于获取第一个元素，如果流是空的，则返回Optional.empty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取第一个元素，firstNum=-2</span></span><br><span class=\"line\">Optional&lt;Integer&gt; firstNum = numStream.findFirst();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findAny\"><a href=\"#findAny\" class=\"headerlink\" title=\"findAny\"></a>findAny</h2><p><code>findAny</code>方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; anyNum = numStream.findAny();</span><br></pre></td></tr></table></figure>","excerpt":"<h2 id=\"什么是Stream\"><a href=\"#什么是Stream\" class=\"headerlink\" title=\"什么是Stream\"></a>什么是Stream</h2><p><code>Stream</code>是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。</p>\n<h2 id=\"如何获得Stream实例\"><a href=\"#如何获得Stream实例\" class=\"headerlink\" title=\"如何获得Stream实例\"></a>如何获得Stream实例</h2><p><code>Stream</code>提供了静态构建方法，可以基于不同的参数创建返回Stream实例<br>使用<code>Collection</code>的子类实例调用<code>stream()</code>或者<code>parallelStream()</code>方法也可以得到Stream实例，两个方法的区别在于后续执行<code>Stream</code>其他方法的时候是单线程还是多线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//无限长的偶数流</span></span><br><span class=\"line\">Stream&lt;Integer&gt; evenNumStream = Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">Stream&lt;String&gt; strStream = strList.stream();</span><br><span class=\"line\">Stream&lt;String&gt; strParallelStream = strList.parallelStream();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p><code>filter</code>方法用于根据指定的条件做过滤，返回符合条件的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//获得只包含正数的流，positiveNumStream -&gt; (1，2，3)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; positiveNumStream = numStream.filter(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p><code>map</code>方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//转换成字符串流</span></span><br><span class=\"line\">Stream&lt;String&gt; strStream = numStream.map(String::valueOf);</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"mapToInt-mapToLong-mapToDouble\"><a href=\"#mapToInt-mapToLong-mapToDouble\" class=\"headerlink\" title=\"mapToInt mapToLong mapToDouble\"></a>mapToInt mapToLong mapToDouble</h2><p>这三个方法是对<code>map</code>方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">IntStream</span> <span class=\"variable\">intStream</span> <span class=\"operator\">=</span> stringStream.mapToInt(Integer::parseInt);</span><br><span class=\"line\"><span class=\"type\">LongStream</span> <span class=\"variable\">longStream</span> <span class=\"operator\">=</span> stringStream.mapToLong(Long::parseLong);</span><br><span class=\"line\"><span class=\"type\">DoubleStream</span> <span class=\"variable\">doubleStream</span> <span class=\"operator\">=</span> stringStream.mapToDouble(Double::parseDouble);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p><code>flatMap</code>方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Item&gt; allItemStream = orderList.stream().flatMap(order -&gt; order.itemList.stream());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"flatMapToInt-flatMapToLong-flatMapToDouble\"><a href=\"#flatMapToInt-flatMapToLong-flatMapToDouble\" class=\"headerlink\" title=\"flatMapToInt flatMapToLong flatMapToDouble\"></a>flatMapToInt flatMapToLong flatMapToDouble</h2><p>这三个方法是对<code>flatMap</code>方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上</p>\n<h2 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h2><p><code>distinct</code>方法用于对流中的元素去重，判断元素是否重复使用的是<code>equals</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//不重复的数字流，uniqueNumStream -&gt; (-2, -1, 0, 1, 2, 3)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; uniqueNumStream = numStream.distinct();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h2><p><code>sorted</code>有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现<code>Comparable</code>接口，不然会报<code>java.lang.ClassCastException</code>异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; unorderedStream = Stream.of(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//按从小到大排序完成的流，orderedStream -&gt; (4, 5, 6, 7, 27, 32)</span></span><br><span class=\"line\">Stream&lt;Integer&gt; orderedStream = unorderedStream.sorted();</span><br></pre></td></tr></table></figure>\n\n<p>有参方法<code>sorted(Comparator&lt;? super T&gt; comparator)</code>不需要元素实现<code>Comparable</code>接口，通过指定的元素比较器对流内的元素进行排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; unorderedStream = Stream.of(<span class=\"string\">&quot;1234&quot;</span>, <span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>, <span class=\"string\">&quot;123456&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//按字符串长度从小到大排序完成的流，orderedStream -&gt; (&quot;1&quot;, &quot;12&quot;, &quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;123456&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"peek\"><a href=\"#peek\" class=\"headerlink\" title=\"peek\"></a>peek</h2><p><code>peek</code>方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为<code>Stream</code>使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.of(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>, <span class=\"string\">&quot;four&quot;</span>)</span><br><span class=\"line\">     .filter(e -&gt; e.length() &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">     .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Filtered value: &quot;</span> + e))</span><br><span class=\"line\">     .map(String::toUpperCase)</span><br><span class=\"line\">     .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Mapped value: &quot;</span> + e))</span><br><span class=\"line\">     .collect(Collectors.toList());</span><br><span class=\"line\">     </span><br><span class=\"line\">输出：</span><br><span class=\"line\">Filtered value: three</span><br><span class=\"line\">Mapped value: THREE</span><br><span class=\"line\">Filtered value: four</span><br><span class=\"line\">Mapped value: FOUR</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"limit-long-maxSize\"><a href=\"#limit-long-maxSize\" class=\"headerlink\" title=\"limit(long maxSize)\"></a>limit(long maxSize)</h2><p><code>limit</code>方法会对流进行顺序截取，从第1个元素开始，保留最多<code>maxSize</code>个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//截取前3个元素，subStringStream -&gt; (&quot;-2&quot;, &quot;-1&quot;, &quot;0&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; subStringStream = stringStream.limit(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"skip-long-n\"><a href=\"#skip-long-n\" class=\"headerlink\" title=\"skip(long n)\"></a>skip(long n)</h2><p><code>skip</code>方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//跳过前3个元素，subStringStream -&gt; (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span></span><br><span class=\"line\">Stream&lt;String&gt; subStringStream = stringStream.skip(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><p><code>forEach</code>方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//单线程遍历输出元素</span></span><br><span class=\"line\">stringStream.forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//多线程遍历输出元素</span></span><br><span class=\"line\">stringStream.parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEachOrdered\"><a href=\"#forEachOrdered\" class=\"headerlink\" title=\"forEachOrdered\"></a>forEachOrdered</h2><p><code>forEachOrdered</code>方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过<code>parallel</code>方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//顺序遍历输出元素</span></span><br><span class=\"line\">stringStream.forEachOrdered(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//多线程遍历输出元素，下面这行跟上面的执行结果是一样的</span></span><br><span class=\"line\"><span class=\"comment\">//stringStream.parallel().forEachOrdered(System.out::println);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a>toArray</h2><p><code>toArray</code>有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">Object[] objArray = stringStream.toArray();</span><br></pre></td></tr></table></figure>\n\n<p>有参方法<code>toArray(IntFunction&lt;A[]&gt; generator)</code>支持把流中的元素转换成指定类型的元素数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;-2&quot;</span>, <span class=\"string\">&quot;-1&quot;</span>, <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">String[] strArray = stringStream.toArray(String[]::<span class=\"keyword\">new</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p><code>reduce</code>有三个重载方法，作用是对流内元素做累进操作</p>\n<p>第一个<code>reduce(BinaryOperator&lt;T&gt; accumulator)</code></p>\n<p><code>accumulator</code> 为累进操作的具体计算</p>\n<p>单线程等下如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">foundAny</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!foundAny) &#123;</span><br><span class=\"line\">      foundAny = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      result = element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = accumulator.apply(result, element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//查找最小值</span></span><br><span class=\"line\">Optional&lt;Integer&gt; min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class=\"line\"><span class=\"comment\">//输出 -2</span></span><br><span class=\"line\">System.out.println(min.get());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤出大于5的元素流</span></span><br><span class=\"line\">numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).filter(num -&gt; num &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//查找最小值</span></span><br><span class=\"line\">min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class=\"line\"><span class=\"comment\">//输出 Optional.empty</span></span><br><span class=\"line\">System.out.println(min);</span><br></pre></td></tr></table></figure>\n\n<p>第二个<code>reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></p>\n<p><code>identity</code> 为累进操作的初始值<br><code>accumulator</code> 同上</p>\n<p>单线程等价如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> identity;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream)</span><br><span class=\"line\">  result = accumulator.apply(result, element)</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//累加计算所有元素的和，sum=3</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numStream.reduce(<span class=\"number\">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>\n\n<p>第三个<code>reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code></p>\n<p><code>identity</code>和<code>accumulator</code>同上<br><code>combiner</code>用于多线程执行的情况下合并最终结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numStream.parallel().reduce(<span class=\"number\">0</span>, (a, b) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;accumulator执行:&quot;</span> + a + <span class=\"string\">&quot; + &quot;</span> + b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, (a, b) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;combiner执行:&quot;</span> + a + <span class=\"string\">&quot; + &quot;</span> + b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;最终结果：&quot;</span>+sum);</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + -<span class=\"number\">1</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">1</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">0</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">2</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + -<span class=\"number\">2</span></span><br><span class=\"line\">accumulator执行:<span class=\"number\">0</span> + <span class=\"number\">3</span></span><br><span class=\"line\">combiner执行:<span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">1</span> + <span class=\"number\">0</span></span><br><span class=\"line\">combiner执行:<span class=\"number\">1</span> + <span class=\"number\">5</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">2</span> + -<span class=\"number\">1</span></span><br><span class=\"line\">combiner执行:-<span class=\"number\">3</span> + <span class=\"number\">6</span></span><br><span class=\"line\">最终结果：<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h2><p><code>collect</code>有两个重载方法，主要作用是把流中的元素作为集合转换成其他<code>Collection</code>的子类，其内部实现类似于前面的累进操作</p>\n<p>第一个<code>collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R, ? super T&gt; accumulator, BiConsumer&lt;R, R&gt; combiner)</code></p>\n<p><code>supplier</code> 需要返回开始执行时的默认结果<br><code>accumulator</code> 用于累进计算用<br><code>combiner</code> 用于多线程合并结果</p>\n<p>单线程执行等价于如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">R</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> supplier.get();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (T element : <span class=\"built_in\">this</span> stream)</span><br><span class=\"line\">  accumulator.accept(result, element);</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n\n<p>第二个<code>collect(Collector&lt;? super T, A, R&gt; collector)</code></p>\n<p><code>collector</code>其实是对上面的方法参数的一个封装，内部执行逻辑是一样的，只不过JDK提供了一些默认的<code>Collector</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">List&lt;Integer&gt; numList = numStream.collect(Collectors.toList());</span><br><span class=\"line\">Set&lt;Integer&gt; numSet = numStream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min\"></a>min</h2><p><code>min</code>方法用于计算流内元素的最小值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; min = numStream.min(Integer::compareTo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max\"></a>max</h2><p><code>min</code>方法用于计算流内元素的最大值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; max = numStream.max(Integer::compareTo);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a>count</h2><p><code>count</code>方法用于统计流内元素的总个数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//count=6</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> numStream.count();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"anyMatch\"><a href=\"#anyMatch\" class=\"headerlink\" title=\"anyMatch\"></a>anyMatch</h2><p><code>anyMatch</code>方法用于匹配校验流内元素是否有符合指定条件的元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否包含正数，hasPositiveNum=true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">hasPositiveNum</span> <span class=\"operator\">=</span> numStream.anyMatch(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allMatch\"><a href=\"#allMatch\" class=\"headerlink\" title=\"allMatch\"></a>allMatch</h2><p><code>allMatch</code>方法用于匹配校验流内元素是否所有元素都符合指定条件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否全部是正数，allNumPositive=false</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">allNumPositive</span> <span class=\"operator\">=</span> numStream.allMatch(num -&gt; num &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noneMatch\"><a href=\"#noneMatch\" class=\"headerlink\" title=\"noneMatch\"></a>noneMatch</h2><p><code>noneMatch</code>方法用于匹配校验流内元素是否都不符合指定条件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否没有小于0的元素，noNegativeNum=false</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">noNegativeNum</span> <span class=\"operator\">=</span> numStream.noneMatch(num -&gt; num &lt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findFirst\"><a href=\"#findFirst\" class=\"headerlink\" title=\"findFirst\"></a>findFirst</h2><p><code>findFirst</code>方法用于获取第一个元素，如果流是空的，则返回Optional.empty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取第一个元素，firstNum=-2</span></span><br><span class=\"line\">Optional&lt;Integer&gt; firstNum = numStream.findFirst();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findAny\"><a href=\"#findAny\" class=\"headerlink\" title=\"findAny\"></a>findAny</h2><p><code>findAny</code>方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; numStream = Stream.of(-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; anyNum = numStream.findAny();</span><br></pre></td></tr></table></figure>"},{"title":"Docker构建多平台镜像","date":"2024-04-05T06:27:00.000Z","_content":"\n## 多平台镜像使用场景\n\n我们知道Docker镜像是支持多平台（不同的操作系统/架构）的，比如linux/amd64，linux/arm64，linux/riscv64等，当我们需要在不同平台使用容器运行我们的镜像的时候，通常可能会考虑分别编译各个平台的镜像文件，然后打上不同的tag用来区分平台，使用的时候也同样需要根据实际运行的平台在配置文件中选择不同的tag，这样就导致配置文件无法良好的共用，使用起来相当的不方便。\n\n多平台镜像就是解决此问题的一个方案，那么什么是多平台镜像呢？我们以MySQL的官方镜像为例（Docker Hub上的大多数Docker官方镜像都提供了多平台镜像）\n\n![1.png](https://imgs.doodl6.com/docker/build-multi-platform-image/1.png)\n\n可以看到，该镜像支持在linux/amd64和linux/arm64平台下运行，通过执行相同的命令`docker pull mysql:8.0`获取镜像，docker会自动根据manifest的描述找到并下载适合当前系统架构的镜像文件。\n\n如此，便可以在多个平台之间共用同一份配置文件，而无需多余的处理，是不是方便很多呢？\n\n---\n\n## 如何构建多平台镜像\n\n接下来介绍两种构建多平台镜像的方法\n\n### 方法一（推荐）\n\n此方法需要开启docker的containerd-snapshotter特性\n\n#### 开启containerd-snapshotter\n\n修改/etc/docker/daemon.json文件，添加\n```text\n\"features\": {\n  \"containerd-snapshotter\": true\n}\n```\n![2.png](https://imgs.doodl6.com/docker/build-multi-platform-image/2.png)\n\n重启docker服务\n\n**注意：开启该配置以后，会导致原来下载的镜像文件被隐藏，开启和关闭该配置情况下的镜像文件是隔离存储的（OrbStack下验证）**\n\n**OrbStack在设置里面的Docker功能页添加**\n\n**Docker Desktop也可以参考[https://docs.docker.com/desktop/containerd/](https://docs.docker.com/desktop/containerd/)**\n\n<!--more-->\n\n#### 查看当前构建工具支持的平台\n\n```shell\ndocker buildx inspect --bootstrap\n```\n![3.png](https://imgs.doodl6.com/docker/build-multi-platform-image/3.png)\n\n其中的Platforms就是当前支持编译构建的平台\n\n#### 编译多平台镜像\n\n编译指定的多平台镜像加载到本地，平台之间需使用逗号隔开\n\n```shell\ndocker buildx build --platform linux/amd64,linux/arm64 -t martindai/wechat-robot:1.0 --load .\n```\n**如果不想把镜像加载到本地，想要直接推送到仓库，修改`--load`为`--push`即可**\n\n查看镜像列表\n```shell\ndocker images\n```\n![4.png](https://imgs.doodl6.com/docker/build-multi-platform-image/4.png)\n\n这里你会发现，有两个镜像文件，其中第一个就是我们编译的多平台镜像，文件大小比较大，而第二个则是适用于当前平台的镜像文件。\n\n#### 推送到仓库（确保已经登录）\n```shell\ndocker push martindai/wechat-robot:1.0\n```\n![5.png](https://imgs.doodl6.com/docker/build-multi-platform-image/5.png)\n\n可以看到，我们的多平台镜像就完成了。\n\n### 方法二\n\n我们可以使用命令查看一下方法一编译出来的多平台镜像的manifest信息\n\n```shell\ndocker manifest inspect martindai/wechat-robot:1.0\n```\n![6.png](https://imgs.doodl6.com/docker/build-multi-platform-image/6.png)\n\n可以看到，本质上这个多平台镜像只是一个索引，并不包含实际的文件，实际背后就是适用于两个平台的独立的镜像文件，docker在使用该镜像的时候会解析该索引文件，然后选择拉取合适的实际的镜像文件，相当于对于使用者屏蔽了平台这一层的信息。\n\n方法一其实就是编译完多个平台的镜像以后，自动创建了一个索引，然后把各个平台的镜像做了一个关联。\n\n那么方法二就是要手动创建这个索引，镜像的关联完全由我们自己控制。\n\n下面开始操作\n\n#### **注意：此方法不能开启containerd-snapshotter特性**\n\n#### 交叉编译多平台镜像\n\n通过tag区分平台\n\n```shell\ndocker buildx build --platform linux/amd64 -t martindai/wechat-robot:1.1-amd64 .\ndocker buildx build --platform linux/arm64 -t martindai/wechat-robot:1.1-arm64 .\n```\n\n或通过镜像名区分平台\n\n```shell\ndocker buildx build --platform linux/amd64 -t martindai/wechat-robot-amd64:1.1 .\ndocker buildx build --platform linux/arm64 -t martindai/wechat-robot-arm64:1.1 .\n```\n\n**PS：下面操作基于tag区分平台**\n\n#### 推送到仓库\n\n手动关联的镜像必须要在仓库里面有才行，所以需要先把编译好的单平台镜像推送到仓库\n\n```shell\ndocker push martindai/wechat-robot:1.1-amd64\ndocker push martindai/wechat-robot:1.1-arm64\n```\n![7.png](https://imgs.doodl6.com/docker/build-multi-platform-image/7.png)\n\n#### 创建manifest关联镜像\n\n```shell\ndocker manifest create martindai/wechat-robot:1.1 martindai/wechat-robot:1.1-amd64 martindai/wechat-robot:1.1-arm64 --amend\n```\n\n#### 确认manifest的信息\n\n```shell\ndocker manifest inspect martindai/wechat-robot:1.1\n```\n![8.png](https://imgs.doodl6.com/docker/build-multi-platform-image/8.png)\n\n可以看到该manifest跟方法一的manifest是类似的（不是完全一样，类型其实是不一样的，只是效果类似），也是关联了两个平台镜像。\n\n如果需要修改manifest，可以使用如下命令\n\n```shell\ndocker manifest annotate --arch arm64 martindai/wechat-robot:1.1 martindai/wechat-robot-arm64:1.1\n```\n该命令表示，修改`martindai/wechat-robot:1.1`的manifest的`arm64`架构关联的镜像为`martindai/wechat-robot-arm64:1.1`\n\n当然也可以删除manifest，重新创建\n\n```shell\ndocker manifest rm martindai/wechat-robot:1.1\n```\n\n#### 推送manifest到仓库\n\n信息确认没问题以后，把创建的menifest推送到远程仓库\n\n```shell\ndocker manifest push martindai/wechat-robot:1.1\n```\n![9.png](https://imgs.doodl6.com/docker/build-multi-platform-image/9.png)\n\n可以看到仓库多了一个多平台镜像，并且关联的就是我们之前上传的两个单平台镜像。\n\n---\n\n## 总结\n\n方法一使用起来比较方便，也是个人比较推荐的，可以配置在稳定的测试/生产环境使用。\n\n方法二使用起来稍微会麻烦一点，但是会比较灵活，比较适合一些定制化/开发场景。\n\n两种方法都可以完成创建多平台镜像的工作，具体使用就看个人根据实际情况选择。\n","source":"_posts/docker/build-multi-platform-image.md","raw":"---\ntitle: Docker构建多平台镜像\ndate: 2024-04-05 14:27:00\ncategories: \n- Docker\n---\n\n## 多平台镜像使用场景\n\n我们知道Docker镜像是支持多平台（不同的操作系统/架构）的，比如linux/amd64，linux/arm64，linux/riscv64等，当我们需要在不同平台使用容器运行我们的镜像的时候，通常可能会考虑分别编译各个平台的镜像文件，然后打上不同的tag用来区分平台，使用的时候也同样需要根据实际运行的平台在配置文件中选择不同的tag，这样就导致配置文件无法良好的共用，使用起来相当的不方便。\n\n多平台镜像就是解决此问题的一个方案，那么什么是多平台镜像呢？我们以MySQL的官方镜像为例（Docker Hub上的大多数Docker官方镜像都提供了多平台镜像）\n\n![1.png](https://imgs.doodl6.com/docker/build-multi-platform-image/1.png)\n\n可以看到，该镜像支持在linux/amd64和linux/arm64平台下运行，通过执行相同的命令`docker pull mysql:8.0`获取镜像，docker会自动根据manifest的描述找到并下载适合当前系统架构的镜像文件。\n\n如此，便可以在多个平台之间共用同一份配置文件，而无需多余的处理，是不是方便很多呢？\n\n---\n\n## 如何构建多平台镜像\n\n接下来介绍两种构建多平台镜像的方法\n\n### 方法一（推荐）\n\n此方法需要开启docker的containerd-snapshotter特性\n\n#### 开启containerd-snapshotter\n\n修改/etc/docker/daemon.json文件，添加\n```text\n\"features\": {\n  \"containerd-snapshotter\": true\n}\n```\n![2.png](https://imgs.doodl6.com/docker/build-multi-platform-image/2.png)\n\n重启docker服务\n\n**注意：开启该配置以后，会导致原来下载的镜像文件被隐藏，开启和关闭该配置情况下的镜像文件是隔离存储的（OrbStack下验证）**\n\n**OrbStack在设置里面的Docker功能页添加**\n\n**Docker Desktop也可以参考[https://docs.docker.com/desktop/containerd/](https://docs.docker.com/desktop/containerd/)**\n\n<!--more-->\n\n#### 查看当前构建工具支持的平台\n\n```shell\ndocker buildx inspect --bootstrap\n```\n![3.png](https://imgs.doodl6.com/docker/build-multi-platform-image/3.png)\n\n其中的Platforms就是当前支持编译构建的平台\n\n#### 编译多平台镜像\n\n编译指定的多平台镜像加载到本地，平台之间需使用逗号隔开\n\n```shell\ndocker buildx build --platform linux/amd64,linux/arm64 -t martindai/wechat-robot:1.0 --load .\n```\n**如果不想把镜像加载到本地，想要直接推送到仓库，修改`--load`为`--push`即可**\n\n查看镜像列表\n```shell\ndocker images\n```\n![4.png](https://imgs.doodl6.com/docker/build-multi-platform-image/4.png)\n\n这里你会发现，有两个镜像文件，其中第一个就是我们编译的多平台镜像，文件大小比较大，而第二个则是适用于当前平台的镜像文件。\n\n#### 推送到仓库（确保已经登录）\n```shell\ndocker push martindai/wechat-robot:1.0\n```\n![5.png](https://imgs.doodl6.com/docker/build-multi-platform-image/5.png)\n\n可以看到，我们的多平台镜像就完成了。\n\n### 方法二\n\n我们可以使用命令查看一下方法一编译出来的多平台镜像的manifest信息\n\n```shell\ndocker manifest inspect martindai/wechat-robot:1.0\n```\n![6.png](https://imgs.doodl6.com/docker/build-multi-platform-image/6.png)\n\n可以看到，本质上这个多平台镜像只是一个索引，并不包含实际的文件，实际背后就是适用于两个平台的独立的镜像文件，docker在使用该镜像的时候会解析该索引文件，然后选择拉取合适的实际的镜像文件，相当于对于使用者屏蔽了平台这一层的信息。\n\n方法一其实就是编译完多个平台的镜像以后，自动创建了一个索引，然后把各个平台的镜像做了一个关联。\n\n那么方法二就是要手动创建这个索引，镜像的关联完全由我们自己控制。\n\n下面开始操作\n\n#### **注意：此方法不能开启containerd-snapshotter特性**\n\n#### 交叉编译多平台镜像\n\n通过tag区分平台\n\n```shell\ndocker buildx build --platform linux/amd64 -t martindai/wechat-robot:1.1-amd64 .\ndocker buildx build --platform linux/arm64 -t martindai/wechat-robot:1.1-arm64 .\n```\n\n或通过镜像名区分平台\n\n```shell\ndocker buildx build --platform linux/amd64 -t martindai/wechat-robot-amd64:1.1 .\ndocker buildx build --platform linux/arm64 -t martindai/wechat-robot-arm64:1.1 .\n```\n\n**PS：下面操作基于tag区分平台**\n\n#### 推送到仓库\n\n手动关联的镜像必须要在仓库里面有才行，所以需要先把编译好的单平台镜像推送到仓库\n\n```shell\ndocker push martindai/wechat-robot:1.1-amd64\ndocker push martindai/wechat-robot:1.1-arm64\n```\n![7.png](https://imgs.doodl6.com/docker/build-multi-platform-image/7.png)\n\n#### 创建manifest关联镜像\n\n```shell\ndocker manifest create martindai/wechat-robot:1.1 martindai/wechat-robot:1.1-amd64 martindai/wechat-robot:1.1-arm64 --amend\n```\n\n#### 确认manifest的信息\n\n```shell\ndocker manifest inspect martindai/wechat-robot:1.1\n```\n![8.png](https://imgs.doodl6.com/docker/build-multi-platform-image/8.png)\n\n可以看到该manifest跟方法一的manifest是类似的（不是完全一样，类型其实是不一样的，只是效果类似），也是关联了两个平台镜像。\n\n如果需要修改manifest，可以使用如下命令\n\n```shell\ndocker manifest annotate --arch arm64 martindai/wechat-robot:1.1 martindai/wechat-robot-arm64:1.1\n```\n该命令表示，修改`martindai/wechat-robot:1.1`的manifest的`arm64`架构关联的镜像为`martindai/wechat-robot-arm64:1.1`\n\n当然也可以删除manifest，重新创建\n\n```shell\ndocker manifest rm martindai/wechat-robot:1.1\n```\n\n#### 推送manifest到仓库\n\n信息确认没问题以后，把创建的menifest推送到远程仓库\n\n```shell\ndocker manifest push martindai/wechat-robot:1.1\n```\n![9.png](https://imgs.doodl6.com/docker/build-multi-platform-image/9.png)\n\n可以看到仓库多了一个多平台镜像，并且关联的就是我们之前上传的两个单平台镜像。\n\n---\n\n## 总结\n\n方法一使用起来比较方便，也是个人比较推荐的，可以配置在稳定的测试/生产环境使用。\n\n方法二使用起来稍微会麻烦一点，但是会比较灵活，比较适合一些定制化/开发场景。\n\n两种方法都可以完成创建多平台镜像的工作，具体使用就看个人根据实际情况选择。\n","slug":"docker/build-multi-platform-image","published":1,"updated":"2024-05-12T08:32:20.205Z","_id":"clw39umox00062rvfb6ijgrs6","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"多平台镜像使用场景\"><a href=\"#多平台镜像使用场景\" class=\"headerlink\" title=\"多平台镜像使用场景\"></a>多平台镜像使用场景</h2><p>我们知道Docker镜像是支持多平台（不同的操作系统&#x2F;架构）的，比如linux&#x2F;amd64，linux&#x2F;arm64，linux&#x2F;riscv64等，当我们需要在不同平台使用容器运行我们的镜像的时候，通常可能会考虑分别编译各个平台的镜像文件，然后打上不同的tag用来区分平台，使用的时候也同样需要根据实际运行的平台在配置文件中选择不同的tag，这样就导致配置文件无法良好的共用，使用起来相当的不方便。</p>\n<p>多平台镜像就是解决此问题的一个方案，那么什么是多平台镜像呢？我们以MySQL的官方镜像为例（Docker Hub上的大多数Docker官方镜像都提供了多平台镜像）</p>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/1.png\" alt=\"1.png\"></p>\n<p>可以看到，该镜像支持在linux&#x2F;amd64和linux&#x2F;arm64平台下运行，通过执行相同的命令<code>docker pull mysql:8.0</code>获取镜像，docker会自动根据manifest的描述找到并下载适合当前系统架构的镜像文件。</p>\n<p>如此，便可以在多个平台之间共用同一份配置文件，而无需多余的处理，是不是方便很多呢？</p>\n<hr>\n<h2 id=\"如何构建多平台镜像\"><a href=\"#如何构建多平台镜像\" class=\"headerlink\" title=\"如何构建多平台镜像\"></a>如何构建多平台镜像</h2><p>接下来介绍两种构建多平台镜像的方法</p>\n<h3 id=\"方法一（推荐）\"><a href=\"#方法一（推荐）\" class=\"headerlink\" title=\"方法一（推荐）\"></a>方法一（推荐）</h3><p>此方法需要开启docker的containerd-snapshotter特性</p>\n<h4 id=\"开启containerd-snapshotter\"><a href=\"#开启containerd-snapshotter\" class=\"headerlink\" title=\"开启containerd-snapshotter\"></a>开启containerd-snapshotter</h4><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.json文件，添加</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;features&quot;: &#123;</span><br><span class=\"line\">  &quot;containerd-snapshotter&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/2.png\" alt=\"2.png\"></p>\n<p>重启docker服务</p>\n<p><strong>注意：开启该配置以后，会导致原来下载的镜像文件被隐藏，开启和关闭该配置情况下的镜像文件是隔离存储的（OrbStack下验证）</strong></p>\n<p><strong>OrbStack在设置里面的Docker功能页添加</strong></p>\n<p><strong>Docker Desktop也可以参考<a href=\"https://docs.docker.com/desktop/containerd/\">https://docs.docker.com/desktop/containerd/</a></strong></p>\n<span id=\"more\"></span>\n\n<h4 id=\"查看当前构建工具支持的平台\"><a href=\"#查看当前构建工具支持的平台\" class=\"headerlink\" title=\"查看当前构建工具支持的平台\"></a>查看当前构建工具支持的平台</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx inspect --bootstrap</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/3.png\" alt=\"3.png\"></p>\n<p>其中的Platforms就是当前支持编译构建的平台</p>\n<h4 id=\"编译多平台镜像\"><a href=\"#编译多平台镜像\" class=\"headerlink\" title=\"编译多平台镜像\"></a>编译多平台镜像</h4><p>编译指定的多平台镜像加载到本地，平台之间需使用逗号隔开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64,linux/arm64 -t martindai/wechat-robot:1.0 --load .</span><br></pre></td></tr></table></figure>\n<p><strong>如果不想把镜像加载到本地，想要直接推送到仓库，修改<code>--load</code>为<code>--push</code>即可</strong></p>\n<p>查看镜像列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/4.png\" alt=\"4.png\"></p>\n<p>这里你会发现，有两个镜像文件，其中第一个就是我们编译的多平台镜像，文件大小比较大，而第二个则是适用于当前平台的镜像文件。</p>\n<h4 id=\"推送到仓库（确保已经登录）\"><a href=\"#推送到仓库（确保已经登录）\" class=\"headerlink\" title=\"推送到仓库（确保已经登录）\"></a>推送到仓库（确保已经登录）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push martindai/wechat-robot:1.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/5.png\" alt=\"5.png\"></p>\n<p>可以看到，我们的多平台镜像就完成了。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>我们可以使用命令查看一下方法一编译出来的多平台镜像的manifest信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest inspect martindai/wechat-robot:1.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/6.png\" alt=\"6.png\"></p>\n<p>可以看到，本质上这个多平台镜像只是一个索引，并不包含实际的文件，实际背后就是适用于两个平台的独立的镜像文件，docker在使用该镜像的时候会解析该索引文件，然后选择拉取合适的实际的镜像文件，相当于对于使用者屏蔽了平台这一层的信息。</p>\n<p>方法一其实就是编译完多个平台的镜像以后，自动创建了一个索引，然后把各个平台的镜像做了一个关联。</p>\n<p>那么方法二就是要手动创建这个索引，镜像的关联完全由我们自己控制。</p>\n<p>下面开始操作</p>\n<h4 id=\"注意：此方法不能开启containerd-snapshotter特性\"><a href=\"#注意：此方法不能开启containerd-snapshotter特性\" class=\"headerlink\" title=\"注意：此方法不能开启containerd-snapshotter特性\"></a><strong>注意：此方法不能开启containerd-snapshotter特性</strong></h4><h4 id=\"交叉编译多平台镜像\"><a href=\"#交叉编译多平台镜像\" class=\"headerlink\" title=\"交叉编译多平台镜像\"></a>交叉编译多平台镜像</h4><p>通过tag区分平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64 -t martindai/wechat-robot:1.1-amd64 .</span><br><span class=\"line\">docker buildx build --platform linux/arm64 -t martindai/wechat-robot:1.1-arm64 .</span><br></pre></td></tr></table></figure>\n\n<p>或通过镜像名区分平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64 -t martindai/wechat-robot-amd64:1.1 .</span><br><span class=\"line\">docker buildx build --platform linux/arm64 -t martindai/wechat-robot-arm64:1.1 .</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS：下面操作基于tag区分平台</strong></p>\n<h4 id=\"推送到仓库\"><a href=\"#推送到仓库\" class=\"headerlink\" title=\"推送到仓库\"></a>推送到仓库</h4><p>手动关联的镜像必须要在仓库里面有才行，所以需要先把编译好的单平台镜像推送到仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push martindai/wechat-robot:1.1-amd64</span><br><span class=\"line\">docker push martindai/wechat-robot:1.1-arm64</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/7.png\" alt=\"7.png\"></p>\n<h4 id=\"创建manifest关联镜像\"><a href=\"#创建manifest关联镜像\" class=\"headerlink\" title=\"创建manifest关联镜像\"></a>创建manifest关联镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest create martindai/wechat-robot:1.1 martindai/wechat-robot:1.1-amd64 martindai/wechat-robot:1.1-arm64 --amend</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"确认manifest的信息\"><a href=\"#确认manifest的信息\" class=\"headerlink\" title=\"确认manifest的信息\"></a>确认manifest的信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest inspect martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/8.png\" alt=\"8.png\"></p>\n<p>可以看到该manifest跟方法一的manifest是类似的（不是完全一样，类型其实是不一样的，只是效果类似），也是关联了两个平台镜像。</p>\n<p>如果需要修改manifest，可以使用如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest annotate --arch arm64 martindai/wechat-robot:1.1 martindai/wechat-robot-arm64:1.1</span><br></pre></td></tr></table></figure>\n<p>该命令表示，修改<code>martindai/wechat-robot:1.1</code>的manifest的<code>arm64</code>架构关联的镜像为<code>martindai/wechat-robot-arm64:1.1</code></p>\n<p>当然也可以删除manifest，重新创建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest rm martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送manifest到仓库\"><a href=\"#推送manifest到仓库\" class=\"headerlink\" title=\"推送manifest到仓库\"></a>推送manifest到仓库</h4><p>信息确认没问题以后，把创建的menifest推送到远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest push martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/9.png\" alt=\"9.png\"></p>\n<p>可以看到仓库多了一个多平台镜像，并且关联的就是我们之前上传的两个单平台镜像。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>方法一使用起来比较方便，也是个人比较推荐的，可以配置在稳定的测试&#x2F;生产环境使用。</p>\n<p>方法二使用起来稍微会麻烦一点，但是会比较灵活，比较适合一些定制化&#x2F;开发场景。</p>\n<p>两种方法都可以完成创建多平台镜像的工作，具体使用就看个人根据实际情况选择。</p>\n","excerpt":"<h2 id=\"多平台镜像使用场景\"><a href=\"#多平台镜像使用场景\" class=\"headerlink\" title=\"多平台镜像使用场景\"></a>多平台镜像使用场景</h2><p>我们知道Docker镜像是支持多平台（不同的操作系统&#x2F;架构）的，比如linux&#x2F;amd64，linux&#x2F;arm64，linux&#x2F;riscv64等，当我们需要在不同平台使用容器运行我们的镜像的时候，通常可能会考虑分别编译各个平台的镜像文件，然后打上不同的tag用来区分平台，使用的时候也同样需要根据实际运行的平台在配置文件中选择不同的tag，这样就导致配置文件无法良好的共用，使用起来相当的不方便。</p>\n<p>多平台镜像就是解决此问题的一个方案，那么什么是多平台镜像呢？我们以MySQL的官方镜像为例（Docker Hub上的大多数Docker官方镜像都提供了多平台镜像）</p>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/1.png\" alt=\"1.png\"></p>\n<p>可以看到，该镜像支持在linux&#x2F;amd64和linux&#x2F;arm64平台下运行，通过执行相同的命令<code>docker pull mysql:8.0</code>获取镜像，docker会自动根据manifest的描述找到并下载适合当前系统架构的镜像文件。</p>\n<p>如此，便可以在多个平台之间共用同一份配置文件，而无需多余的处理，是不是方便很多呢？</p>\n<hr>\n<h2 id=\"如何构建多平台镜像\"><a href=\"#如何构建多平台镜像\" class=\"headerlink\" title=\"如何构建多平台镜像\"></a>如何构建多平台镜像</h2><p>接下来介绍两种构建多平台镜像的方法</p>\n<h3 id=\"方法一（推荐）\"><a href=\"#方法一（推荐）\" class=\"headerlink\" title=\"方法一（推荐）\"></a>方法一（推荐）</h3><p>此方法需要开启docker的containerd-snapshotter特性</p>\n<h4 id=\"开启containerd-snapshotter\"><a href=\"#开启containerd-snapshotter\" class=\"headerlink\" title=\"开启containerd-snapshotter\"></a>开启containerd-snapshotter</h4><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.json文件，添加</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;features&quot;: &#123;</span><br><span class=\"line\">  &quot;containerd-snapshotter&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/2.png\" alt=\"2.png\"></p>\n<p>重启docker服务</p>\n<p><strong>注意：开启该配置以后，会导致原来下载的镜像文件被隐藏，开启和关闭该配置情况下的镜像文件是隔离存储的（OrbStack下验证）</strong></p>\n<p><strong>OrbStack在设置里面的Docker功能页添加</strong></p>\n<p><strong>Docker Desktop也可以参考<a href=\"https://docs.docker.com/desktop/containerd/\">https://docs.docker.com/desktop/containerd/</a></strong></p>","more":"<h4 id=\"查看当前构建工具支持的平台\"><a href=\"#查看当前构建工具支持的平台\" class=\"headerlink\" title=\"查看当前构建工具支持的平台\"></a>查看当前构建工具支持的平台</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx inspect --bootstrap</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/3.png\" alt=\"3.png\"></p>\n<p>其中的Platforms就是当前支持编译构建的平台</p>\n<h4 id=\"编译多平台镜像\"><a href=\"#编译多平台镜像\" class=\"headerlink\" title=\"编译多平台镜像\"></a>编译多平台镜像</h4><p>编译指定的多平台镜像加载到本地，平台之间需使用逗号隔开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64,linux/arm64 -t martindai/wechat-robot:1.0 --load .</span><br></pre></td></tr></table></figure>\n<p><strong>如果不想把镜像加载到本地，想要直接推送到仓库，修改<code>--load</code>为<code>--push</code>即可</strong></p>\n<p>查看镜像列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/4.png\" alt=\"4.png\"></p>\n<p>这里你会发现，有两个镜像文件，其中第一个就是我们编译的多平台镜像，文件大小比较大，而第二个则是适用于当前平台的镜像文件。</p>\n<h4 id=\"推送到仓库（确保已经登录）\"><a href=\"#推送到仓库（确保已经登录）\" class=\"headerlink\" title=\"推送到仓库（确保已经登录）\"></a>推送到仓库（确保已经登录）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push martindai/wechat-robot:1.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/5.png\" alt=\"5.png\"></p>\n<p>可以看到，我们的多平台镜像就完成了。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>我们可以使用命令查看一下方法一编译出来的多平台镜像的manifest信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest inspect martindai/wechat-robot:1.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/6.png\" alt=\"6.png\"></p>\n<p>可以看到，本质上这个多平台镜像只是一个索引，并不包含实际的文件，实际背后就是适用于两个平台的独立的镜像文件，docker在使用该镜像的时候会解析该索引文件，然后选择拉取合适的实际的镜像文件，相当于对于使用者屏蔽了平台这一层的信息。</p>\n<p>方法一其实就是编译完多个平台的镜像以后，自动创建了一个索引，然后把各个平台的镜像做了一个关联。</p>\n<p>那么方法二就是要手动创建这个索引，镜像的关联完全由我们自己控制。</p>\n<p>下面开始操作</p>\n<h4 id=\"注意：此方法不能开启containerd-snapshotter特性\"><a href=\"#注意：此方法不能开启containerd-snapshotter特性\" class=\"headerlink\" title=\"注意：此方法不能开启containerd-snapshotter特性\"></a><strong>注意：此方法不能开启containerd-snapshotter特性</strong></h4><h4 id=\"交叉编译多平台镜像\"><a href=\"#交叉编译多平台镜像\" class=\"headerlink\" title=\"交叉编译多平台镜像\"></a>交叉编译多平台镜像</h4><p>通过tag区分平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64 -t martindai/wechat-robot:1.1-amd64 .</span><br><span class=\"line\">docker buildx build --platform linux/arm64 -t martindai/wechat-robot:1.1-arm64 .</span><br></pre></td></tr></table></figure>\n\n<p>或通过镜像名区分平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64 -t martindai/wechat-robot-amd64:1.1 .</span><br><span class=\"line\">docker buildx build --platform linux/arm64 -t martindai/wechat-robot-arm64:1.1 .</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS：下面操作基于tag区分平台</strong></p>\n<h4 id=\"推送到仓库\"><a href=\"#推送到仓库\" class=\"headerlink\" title=\"推送到仓库\"></a>推送到仓库</h4><p>手动关联的镜像必须要在仓库里面有才行，所以需要先把编译好的单平台镜像推送到仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push martindai/wechat-robot:1.1-amd64</span><br><span class=\"line\">docker push martindai/wechat-robot:1.1-arm64</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/7.png\" alt=\"7.png\"></p>\n<h4 id=\"创建manifest关联镜像\"><a href=\"#创建manifest关联镜像\" class=\"headerlink\" title=\"创建manifest关联镜像\"></a>创建manifest关联镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest create martindai/wechat-robot:1.1 martindai/wechat-robot:1.1-amd64 martindai/wechat-robot:1.1-arm64 --amend</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"确认manifest的信息\"><a href=\"#确认manifest的信息\" class=\"headerlink\" title=\"确认manifest的信息\"></a>确认manifest的信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest inspect martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/8.png\" alt=\"8.png\"></p>\n<p>可以看到该manifest跟方法一的manifest是类似的（不是完全一样，类型其实是不一样的，只是效果类似），也是关联了两个平台镜像。</p>\n<p>如果需要修改manifest，可以使用如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest annotate --arch arm64 martindai/wechat-robot:1.1 martindai/wechat-robot-arm64:1.1</span><br></pre></td></tr></table></figure>\n<p>该命令表示，修改<code>martindai/wechat-robot:1.1</code>的manifest的<code>arm64</code>架构关联的镜像为<code>martindai/wechat-robot-arm64:1.1</code></p>\n<p>当然也可以删除manifest，重新创建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest rm martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送manifest到仓库\"><a href=\"#推送manifest到仓库\" class=\"headerlink\" title=\"推送manifest到仓库\"></a>推送manifest到仓库</h4><p>信息确认没问题以后，把创建的menifest推送到远程仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker manifest push martindai/wechat-robot:1.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgs.doodl6.com/docker/build-multi-platform-image/9.png\" alt=\"9.png\"></p>\n<p>可以看到仓库多了一个多平台镜像，并且关联的就是我们之前上传的两个单平台镜像。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>方法一使用起来比较方便，也是个人比较推荐的，可以配置在稳定的测试&#x2F;生产环境使用。</p>\n<p>方法二使用起来稍微会麻烦一点，但是会比较灵活，比较适合一些定制化&#x2F;开发场景。</p>\n<p>两种方法都可以完成创建多平台镜像的工作，具体使用就看个人根据实际情况选择。</p>"},{"title":"Docker学习笔记","date":"2021-01-17T02:50:00.000Z","_content":"\n## 学习背景 ##\n近些年，如果你是一名开发，那么`Docker`这个热门的技术名词你一定听说过，我也不例外，但是因为平时没接触过，所以一直都没动力去了解使用。最近在折腾自己维护在github上的项目的时候，发现项目所依赖的外部环境比较多，比如zookeeper、redis、elasticsearch等等，如果都安装一遍的话比较麻烦，而且因为是自己整理平时积累用的项目，对数据也没什么要求，只要有这样一个环境能保证项目运行起来就行了。第一时间想到的就是利用docker容器，这样自己不但可以顺便学习一下这个热门技术，还可以把搭建成果作为这个项目的一部分让有兴趣研究的项目关注者直接在接触到这个项目的时候可以快速把环境搭建起来，可谓是一举两得。\n\n有兴趣的朋友可以访问项目地址:[https://github.com/MartinDai/SpringBoot-Project][1]\n\n----------\n\n# 安装 Docker Desktop\n\n参考 [https://www.docker.com/get-started][2]，安装并启动后就可以使用下面的这些命令了\n\n# docker 命令\n\n## 查看docker版本\n\n`docker --version`\n\n查看当前docker版本，可以顺便验证docker是否安装成功且启动好了\n\n![1](https://imgs.doodl6.com/docker/docker-learn-note/1.png)\n\n## 查看帮助\n\n`docker --help`\n\n查看docker命令帮助，包含所有支持的操作命令使用规则及简介\n\n![2](https://imgs.doodl6.com/docker/docker-learn-note/2.png)\n\n还可以看某个指令的详细帮助,如：`docker images --help`，docker所有命令都可以在最后加上`--help`来查看该命令的使用帮助\n\n![3](https://imgs.doodl6.com/docker/docker-learn-note/3.png)\n\n<!--more-->\n\n## 拉取镜像\n\n`docker pull [OPTIONS] NAME[:TAG|@DIGEST]`\n\n下载镜像，如果没有指定镜像地址，默认从[官方的hub][3]下载指定的镜像，官方的hub提供了绝大多数热门的组件镜像，可以根据自己的需要进行搜索，这个网站有点类似github的模式，各个官方组件一般都会有比较详细的使用说明，比如Redis\n\n![4](https://imgs.doodl6.com/docker/docker-learn-note/4.png)\n\n可以使用`docker pull redis`下载最新版本的redis镜像\n\n![5](https://imgs.doodl6.com/docker/docker-learn-note/5.png)\n\n也可以指定下载的版本，如`docker pull redis:5.0.5`就可以下载5.0.5这个版本的镜像\n\n当然有一些组件没有发布在官方的hub上，比如elasticsearch和kibana,这两个镜像需要从docker.elastic.co这个地址下载,可以使用`docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.4`下载\n\n国内访问docker官方镜像有时候会超时，可以配置deamon.json使用国内的镜像\n```\n{ \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn/\",\"https://hub-mirror.c.163.com\",\"https://registry.docker-cn.com\"], \"insecure-registries\": [\"10.0.0.12:5000\"] }\n```\n\n## 查看镜像\n\n`docker images`\n\n查看当前已下载的镜像列表\n\n![6](https://imgs.doodl6.com/docker/docker-learn-note/6.png)\n\n## 删除镜像\n\n`docker rmi [OPTIONS] IMAGE [IMAGE...]`\n\n举例：`docker rmi my-image:1.0`，表示删除名为`my-image`，版本号为`1.0`的镜像\n\n## 使用镜像创建容器\n\n`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\n\n使用指定镜像创建一个新的容器并运行，例如我们想创建运行redis容器，则可以使用命令`docker run --name my-redis -p 6379:6379 -d redis`，其中`--name`是`docker run`提供的参数，后面紧跟着的`my-redis`是对应的值，表示启动以后容器的名称，如果不指定则会使用随机生成的一个字符串。`-p 6379:6379`表示把本机端口6379映射到容器的6379端口，`-d`表示后台运行，如果不指定则启动后会自动进入容器控制台，并且退出控制台的同时会关闭容器。\n\n## 容器查看\n\n`docker container ls [OPTIONS]`\n\n查看容器，可以通过`docker container ls`查看当前运行的容器，或者通过`docker container ls -a`查看所有创建的容器\n\n## 删除容器\n\n`docker container rm [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker container rm my-container1 my-container2`\n表示同时删除name为`my-container1`和`my-container2`的两个容器\n\n## 启动容器\n\n`docker start [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start my-container1`表示启动name为`my-container1`的容器\n\n## 容器执行命令\n\n`docker exec [OPTIONS] CONTAINER COMMAND [ARG...]`\n\n对指定的容器执行命令，我们可以通过执行`docker exec -it my-redis /bin/bash`进入我们刚刚启动的容器\n\n## 复制文件到容器\n\n`docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH`\n\n举例：`docker cp /Users/martin/Downloads/test.txt e4cf118af140:/var/lib/dev/`\n\n其中：\n`/Users/martin/Downloads/test.txt`为本地文件路径\n`e4cf118af140`为容器ID\n`/var/lib/dev/`为容器目录\n\n## 复制容器文件到本地\n\n`docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-`\n\n举例：`docker cp e4cf118af140:/var/lib/dev/test.txt /Users/martin/Downloads/`\n\n其中：\n`/Users/martin/Downloads/`为本地路径\n`e4cf118af140`为容器ID\n`/var/lib/dev/test.txt`为容器文件路径\n\n## 停止容器\n\n`docker stop [OPTIONS] CONTAINER [CONTAINER...]`\n\n停止容器，如果要停止上面启动的redis容器，则可以使用命令`docker stop my-redis`，指定了名字的好处立马就可以体现出来了，我们可以很精准的控制容器，而不需要去查询容器名称\n\n## 修改容器作为新镜像\n\n`docker commit [-m] [-a] CONTAINERID REPOSITORY[:TAG]`\n\n`-m` 类似代码提交时的comment信息\n`-a` 指定修改者信息\n`CONTAINERID` 用来创建镜像的容器ID\n`REPOSITORY[:TAG]` 目标镜像的仓库名和tag信息\n\n创建成功后会新镜像的ID\n\n举例：`docker commit -m \"add something\" -a \"Martin Dai\" e4cf118af140 my-image:latest`\n\n## 推送镜像到远程\n\n`docker push REPOSITORY[:TAG]`\n\n举例：`docker push my-image:latest`\n\n## 基于容器导出镜像\n\n`docker export [OPTIONS] CONTAINER`\n\n举例：`docker export -o my-image.tar my-container`，表示name为`my-container`的容器导出到`my-image.tar`文件\n\n## 导入镜像\n\n`docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]`\n\n举例：`docker import my-image.tar my-image:latest`，表示将`my-image.tar`导入为镜像，名为`my-image`，版本号为`latest`\n\n\n# docker-compose 命令\n\n有时候项目依赖的外部环境比较多，但是又不想一个一个启动各个容器怎么办呢，`docker-compose`就是用来解决这个问题的，该命令可以通过使用指定的yml同时启动多个容器。\n\n假如我们现在有个yml(具体yml规则可参考[官方文档][4])，且文件名为docker-compose.yml\n\n```yml\nversion: '3.7' #标识docker-compose的版本，不同版本所支持的配置项有些不一样\nservices: #服务（也就是各个容器）配置\n  redis: #服务名称，用于配置文件内关联使用\n    image: redis:5.0 #镜像版本\n    container_name: redis #容器名称\n    command: redis-server /etc/redis/redis.conf #启动后执行的命令\n    restart: always #启动失败是否重启\n    volumes: #路径扩展映射配置\n          - ./redis/:/etc/redis/ #把当前目录下的redis文件夹映射到容器中的/etc/redis文件夹，这样就可以在容器之外维护配置文件了\n    ports: #端口映射配置\n      - 6379:6379 #把本地的6379端口映射到容器的6379端口\n    networks: #网络配置\n      - net-cache\n  memcached:\n    image: memcached:1.5\n    container_name: memcached\n    restart: always\n    ports:\n      - 11211:11211\n    networks:\n      - net-cache\nnetworks:\n  net-cache:\n    driver: bridge #配置桥接网络\n```\n进入该文件所在的目录，然后执行`docker-compose up`就可以启动redis和memcached这两个容器，如果要使用其他文件名，则可以使用`-f`参数来指定文件名，如`docker-compose -f docker-compose-cache.yml up`，如果需要后台运行，则可以在最后加上`-d`。\n\n有启动就有停止，如果想要停止`docker-compose up`启动的容器，可以执行`docker-compose down`命令停止所有组合的容器。\n\n\n\n[1]: https://github.com/MartinDai/SpringBoot-Project\n[2]: https://www.docker.com/get-started\n[3]: https://hub.docker.com/\n[4]: https://docs.docker.com/compose/gettingstarted/","source":"_posts/docker/docker-learn-note.md","raw":"---\ntitle: Docker学习笔记\ndate: 2021-01-17 10:50:00\ncategories: \n- Docker\n---\n\n## 学习背景 ##\n近些年，如果你是一名开发，那么`Docker`这个热门的技术名词你一定听说过，我也不例外，但是因为平时没接触过，所以一直都没动力去了解使用。最近在折腾自己维护在github上的项目的时候，发现项目所依赖的外部环境比较多，比如zookeeper、redis、elasticsearch等等，如果都安装一遍的话比较麻烦，而且因为是自己整理平时积累用的项目，对数据也没什么要求，只要有这样一个环境能保证项目运行起来就行了。第一时间想到的就是利用docker容器，这样自己不但可以顺便学习一下这个热门技术，还可以把搭建成果作为这个项目的一部分让有兴趣研究的项目关注者直接在接触到这个项目的时候可以快速把环境搭建起来，可谓是一举两得。\n\n有兴趣的朋友可以访问项目地址:[https://github.com/MartinDai/SpringBoot-Project][1]\n\n----------\n\n# 安装 Docker Desktop\n\n参考 [https://www.docker.com/get-started][2]，安装并启动后就可以使用下面的这些命令了\n\n# docker 命令\n\n## 查看docker版本\n\n`docker --version`\n\n查看当前docker版本，可以顺便验证docker是否安装成功且启动好了\n\n![1](https://imgs.doodl6.com/docker/docker-learn-note/1.png)\n\n## 查看帮助\n\n`docker --help`\n\n查看docker命令帮助，包含所有支持的操作命令使用规则及简介\n\n![2](https://imgs.doodl6.com/docker/docker-learn-note/2.png)\n\n还可以看某个指令的详细帮助,如：`docker images --help`，docker所有命令都可以在最后加上`--help`来查看该命令的使用帮助\n\n![3](https://imgs.doodl6.com/docker/docker-learn-note/3.png)\n\n<!--more-->\n\n## 拉取镜像\n\n`docker pull [OPTIONS] NAME[:TAG|@DIGEST]`\n\n下载镜像，如果没有指定镜像地址，默认从[官方的hub][3]下载指定的镜像，官方的hub提供了绝大多数热门的组件镜像，可以根据自己的需要进行搜索，这个网站有点类似github的模式，各个官方组件一般都会有比较详细的使用说明，比如Redis\n\n![4](https://imgs.doodl6.com/docker/docker-learn-note/4.png)\n\n可以使用`docker pull redis`下载最新版本的redis镜像\n\n![5](https://imgs.doodl6.com/docker/docker-learn-note/5.png)\n\n也可以指定下载的版本，如`docker pull redis:5.0.5`就可以下载5.0.5这个版本的镜像\n\n当然有一些组件没有发布在官方的hub上，比如elasticsearch和kibana,这两个镜像需要从docker.elastic.co这个地址下载,可以使用`docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.4`下载\n\n国内访问docker官方镜像有时候会超时，可以配置deamon.json使用国内的镜像\n```\n{ \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn/\",\"https://hub-mirror.c.163.com\",\"https://registry.docker-cn.com\"], \"insecure-registries\": [\"10.0.0.12:5000\"] }\n```\n\n## 查看镜像\n\n`docker images`\n\n查看当前已下载的镜像列表\n\n![6](https://imgs.doodl6.com/docker/docker-learn-note/6.png)\n\n## 删除镜像\n\n`docker rmi [OPTIONS] IMAGE [IMAGE...]`\n\n举例：`docker rmi my-image:1.0`，表示删除名为`my-image`，版本号为`1.0`的镜像\n\n## 使用镜像创建容器\n\n`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\n\n使用指定镜像创建一个新的容器并运行，例如我们想创建运行redis容器，则可以使用命令`docker run --name my-redis -p 6379:6379 -d redis`，其中`--name`是`docker run`提供的参数，后面紧跟着的`my-redis`是对应的值，表示启动以后容器的名称，如果不指定则会使用随机生成的一个字符串。`-p 6379:6379`表示把本机端口6379映射到容器的6379端口，`-d`表示后台运行，如果不指定则启动后会自动进入容器控制台，并且退出控制台的同时会关闭容器。\n\n## 容器查看\n\n`docker container ls [OPTIONS]`\n\n查看容器，可以通过`docker container ls`查看当前运行的容器，或者通过`docker container ls -a`查看所有创建的容器\n\n## 删除容器\n\n`docker container rm [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker container rm my-container1 my-container2`\n表示同时删除name为`my-container1`和`my-container2`的两个容器\n\n## 启动容器\n\n`docker start [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start my-container1`表示启动name为`my-container1`的容器\n\n## 容器执行命令\n\n`docker exec [OPTIONS] CONTAINER COMMAND [ARG...]`\n\n对指定的容器执行命令，我们可以通过执行`docker exec -it my-redis /bin/bash`进入我们刚刚启动的容器\n\n## 复制文件到容器\n\n`docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH`\n\n举例：`docker cp /Users/martin/Downloads/test.txt e4cf118af140:/var/lib/dev/`\n\n其中：\n`/Users/martin/Downloads/test.txt`为本地文件路径\n`e4cf118af140`为容器ID\n`/var/lib/dev/`为容器目录\n\n## 复制容器文件到本地\n\n`docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-`\n\n举例：`docker cp e4cf118af140:/var/lib/dev/test.txt /Users/martin/Downloads/`\n\n其中：\n`/Users/martin/Downloads/`为本地路径\n`e4cf118af140`为容器ID\n`/var/lib/dev/test.txt`为容器文件路径\n\n## 停止容器\n\n`docker stop [OPTIONS] CONTAINER [CONTAINER...]`\n\n停止容器，如果要停止上面启动的redis容器，则可以使用命令`docker stop my-redis`，指定了名字的好处立马就可以体现出来了，我们可以很精准的控制容器，而不需要去查询容器名称\n\n## 修改容器作为新镜像\n\n`docker commit [-m] [-a] CONTAINERID REPOSITORY[:TAG]`\n\n`-m` 类似代码提交时的comment信息\n`-a` 指定修改者信息\n`CONTAINERID` 用来创建镜像的容器ID\n`REPOSITORY[:TAG]` 目标镜像的仓库名和tag信息\n\n创建成功后会新镜像的ID\n\n举例：`docker commit -m \"add something\" -a \"Martin Dai\" e4cf118af140 my-image:latest`\n\n## 推送镜像到远程\n\n`docker push REPOSITORY[:TAG]`\n\n举例：`docker push my-image:latest`\n\n## 基于容器导出镜像\n\n`docker export [OPTIONS] CONTAINER`\n\n举例：`docker export -o my-image.tar my-container`，表示name为`my-container`的容器导出到`my-image.tar`文件\n\n## 导入镜像\n\n`docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]`\n\n举例：`docker import my-image.tar my-image:latest`，表示将`my-image.tar`导入为镜像，名为`my-image`，版本号为`latest`\n\n\n# docker-compose 命令\n\n有时候项目依赖的外部环境比较多，但是又不想一个一个启动各个容器怎么办呢，`docker-compose`就是用来解决这个问题的，该命令可以通过使用指定的yml同时启动多个容器。\n\n假如我们现在有个yml(具体yml规则可参考[官方文档][4])，且文件名为docker-compose.yml\n\n```yml\nversion: '3.7' #标识docker-compose的版本，不同版本所支持的配置项有些不一样\nservices: #服务（也就是各个容器）配置\n  redis: #服务名称，用于配置文件内关联使用\n    image: redis:5.0 #镜像版本\n    container_name: redis #容器名称\n    command: redis-server /etc/redis/redis.conf #启动后执行的命令\n    restart: always #启动失败是否重启\n    volumes: #路径扩展映射配置\n          - ./redis/:/etc/redis/ #把当前目录下的redis文件夹映射到容器中的/etc/redis文件夹，这样就可以在容器之外维护配置文件了\n    ports: #端口映射配置\n      - 6379:6379 #把本地的6379端口映射到容器的6379端口\n    networks: #网络配置\n      - net-cache\n  memcached:\n    image: memcached:1.5\n    container_name: memcached\n    restart: always\n    ports:\n      - 11211:11211\n    networks:\n      - net-cache\nnetworks:\n  net-cache:\n    driver: bridge #配置桥接网络\n```\n进入该文件所在的目录，然后执行`docker-compose up`就可以启动redis和memcached这两个容器，如果要使用其他文件名，则可以使用`-f`参数来指定文件名，如`docker-compose -f docker-compose-cache.yml up`，如果需要后台运行，则可以在最后加上`-d`。\n\n有启动就有停止，如果想要停止`docker-compose up`启动的容器，可以执行`docker-compose down`命令停止所有组合的容器。\n\n\n\n[1]: https://github.com/MartinDai/SpringBoot-Project\n[2]: https://www.docker.com/get-started\n[3]: https://hub.docker.com/\n[4]: https://docs.docker.com/compose/gettingstarted/","slug":"docker/docker-learn-note","published":1,"updated":"2024-05-12T08:03:31.978Z","comments":1,"layout":"post","photos":[],"_id":"clw39umoy00082rvfhxu4aa0v","content":"<h2 id=\"学习背景\"><a href=\"#学习背景\" class=\"headerlink\" title=\"学习背景\"></a>学习背景</h2><p>近些年，如果你是一名开发，那么<code>Docker</code>这个热门的技术名词你一定听说过，我也不例外，但是因为平时没接触过，所以一直都没动力去了解使用。最近在折腾自己维护在github上的项目的时候，发现项目所依赖的外部环境比较多，比如zookeeper、redis、elasticsearch等等，如果都安装一遍的话比较麻烦，而且因为是自己整理平时积累用的项目，对数据也没什么要求，只要有这样一个环境能保证项目运行起来就行了。第一时间想到的就是利用docker容器，这样自己不但可以顺便学习一下这个热门技术，还可以把搭建成果作为这个项目的一部分让有兴趣研究的项目关注者直接在接触到这个项目的时候可以快速把环境搭建起来，可谓是一举两得。</p>\n<p>有兴趣的朋友可以访问项目地址:<a href=\"https://github.com/MartinDai/SpringBoot-Project\">https://github.com/MartinDai/SpringBoot-Project</a></p>\n<hr>\n<h1 id=\"安装-Docker-Desktop\"><a href=\"#安装-Docker-Desktop\" class=\"headerlink\" title=\"安装 Docker Desktop\"></a>安装 Docker Desktop</h1><p>参考 <a href=\"https://www.docker.com/get-started\">https://www.docker.com/get-started</a>，安装并启动后就可以使用下面的这些命令了</p>\n<h1 id=\"docker-命令\"><a href=\"#docker-命令\" class=\"headerlink\" title=\"docker 命令\"></a>docker 命令</h1><h2 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h2><p><code>docker --version</code></p>\n<p>查看当前docker版本，可以顺便验证docker是否安装成功且启动好了</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/1.png\" alt=\"1\"></p>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><p><code>docker --help</code></p>\n<p>查看docker命令帮助，包含所有支持的操作命令使用规则及简介</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/2.png\" alt=\"2\"></p>\n<p>还可以看某个指令的详细帮助,如：<code>docker images --help</code>，docker所有命令都可以在最后加上<code>--help</code>来查看该命令的使用帮助</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/3.png\" alt=\"3\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>\n<p>下载镜像，如果没有指定镜像地址，默认从<a href=\"https://hub.docker.com/\">官方的hub</a>下载指定的镜像，官方的hub提供了绝大多数热门的组件镜像，可以根据自己的需要进行搜索，这个网站有点类似github的模式，各个官方组件一般都会有比较详细的使用说明，比如Redis</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/4.png\" alt=\"4\"></p>\n<p>可以使用<code>docker pull redis</code>下载最新版本的redis镜像</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/5.png\" alt=\"5\"></p>\n<p>也可以指定下载的版本，如<code>docker pull redis:5.0.5</code>就可以下载5.0.5这个版本的镜像</p>\n<p>当然有一些组件没有发布在官方的hub上，比如elasticsearch和kibana,这两个镜像需要从docker.elastic.co这个地址下载,可以使用<code>docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.4</code>下载</p>\n<p>国内访问docker官方镜像有时候会超时，可以配置deamon.json使用国内的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;10.0.0.12:5000&quot;] &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p><code>docker images</code></p>\n<p>查看当前已下载的镜像列表</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/6.png\" alt=\"6\"></p>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p>\n<p>举例：<code>docker rmi my-image:1.0</code>，表示删除名为<code>my-image</code>，版本号为<code>1.0</code>的镜像</p>\n<h2 id=\"使用镜像创建容器\"><a href=\"#使用镜像创建容器\" class=\"headerlink\" title=\"使用镜像创建容器\"></a>使用镜像创建容器</h2><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>\n<p>使用指定镜像创建一个新的容器并运行，例如我们想创建运行redis容器，则可以使用命令<code>docker run --name my-redis -p 6379:6379 -d redis</code>，其中<code>--name</code>是<code>docker run</code>提供的参数，后面紧跟着的<code>my-redis</code>是对应的值，表示启动以后容器的名称，如果不指定则会使用随机生成的一个字符串。<code>-p 6379:6379</code>表示把本机端口6379映射到容器的6379端口，<code>-d</code>表示后台运行，如果不指定则启动后会自动进入容器控制台，并且退出控制台的同时会关闭容器。</p>\n<h2 id=\"容器查看\"><a href=\"#容器查看\" class=\"headerlink\" title=\"容器查看\"></a>容器查看</h2><p><code>docker container ls [OPTIONS]</code></p>\n<p>查看容器，可以通过<code>docker container ls</code>查看当前运行的容器，或者通过<code>docker container ls -a</code>查看所有创建的容器</p>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><p><code>docker container rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>举例：<code>docker container rm my-container1 my-container2</code><br>表示同时删除name为<code>my-container1</code>和<code>my-container2</code>的两个容器</p>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p><code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>举例：<code>docker start my-container1</code>表示启动name为<code>my-container1</code>的容器</p>\n<h2 id=\"容器执行命令\"><a href=\"#容器执行命令\" class=\"headerlink\" title=\"容器执行命令\"></a>容器执行命令</h2><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>\n<p>对指定的容器执行命令，我们可以通过执行<code>docker exec -it my-redis /bin/bash</code>进入我们刚刚启动的容器</p>\n<h2 id=\"复制文件到容器\"><a href=\"#复制文件到容器\" class=\"headerlink\" title=\"复制文件到容器\"></a>复制文件到容器</h2><p><code>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</code></p>\n<p>举例：<code>docker cp /Users/martin/Downloads/test.txt e4cf118af140:/var/lib/dev/</code></p>\n<p>其中：<br><code>/Users/martin/Downloads/test.txt</code>为本地文件路径<br><code>e4cf118af140</code>为容器ID<br><code>/var/lib/dev/</code>为容器目录</p>\n<h2 id=\"复制容器文件到本地\"><a href=\"#复制容器文件到本地\" class=\"headerlink\" title=\"复制容器文件到本地\"></a>复制容器文件到本地</h2><p><code>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</code></p>\n<p>举例：<code>docker cp e4cf118af140:/var/lib/dev/test.txt /Users/martin/Downloads/</code></p>\n<p>其中：<br><code>/Users/martin/Downloads/</code>为本地路径<br><code>e4cf118af140</code>为容器ID<br><code>/var/lib/dev/test.txt</code>为容器文件路径</p>\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p><code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>停止容器，如果要停止上面启动的redis容器，则可以使用命令<code>docker stop my-redis</code>，指定了名字的好处立马就可以体现出来了，我们可以很精准的控制容器，而不需要去查询容器名称</p>\n<h2 id=\"修改容器作为新镜像\"><a href=\"#修改容器作为新镜像\" class=\"headerlink\" title=\"修改容器作为新镜像\"></a>修改容器作为新镜像</h2><p><code>docker commit [-m] [-a] CONTAINERID REPOSITORY[:TAG]</code></p>\n<p><code>-m</code> 类似代码提交时的comment信息<br><code>-a</code> 指定修改者信息<br><code>CONTAINERID</code> 用来创建镜像的容器ID<br><code>REPOSITORY[:TAG]</code> 目标镜像的仓库名和tag信息</p>\n<p>创建成功后会新镜像的ID</p>\n<p>举例：<code>docker commit -m &quot;add something&quot; -a &quot;Martin Dai&quot; e4cf118af140 my-image:latest</code></p>\n<h2 id=\"推送镜像到远程\"><a href=\"#推送镜像到远程\" class=\"headerlink\" title=\"推送镜像到远程\"></a>推送镜像到远程</h2><p><code>docker push REPOSITORY[:TAG]</code></p>\n<p>举例：<code>docker push my-image:latest</code></p>\n<h2 id=\"基于容器导出镜像\"><a href=\"#基于容器导出镜像\" class=\"headerlink\" title=\"基于容器导出镜像\"></a>基于容器导出镜像</h2><p><code>docker export [OPTIONS] CONTAINER</code></p>\n<p>举例：<code>docker export -o my-image.tar my-container</code>，表示name为<code>my-container</code>的容器导出到<code>my-image.tar</code>文件</p>\n<h2 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h2><p><code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></p>\n<p>举例：<code>docker import my-image.tar my-image:latest</code>，表示将<code>my-image.tar</code>导入为镜像，名为<code>my-image</code>，版本号为<code>latest</code></p>\n<h1 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker-compose 命令\"></a>docker-compose 命令</h1><p>有时候项目依赖的外部环境比较多，但是又不想一个一个启动各个容器怎么办呢，<code>docker-compose</code>就是用来解决这个问题的，该命令可以通过使用指定的yml同时启动多个容器。</p>\n<p>假如我们现在有个yml(具体yml规则可参考<a href=\"https://docs.docker.com/compose/gettingstarted/\">官方文档</a>)，且文件名为docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.7&#x27;</span> <span class=\"comment\">#标识docker-compose的版本，不同版本所支持的配置项有些不一样</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> <span class=\"comment\">#服务（也就是各个容器）配置</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span> <span class=\"comment\">#服务名称，用于配置文件内关联使用</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:5.0</span> <span class=\"comment\">#镜像版本</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">redis</span> <span class=\"comment\">#容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span> <span class=\"string\">/etc/redis/redis.conf</span> <span class=\"comment\">#启动后执行的命令</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span> <span class=\"comment\">#启动失败是否重启</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span> <span class=\"comment\">#路径扩展映射配置</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">./redis/:/etc/redis/</span> <span class=\"comment\">#把当前目录下的redis文件夹映射到容器中的/etc/redis文件夹，这样就可以在容器之外维护配置文件了</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> <span class=\"comment\">#端口映射配置</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span> <span class=\"comment\">#把本地的6379端口映射到容器的6379端口</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span> <span class=\"comment\">#网络配置</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">net-cache</span></span><br><span class=\"line\">  <span class=\"attr\">memcached:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">memcached:1.5</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">11211</span><span class=\"string\">:11211</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">net-cache</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">net-cache:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span> <span class=\"comment\">#配置桥接网络</span></span><br></pre></td></tr></table></figure>\n<p>进入该文件所在的目录，然后执行<code>docker-compose up</code>就可以启动redis和memcached这两个容器，如果要使用其他文件名，则可以使用<code>-f</code>参数来指定文件名，如<code>docker-compose -f docker-compose-cache.yml up</code>，如果需要后台运行，则可以在最后加上<code>-d</code>。</p>\n<p>有启动就有停止，如果想要停止<code>docker-compose up</code>启动的容器，可以执行<code>docker-compose down</code>命令停止所有组合的容器。</p>\n","excerpt":"<h2 id=\"学习背景\"><a href=\"#学习背景\" class=\"headerlink\" title=\"学习背景\"></a>学习背景</h2><p>近些年，如果你是一名开发，那么<code>Docker</code>这个热门的技术名词你一定听说过，我也不例外，但是因为平时没接触过，所以一直都没动力去了解使用。最近在折腾自己维护在github上的项目的时候，发现项目所依赖的外部环境比较多，比如zookeeper、redis、elasticsearch等等，如果都安装一遍的话比较麻烦，而且因为是自己整理平时积累用的项目，对数据也没什么要求，只要有这样一个环境能保证项目运行起来就行了。第一时间想到的就是利用docker容器，这样自己不但可以顺便学习一下这个热门技术，还可以把搭建成果作为这个项目的一部分让有兴趣研究的项目关注者直接在接触到这个项目的时候可以快速把环境搭建起来，可谓是一举两得。</p>\n<p>有兴趣的朋友可以访问项目地址:<a href=\"https://github.com/MartinDai/SpringBoot-Project\">https://github.com/MartinDai/SpringBoot-Project</a></p>\n<hr>\n<h1 id=\"安装-Docker-Desktop\"><a href=\"#安装-Docker-Desktop\" class=\"headerlink\" title=\"安装 Docker Desktop\"></a>安装 Docker Desktop</h1><p>参考 <a href=\"https://www.docker.com/get-started\">https://www.docker.com/get-started</a>，安装并启动后就可以使用下面的这些命令了</p>\n<h1 id=\"docker-命令\"><a href=\"#docker-命令\" class=\"headerlink\" title=\"docker 命令\"></a>docker 命令</h1><h2 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h2><p><code>docker --version</code></p>\n<p>查看当前docker版本，可以顺便验证docker是否安装成功且启动好了</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/1.png\" alt=\"1\"></p>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><p><code>docker --help</code></p>\n<p>查看docker命令帮助，包含所有支持的操作命令使用规则及简介</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/2.png\" alt=\"2\"></p>\n<p>还可以看某个指令的详细帮助,如：<code>docker images --help</code>，docker所有命令都可以在最后加上<code>--help</code>来查看该命令的使用帮助</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/3.png\" alt=\"3\"></p>","more":"<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>\n<p>下载镜像，如果没有指定镜像地址，默认从<a href=\"https://hub.docker.com/\">官方的hub</a>下载指定的镜像，官方的hub提供了绝大多数热门的组件镜像，可以根据自己的需要进行搜索，这个网站有点类似github的模式，各个官方组件一般都会有比较详细的使用说明，比如Redis</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/4.png\" alt=\"4\"></p>\n<p>可以使用<code>docker pull redis</code>下载最新版本的redis镜像</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/5.png\" alt=\"5\"></p>\n<p>也可以指定下载的版本，如<code>docker pull redis:5.0.5</code>就可以下载5.0.5这个版本的镜像</p>\n<p>当然有一些组件没有发布在官方的hub上，比如elasticsearch和kibana,这两个镜像需要从docker.elastic.co这个地址下载,可以使用<code>docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.4</code>下载</p>\n<p>国内访问docker官方镜像有时候会超时，可以配置deamon.json使用国内的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;10.0.0.12:5000&quot;] &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p><code>docker images</code></p>\n<p>查看当前已下载的镜像列表</p>\n<p><img src=\"https://imgs.doodl6.com/docker/docker-learn-note/6.png\" alt=\"6\"></p>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p>\n<p>举例：<code>docker rmi my-image:1.0</code>，表示删除名为<code>my-image</code>，版本号为<code>1.0</code>的镜像</p>\n<h2 id=\"使用镜像创建容器\"><a href=\"#使用镜像创建容器\" class=\"headerlink\" title=\"使用镜像创建容器\"></a>使用镜像创建容器</h2><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>\n<p>使用指定镜像创建一个新的容器并运行，例如我们想创建运行redis容器，则可以使用命令<code>docker run --name my-redis -p 6379:6379 -d redis</code>，其中<code>--name</code>是<code>docker run</code>提供的参数，后面紧跟着的<code>my-redis</code>是对应的值，表示启动以后容器的名称，如果不指定则会使用随机生成的一个字符串。<code>-p 6379:6379</code>表示把本机端口6379映射到容器的6379端口，<code>-d</code>表示后台运行，如果不指定则启动后会自动进入容器控制台，并且退出控制台的同时会关闭容器。</p>\n<h2 id=\"容器查看\"><a href=\"#容器查看\" class=\"headerlink\" title=\"容器查看\"></a>容器查看</h2><p><code>docker container ls [OPTIONS]</code></p>\n<p>查看容器，可以通过<code>docker container ls</code>查看当前运行的容器，或者通过<code>docker container ls -a</code>查看所有创建的容器</p>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><p><code>docker container rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>举例：<code>docker container rm my-container1 my-container2</code><br>表示同时删除name为<code>my-container1</code>和<code>my-container2</code>的两个容器</p>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p><code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>举例：<code>docker start my-container1</code>表示启动name为<code>my-container1</code>的容器</p>\n<h2 id=\"容器执行命令\"><a href=\"#容器执行命令\" class=\"headerlink\" title=\"容器执行命令\"></a>容器执行命令</h2><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>\n<p>对指定的容器执行命令，我们可以通过执行<code>docker exec -it my-redis /bin/bash</code>进入我们刚刚启动的容器</p>\n<h2 id=\"复制文件到容器\"><a href=\"#复制文件到容器\" class=\"headerlink\" title=\"复制文件到容器\"></a>复制文件到容器</h2><p><code>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</code></p>\n<p>举例：<code>docker cp /Users/martin/Downloads/test.txt e4cf118af140:/var/lib/dev/</code></p>\n<p>其中：<br><code>/Users/martin/Downloads/test.txt</code>为本地文件路径<br><code>e4cf118af140</code>为容器ID<br><code>/var/lib/dev/</code>为容器目录</p>\n<h2 id=\"复制容器文件到本地\"><a href=\"#复制容器文件到本地\" class=\"headerlink\" title=\"复制容器文件到本地\"></a>复制容器文件到本地</h2><p><code>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</code></p>\n<p>举例：<code>docker cp e4cf118af140:/var/lib/dev/test.txt /Users/martin/Downloads/</code></p>\n<p>其中：<br><code>/Users/martin/Downloads/</code>为本地路径<br><code>e4cf118af140</code>为容器ID<br><code>/var/lib/dev/test.txt</code>为容器文件路径</p>\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p><code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<p>停止容器，如果要停止上面启动的redis容器，则可以使用命令<code>docker stop my-redis</code>，指定了名字的好处立马就可以体现出来了，我们可以很精准的控制容器，而不需要去查询容器名称</p>\n<h2 id=\"修改容器作为新镜像\"><a href=\"#修改容器作为新镜像\" class=\"headerlink\" title=\"修改容器作为新镜像\"></a>修改容器作为新镜像</h2><p><code>docker commit [-m] [-a] CONTAINERID REPOSITORY[:TAG]</code></p>\n<p><code>-m</code> 类似代码提交时的comment信息<br><code>-a</code> 指定修改者信息<br><code>CONTAINERID</code> 用来创建镜像的容器ID<br><code>REPOSITORY[:TAG]</code> 目标镜像的仓库名和tag信息</p>\n<p>创建成功后会新镜像的ID</p>\n<p>举例：<code>docker commit -m &quot;add something&quot; -a &quot;Martin Dai&quot; e4cf118af140 my-image:latest</code></p>\n<h2 id=\"推送镜像到远程\"><a href=\"#推送镜像到远程\" class=\"headerlink\" title=\"推送镜像到远程\"></a>推送镜像到远程</h2><p><code>docker push REPOSITORY[:TAG]</code></p>\n<p>举例：<code>docker push my-image:latest</code></p>\n<h2 id=\"基于容器导出镜像\"><a href=\"#基于容器导出镜像\" class=\"headerlink\" title=\"基于容器导出镜像\"></a>基于容器导出镜像</h2><p><code>docker export [OPTIONS] CONTAINER</code></p>\n<p>举例：<code>docker export -o my-image.tar my-container</code>，表示name为<code>my-container</code>的容器导出到<code>my-image.tar</code>文件</p>\n<h2 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h2><p><code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></p>\n<p>举例：<code>docker import my-image.tar my-image:latest</code>，表示将<code>my-image.tar</code>导入为镜像，名为<code>my-image</code>，版本号为<code>latest</code></p>\n<h1 id=\"docker-compose-命令\"><a href=\"#docker-compose-命令\" class=\"headerlink\" title=\"docker-compose 命令\"></a>docker-compose 命令</h1><p>有时候项目依赖的外部环境比较多，但是又不想一个一个启动各个容器怎么办呢，<code>docker-compose</code>就是用来解决这个问题的，该命令可以通过使用指定的yml同时启动多个容器。</p>\n<p>假如我们现在有个yml(具体yml规则可参考<a href=\"https://docs.docker.com/compose/gettingstarted/\">官方文档</a>)，且文件名为docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.7&#x27;</span> <span class=\"comment\">#标识docker-compose的版本，不同版本所支持的配置项有些不一样</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> <span class=\"comment\">#服务（也就是各个容器）配置</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span> <span class=\"comment\">#服务名称，用于配置文件内关联使用</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:5.0</span> <span class=\"comment\">#镜像版本</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">redis</span> <span class=\"comment\">#容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">redis-server</span> <span class=\"string\">/etc/redis/redis.conf</span> <span class=\"comment\">#启动后执行的命令</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span> <span class=\"comment\">#启动失败是否重启</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span> <span class=\"comment\">#路径扩展映射配置</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">./redis/:/etc/redis/</span> <span class=\"comment\">#把当前目录下的redis文件夹映射到容器中的/etc/redis文件夹，这样就可以在容器之外维护配置文件了</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> <span class=\"comment\">#端口映射配置</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span> <span class=\"comment\">#把本地的6379端口映射到容器的6379端口</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span> <span class=\"comment\">#网络配置</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">net-cache</span></span><br><span class=\"line\">  <span class=\"attr\">memcached:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">memcached:1.5</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">memcached</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">11211</span><span class=\"string\">:11211</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">net-cache</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">net-cache:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span> <span class=\"comment\">#配置桥接网络</span></span><br></pre></td></tr></table></figure>\n<p>进入该文件所在的目录，然后执行<code>docker-compose up</code>就可以启动redis和memcached这两个容器，如果要使用其他文件名，则可以使用<code>-f</code>参数来指定文件名，如<code>docker-compose -f docker-compose-cache.yml up</code>，如果需要后台运行，则可以在最后加上<code>-d</code>。</p>\n<p>有启动就有停止，如果想要停止<code>docker-compose up</code>启动的容器，可以执行<code>docker-compose down</code>命令停止所有组合的容器。</p>"},{"title":"Serverless部署应用并使用Cloudflare加速和支持HTTPS","date":"2023-05-22T14:16:00.000Z","_content":"\n![0](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/head.png)\n\n## Serverless\n\nServerless 是一种云计算模型，它使开发人员能够构建和运行应用程序，而无需关心底层的服务器基础设施。在传统的应用程序开发中，开发人员需要管理服务器的配置、扩展和维护等任务。而在 Serverless 模型中，这些任务都由云服务提供商来处理，开发人员只需专注于编写应用程序的业务逻辑。\n\nServerless 模型适用于许多应用场景，如 Web 应用程序、移动后端、数据处理和物联网等。常见的 Serverless 平台包括:\n国外：AWS Lambda、Azure Functions 和 Google Cloud Functions等\n国内：阿里云的[函数计算 FC](https://www.aliyun.com/product/fc)，腾讯云的[云函数](https://cloud.tencent.com/product/scf)等\n\n本文以**阿里云的函数计算FC**为例（阿里云每个月有免费的额度）\n\n## Cloudflare\n\n[Cloudflare](https://www.cloudflare-cn.com/) 是一家提供云计算和网络安全服务的公司。它提供了一系列的网络基础设施和安全功能，帮助网站和应用程序提供更快的加载速度、增强的安全性和高可靠性。\n\nCloudflare 的核心服务包括：CDN（内容分发网络），DDOS 保护，Web 应用程序防火墙（WAF），DNS服务，TLS 加密和边缘计算等。\n\n本文需要使用到其中的**DNS服务**和**TLS加密**服务\n\n## 应用准备\n\n首先要准备好应用的部署文件，云服务厂商一般支持通过文件上传和容器镜像的方式进行部署。\n如果是文件上传的方式部署，还需要选择运行环境，不同厂商支持的运行环境有所不同，需要提前了解好。\n而镜像的方式就比较简单，只需要提供打包好的镜像即可。\n所以个人推荐使用镜像的方式，这样可以拥有对运行环境完整的控制权，也方便版本管理。\n\n本文接下来也将以镜像方式部署举例，其中镜像为已开源的[一个微信聊天机器人](https://github.com/MartinDai/weChatRobot-go)项目\n\n<!--more-->\n\n## 上传镜像到服务商平台\n\n一般情况下需要把镜像文件上传到服务商平台以后才能进行版本管理和部署，或者通过服务商平台关联源码进行镜像打包，不同厂商可能有不同的策略，我这里选择的是在本地打包以后上传到平台的方式。\n\n阿里云需要先在【容器镜像服务】里面开通个人版，然后【创建镜像仓库】以后根据操作指南执行即可\n![1](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/1.png)\n\n上传完以后可以点击左侧的【镜像版本】查看镜像版本列表\n![2](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/2.png)\n\n## 创建云函数\n\n阿里云的云函数是挂在服务下的，所以需要先创建服务，然后再创建函数。\n创建函数的时候选择【使用容器镜像创建】，请求处理程序类型选择【处理 HTTP 请求】，容器镜像泽点击下面的【选择 ACR 中的镜像】找到选择自己上传的仓库版本即可\n![3](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/3.png)\n\n后面还有【监听端口】不要忘记配置，接下来就是一些资源和环境变量相关的配置，可以根据自己的需要选择配置\n![4](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/4.png)\n\n最后是触发器配置，特别是请求方法记得要把应用内所声明过的类型都配上\n![5](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/5.png)\n\n最后点击【创建】即可完成函数的创建\n\n## 验证云函数\n\n云函数创建成功以后，回到函数列表，点击函数名称即可查看详情\n![6](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/6.png)\n\n切换到【测试函数】功能项，通过配置请求方式和路径即可向函数发起请求，如果函数能够如预期内响应，则表示函数已经部署成功\n![7](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/7.png)\n\n再切换到【触发器管理（URL）】功能项，可以看到该函数已经拥有了一个外网可以访问的域名，通过该域名也可以验证函数部署是否成功，**需要注意的是，该域名如果通过浏览器访问，则所有返回内容都会通过下载的方式响应**，这主要是因为国内提供网页服务是需要备案的。\n![8](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/8.png)\n\n## 自定义域名\n\n完成上面的步骤以后，你就得到了一个可以通过后台提供服务的云函数了，像我这个微信机器人项目就是一个纯后台项目，所以是可以直接使用云函数提供的域名配置到微信公众号后台使用的。但是如果部署的是一个前台服务，那就必须要配置一个自定义的域名才能正常使用，下面就分别介绍一下自定义域名的两种情况。\n\n### 使用阿里云已经备案的域名\n\n如果你已经有一个在阿里云备案过的域名，那么可以在【函数计算 FC】功能首页找到【域名管理】功能\n![9](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/9.png)\n\n通过点击【添加自定义域名】，进入配置页面\n设置好自定义的域名并在域名解析控制台配置好相应的CNAME\n**HTTPS需要购买证书，或者手动上传（有的话可以选择）**\n**CDN加速是要单独收费的，所以这里选择禁用**\n最后设置路由配置到部署好的服务函数即可\n![10](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/10.png)\n\n### 没有已备案的域名\n\n如果没有在阿里云已经备案的域名，则可以考虑把函数部署在海外服务节点，细心的读者可能已经发现了，我就是用的这种方式，上面的服务函数其实是部署在新加坡的，通过海外的节点提供服务就不需要提供的域名是备案过的，添加步骤跟上面备案的域名是一样的，只是在创建的时候少了域名备案校验这一步\n\n配置完成以后，可以通过自定义域名访问验证函数资源\n\n## CDN加速和HTTPS\n\n前面我们在配置自定义域名的时候就发现**CDN加速**和**HTTPS**这两个都被设计为单独的收费项目了，但是我们可以使用Cloudflare免费使用这两项功能。\n\n登录Cloudflare，选择【添加站点】，输入自己的域名添加\n![11](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/11.png)\n\n计划选择最下面的Free\n![12](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/12.png)\n\n继续按照步骤，登录到域名的服务商，把对应的DNS服务器改为Cloudflare的DNS服务器地址\n还是以阿里云为例，在域名管理里面的【DNS管理】->【DNS修改】界面选择修改DNS服务器，两个都要改成Cloudflare的\n![13](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/13.png)\n\n完成以后在首页能看到添加的域名为有效即为设置成功\n![14](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/14.png)\n\n点击域名进入配置页面，选择左侧的【DNS】，把之前配置的云函数的CNAME在这里重新配置一遍\n\n![15](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/15.png)\n\n再点击左侧的【SSL/TLS】，勾选【完全】\n\n![16](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/16.png)\n\n至此，再次通过自定义域名访问验证，能够通过https访问并正常显示资源即表示成功\n\n![17](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/17.png)\n\n**PS：Cloudflare自带免费的CDN加速功能，还有其他免费的功能可以自行研究**\n","source":"_posts/other/serverless-with-cloudflare-support-https.md","raw":"---\ntitle: Serverless部署应用并使用Cloudflare加速和支持HTTPS\ndate: 2023-05-22 22:16:00\ncategories: \n- 其他\n---\n\n![0](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/head.png)\n\n## Serverless\n\nServerless 是一种云计算模型，它使开发人员能够构建和运行应用程序，而无需关心底层的服务器基础设施。在传统的应用程序开发中，开发人员需要管理服务器的配置、扩展和维护等任务。而在 Serverless 模型中，这些任务都由云服务提供商来处理，开发人员只需专注于编写应用程序的业务逻辑。\n\nServerless 模型适用于许多应用场景，如 Web 应用程序、移动后端、数据处理和物联网等。常见的 Serverless 平台包括:\n国外：AWS Lambda、Azure Functions 和 Google Cloud Functions等\n国内：阿里云的[函数计算 FC](https://www.aliyun.com/product/fc)，腾讯云的[云函数](https://cloud.tencent.com/product/scf)等\n\n本文以**阿里云的函数计算FC**为例（阿里云每个月有免费的额度）\n\n## Cloudflare\n\n[Cloudflare](https://www.cloudflare-cn.com/) 是一家提供云计算和网络安全服务的公司。它提供了一系列的网络基础设施和安全功能，帮助网站和应用程序提供更快的加载速度、增强的安全性和高可靠性。\n\nCloudflare 的核心服务包括：CDN（内容分发网络），DDOS 保护，Web 应用程序防火墙（WAF），DNS服务，TLS 加密和边缘计算等。\n\n本文需要使用到其中的**DNS服务**和**TLS加密**服务\n\n## 应用准备\n\n首先要准备好应用的部署文件，云服务厂商一般支持通过文件上传和容器镜像的方式进行部署。\n如果是文件上传的方式部署，还需要选择运行环境，不同厂商支持的运行环境有所不同，需要提前了解好。\n而镜像的方式就比较简单，只需要提供打包好的镜像即可。\n所以个人推荐使用镜像的方式，这样可以拥有对运行环境完整的控制权，也方便版本管理。\n\n本文接下来也将以镜像方式部署举例，其中镜像为已开源的[一个微信聊天机器人](https://github.com/MartinDai/weChatRobot-go)项目\n\n<!--more-->\n\n## 上传镜像到服务商平台\n\n一般情况下需要把镜像文件上传到服务商平台以后才能进行版本管理和部署，或者通过服务商平台关联源码进行镜像打包，不同厂商可能有不同的策略，我这里选择的是在本地打包以后上传到平台的方式。\n\n阿里云需要先在【容器镜像服务】里面开通个人版，然后【创建镜像仓库】以后根据操作指南执行即可\n![1](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/1.png)\n\n上传完以后可以点击左侧的【镜像版本】查看镜像版本列表\n![2](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/2.png)\n\n## 创建云函数\n\n阿里云的云函数是挂在服务下的，所以需要先创建服务，然后再创建函数。\n创建函数的时候选择【使用容器镜像创建】，请求处理程序类型选择【处理 HTTP 请求】，容器镜像泽点击下面的【选择 ACR 中的镜像】找到选择自己上传的仓库版本即可\n![3](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/3.png)\n\n后面还有【监听端口】不要忘记配置，接下来就是一些资源和环境变量相关的配置，可以根据自己的需要选择配置\n![4](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/4.png)\n\n最后是触发器配置，特别是请求方法记得要把应用内所声明过的类型都配上\n![5](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/5.png)\n\n最后点击【创建】即可完成函数的创建\n\n## 验证云函数\n\n云函数创建成功以后，回到函数列表，点击函数名称即可查看详情\n![6](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/6.png)\n\n切换到【测试函数】功能项，通过配置请求方式和路径即可向函数发起请求，如果函数能够如预期内响应，则表示函数已经部署成功\n![7](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/7.png)\n\n再切换到【触发器管理（URL）】功能项，可以看到该函数已经拥有了一个外网可以访问的域名，通过该域名也可以验证函数部署是否成功，**需要注意的是，该域名如果通过浏览器访问，则所有返回内容都会通过下载的方式响应**，这主要是因为国内提供网页服务是需要备案的。\n![8](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/8.png)\n\n## 自定义域名\n\n完成上面的步骤以后，你就得到了一个可以通过后台提供服务的云函数了，像我这个微信机器人项目就是一个纯后台项目，所以是可以直接使用云函数提供的域名配置到微信公众号后台使用的。但是如果部署的是一个前台服务，那就必须要配置一个自定义的域名才能正常使用，下面就分别介绍一下自定义域名的两种情况。\n\n### 使用阿里云已经备案的域名\n\n如果你已经有一个在阿里云备案过的域名，那么可以在【函数计算 FC】功能首页找到【域名管理】功能\n![9](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/9.png)\n\n通过点击【添加自定义域名】，进入配置页面\n设置好自定义的域名并在域名解析控制台配置好相应的CNAME\n**HTTPS需要购买证书，或者手动上传（有的话可以选择）**\n**CDN加速是要单独收费的，所以这里选择禁用**\n最后设置路由配置到部署好的服务函数即可\n![10](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/10.png)\n\n### 没有已备案的域名\n\n如果没有在阿里云已经备案的域名，则可以考虑把函数部署在海外服务节点，细心的读者可能已经发现了，我就是用的这种方式，上面的服务函数其实是部署在新加坡的，通过海外的节点提供服务就不需要提供的域名是备案过的，添加步骤跟上面备案的域名是一样的，只是在创建的时候少了域名备案校验这一步\n\n配置完成以后，可以通过自定义域名访问验证函数资源\n\n## CDN加速和HTTPS\n\n前面我们在配置自定义域名的时候就发现**CDN加速**和**HTTPS**这两个都被设计为单独的收费项目了，但是我们可以使用Cloudflare免费使用这两项功能。\n\n登录Cloudflare，选择【添加站点】，输入自己的域名添加\n![11](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/11.png)\n\n计划选择最下面的Free\n![12](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/12.png)\n\n继续按照步骤，登录到域名的服务商，把对应的DNS服务器改为Cloudflare的DNS服务器地址\n还是以阿里云为例，在域名管理里面的【DNS管理】->【DNS修改】界面选择修改DNS服务器，两个都要改成Cloudflare的\n![13](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/13.png)\n\n完成以后在首页能看到添加的域名为有效即为设置成功\n![14](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/14.png)\n\n点击域名进入配置页面，选择左侧的【DNS】，把之前配置的云函数的CNAME在这里重新配置一遍\n\n![15](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/15.png)\n\n再点击左侧的【SSL/TLS】，勾选【完全】\n\n![16](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/16.png)\n\n至此，再次通过自定义域名访问验证，能够通过https访问并正常显示资源即表示成功\n\n![17](https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/17.png)\n\n**PS：Cloudflare自带免费的CDN加速功能，还有其他免费的功能可以自行研究**\n","slug":"other/serverless-with-cloudflare-support-https","published":1,"updated":"2024-05-12T08:03:21.568Z","comments":1,"layout":"post","photos":[],"_id":"clw39umoz00092rvf0mmff6us","content":"<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/head.png\" alt=\"0\"></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>Serverless 是一种云计算模型，它使开发人员能够构建和运行应用程序，而无需关心底层的服务器基础设施。在传统的应用程序开发中，开发人员需要管理服务器的配置、扩展和维护等任务。而在 Serverless 模型中，这些任务都由云服务提供商来处理，开发人员只需专注于编写应用程序的业务逻辑。</p>\n<p>Serverless 模型适用于许多应用场景，如 Web 应用程序、移动后端、数据处理和物联网等。常见的 Serverless 平台包括:<br>国外：AWS Lambda、Azure Functions 和 Google Cloud Functions等<br>国内：阿里云的<a href=\"https://www.aliyun.com/product/fc\">函数计算 FC</a>，腾讯云的<a href=\"https://cloud.tencent.com/product/scf\">云函数</a>等</p>\n<p>本文以<strong>阿里云的函数计算FC</strong>为例（阿里云每个月有免费的额度）</p>\n<h2 id=\"Cloudflare\"><a href=\"#Cloudflare\" class=\"headerlink\" title=\"Cloudflare\"></a>Cloudflare</h2><p><a href=\"https://www.cloudflare-cn.com/\">Cloudflare</a> 是一家提供云计算和网络安全服务的公司。它提供了一系列的网络基础设施和安全功能，帮助网站和应用程序提供更快的加载速度、增强的安全性和高可靠性。</p>\n<p>Cloudflare 的核心服务包括：CDN（内容分发网络），DDOS 保护，Web 应用程序防火墙（WAF），DNS服务，TLS 加密和边缘计算等。</p>\n<p>本文需要使用到其中的<strong>DNS服务</strong>和<strong>TLS加密</strong>服务</p>\n<h2 id=\"应用准备\"><a href=\"#应用准备\" class=\"headerlink\" title=\"应用准备\"></a>应用准备</h2><p>首先要准备好应用的部署文件，云服务厂商一般支持通过文件上传和容器镜像的方式进行部署。<br>如果是文件上传的方式部署，还需要选择运行环境，不同厂商支持的运行环境有所不同，需要提前了解好。<br>而镜像的方式就比较简单，只需要提供打包好的镜像即可。<br>所以个人推荐使用镜像的方式，这样可以拥有对运行环境完整的控制权，也方便版本管理。</p>\n<p>本文接下来也将以镜像方式部署举例，其中镜像为已开源的<a href=\"https://github.com/MartinDai/weChatRobot-go\">一个微信聊天机器人</a>项目</p>\n<span id=\"more\"></span>\n\n<h2 id=\"上传镜像到服务商平台\"><a href=\"#上传镜像到服务商平台\" class=\"headerlink\" title=\"上传镜像到服务商平台\"></a>上传镜像到服务商平台</h2><p>一般情况下需要把镜像文件上传到服务商平台以后才能进行版本管理和部署，或者通过服务商平台关联源码进行镜像打包，不同厂商可能有不同的策略，我这里选择的是在本地打包以后上传到平台的方式。</p>\n<p>阿里云需要先在【容器镜像服务】里面开通个人版，然后【创建镜像仓库】以后根据操作指南执行即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/1.png\" alt=\"1\"></p>\n<p>上传完以后可以点击左侧的【镜像版本】查看镜像版本列表<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/2.png\" alt=\"2\"></p>\n<h2 id=\"创建云函数\"><a href=\"#创建云函数\" class=\"headerlink\" title=\"创建云函数\"></a>创建云函数</h2><p>阿里云的云函数是挂在服务下的，所以需要先创建服务，然后再创建函数。<br>创建函数的时候选择【使用容器镜像创建】，请求处理程序类型选择【处理 HTTP 请求】，容器镜像泽点击下面的【选择 ACR 中的镜像】找到选择自己上传的仓库版本即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/3.png\" alt=\"3\"></p>\n<p>后面还有【监听端口】不要忘记配置，接下来就是一些资源和环境变量相关的配置，可以根据自己的需要选择配置<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/4.png\" alt=\"4\"></p>\n<p>最后是触发器配置，特别是请求方法记得要把应用内所声明过的类型都配上<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/5.png\" alt=\"5\"></p>\n<p>最后点击【创建】即可完成函数的创建</p>\n<h2 id=\"验证云函数\"><a href=\"#验证云函数\" class=\"headerlink\" title=\"验证云函数\"></a>验证云函数</h2><p>云函数创建成功以后，回到函数列表，点击函数名称即可查看详情<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/6.png\" alt=\"6\"></p>\n<p>切换到【测试函数】功能项，通过配置请求方式和路径即可向函数发起请求，如果函数能够如预期内响应，则表示函数已经部署成功<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/7.png\" alt=\"7\"></p>\n<p>再切换到【触发器管理（URL）】功能项，可以看到该函数已经拥有了一个外网可以访问的域名，通过该域名也可以验证函数部署是否成功，<strong>需要注意的是，该域名如果通过浏览器访问，则所有返回内容都会通过下载的方式响应</strong>，这主要是因为国内提供网页服务是需要备案的。<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/8.png\" alt=\"8\"></p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>完成上面的步骤以后，你就得到了一个可以通过后台提供服务的云函数了，像我这个微信机器人项目就是一个纯后台项目，所以是可以直接使用云函数提供的域名配置到微信公众号后台使用的。但是如果部署的是一个前台服务，那就必须要配置一个自定义的域名才能正常使用，下面就分别介绍一下自定义域名的两种情况。</p>\n<h3 id=\"使用阿里云已经备案的域名\"><a href=\"#使用阿里云已经备案的域名\" class=\"headerlink\" title=\"使用阿里云已经备案的域名\"></a>使用阿里云已经备案的域名</h3><p>如果你已经有一个在阿里云备案过的域名，那么可以在【函数计算 FC】功能首页找到【域名管理】功能<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/9.png\" alt=\"9\"></p>\n<p>通过点击【添加自定义域名】，进入配置页面<br>设置好自定义的域名并在域名解析控制台配置好相应的CNAME<br><strong>HTTPS需要购买证书，或者手动上传（有的话可以选择）</strong><br><strong>CDN加速是要单独收费的，所以这里选择禁用</strong><br>最后设置路由配置到部署好的服务函数即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/10.png\" alt=\"10\"></p>\n<h3 id=\"没有已备案的域名\"><a href=\"#没有已备案的域名\" class=\"headerlink\" title=\"没有已备案的域名\"></a>没有已备案的域名</h3><p>如果没有在阿里云已经备案的域名，则可以考虑把函数部署在海外服务节点，细心的读者可能已经发现了，我就是用的这种方式，上面的服务函数其实是部署在新加坡的，通过海外的节点提供服务就不需要提供的域名是备案过的，添加步骤跟上面备案的域名是一样的，只是在创建的时候少了域名备案校验这一步</p>\n<p>配置完成以后，可以通过自定义域名访问验证函数资源</p>\n<h2 id=\"CDN加速和HTTPS\"><a href=\"#CDN加速和HTTPS\" class=\"headerlink\" title=\"CDN加速和HTTPS\"></a>CDN加速和HTTPS</h2><p>前面我们在配置自定义域名的时候就发现<strong>CDN加速</strong>和<strong>HTTPS</strong>这两个都被设计为单独的收费项目了，但是我们可以使用Cloudflare免费使用这两项功能。</p>\n<p>登录Cloudflare，选择【添加站点】，输入自己的域名添加<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/11.png\" alt=\"11\"></p>\n<p>计划选择最下面的Free<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/12.png\" alt=\"12\"></p>\n<p>继续按照步骤，登录到域名的服务商，把对应的DNS服务器改为Cloudflare的DNS服务器地址<br>还是以阿里云为例，在域名管理里面的【DNS管理】-&gt;【DNS修改】界面选择修改DNS服务器，两个都要改成Cloudflare的<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/13.png\" alt=\"13\"></p>\n<p>完成以后在首页能看到添加的域名为有效即为设置成功<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/14.png\" alt=\"14\"></p>\n<p>点击域名进入配置页面，选择左侧的【DNS】，把之前配置的云函数的CNAME在这里重新配置一遍</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/15.png\" alt=\"15\"></p>\n<p>再点击左侧的【SSL&#x2F;TLS】，勾选【完全】</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/16.png\" alt=\"16\"></p>\n<p>至此，再次通过自定义域名访问验证，能够通过https访问并正常显示资源即表示成功</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/17.png\" alt=\"17\"></p>\n<p><strong>PS：Cloudflare自带免费的CDN加速功能，还有其他免费的功能可以自行研究</strong></p>\n","excerpt":"<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/head.png\" alt=\"0\"></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>Serverless 是一种云计算模型，它使开发人员能够构建和运行应用程序，而无需关心底层的服务器基础设施。在传统的应用程序开发中，开发人员需要管理服务器的配置、扩展和维护等任务。而在 Serverless 模型中，这些任务都由云服务提供商来处理，开发人员只需专注于编写应用程序的业务逻辑。</p>\n<p>Serverless 模型适用于许多应用场景，如 Web 应用程序、移动后端、数据处理和物联网等。常见的 Serverless 平台包括:<br>国外：AWS Lambda、Azure Functions 和 Google Cloud Functions等<br>国内：阿里云的<a href=\"https://www.aliyun.com/product/fc\">函数计算 FC</a>，腾讯云的<a href=\"https://cloud.tencent.com/product/scf\">云函数</a>等</p>\n<p>本文以<strong>阿里云的函数计算FC</strong>为例（阿里云每个月有免费的额度）</p>\n<h2 id=\"Cloudflare\"><a href=\"#Cloudflare\" class=\"headerlink\" title=\"Cloudflare\"></a>Cloudflare</h2><p><a href=\"https://www.cloudflare-cn.com/\">Cloudflare</a> 是一家提供云计算和网络安全服务的公司。它提供了一系列的网络基础设施和安全功能，帮助网站和应用程序提供更快的加载速度、增强的安全性和高可靠性。</p>\n<p>Cloudflare 的核心服务包括：CDN（内容分发网络），DDOS 保护，Web 应用程序防火墙（WAF），DNS服务，TLS 加密和边缘计算等。</p>\n<p>本文需要使用到其中的<strong>DNS服务</strong>和<strong>TLS加密</strong>服务</p>\n<h2 id=\"应用准备\"><a href=\"#应用准备\" class=\"headerlink\" title=\"应用准备\"></a>应用准备</h2><p>首先要准备好应用的部署文件，云服务厂商一般支持通过文件上传和容器镜像的方式进行部署。<br>如果是文件上传的方式部署，还需要选择运行环境，不同厂商支持的运行环境有所不同，需要提前了解好。<br>而镜像的方式就比较简单，只需要提供打包好的镜像即可。<br>所以个人推荐使用镜像的方式，这样可以拥有对运行环境完整的控制权，也方便版本管理。</p>\n<p>本文接下来也将以镜像方式部署举例，其中镜像为已开源的<a href=\"https://github.com/MartinDai/weChatRobot-go\">一个微信聊天机器人</a>项目</p>","more":"<h2 id=\"上传镜像到服务商平台\"><a href=\"#上传镜像到服务商平台\" class=\"headerlink\" title=\"上传镜像到服务商平台\"></a>上传镜像到服务商平台</h2><p>一般情况下需要把镜像文件上传到服务商平台以后才能进行版本管理和部署，或者通过服务商平台关联源码进行镜像打包，不同厂商可能有不同的策略，我这里选择的是在本地打包以后上传到平台的方式。</p>\n<p>阿里云需要先在【容器镜像服务】里面开通个人版，然后【创建镜像仓库】以后根据操作指南执行即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/1.png\" alt=\"1\"></p>\n<p>上传完以后可以点击左侧的【镜像版本】查看镜像版本列表<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/2.png\" alt=\"2\"></p>\n<h2 id=\"创建云函数\"><a href=\"#创建云函数\" class=\"headerlink\" title=\"创建云函数\"></a>创建云函数</h2><p>阿里云的云函数是挂在服务下的，所以需要先创建服务，然后再创建函数。<br>创建函数的时候选择【使用容器镜像创建】，请求处理程序类型选择【处理 HTTP 请求】，容器镜像泽点击下面的【选择 ACR 中的镜像】找到选择自己上传的仓库版本即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/3.png\" alt=\"3\"></p>\n<p>后面还有【监听端口】不要忘记配置，接下来就是一些资源和环境变量相关的配置，可以根据自己的需要选择配置<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/4.png\" alt=\"4\"></p>\n<p>最后是触发器配置，特别是请求方法记得要把应用内所声明过的类型都配上<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/5.png\" alt=\"5\"></p>\n<p>最后点击【创建】即可完成函数的创建</p>\n<h2 id=\"验证云函数\"><a href=\"#验证云函数\" class=\"headerlink\" title=\"验证云函数\"></a>验证云函数</h2><p>云函数创建成功以后，回到函数列表，点击函数名称即可查看详情<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/6.png\" alt=\"6\"></p>\n<p>切换到【测试函数】功能项，通过配置请求方式和路径即可向函数发起请求，如果函数能够如预期内响应，则表示函数已经部署成功<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/7.png\" alt=\"7\"></p>\n<p>再切换到【触发器管理（URL）】功能项，可以看到该函数已经拥有了一个外网可以访问的域名，通过该域名也可以验证函数部署是否成功，<strong>需要注意的是，该域名如果通过浏览器访问，则所有返回内容都会通过下载的方式响应</strong>，这主要是因为国内提供网页服务是需要备案的。<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/8.png\" alt=\"8\"></p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>完成上面的步骤以后，你就得到了一个可以通过后台提供服务的云函数了，像我这个微信机器人项目就是一个纯后台项目，所以是可以直接使用云函数提供的域名配置到微信公众号后台使用的。但是如果部署的是一个前台服务，那就必须要配置一个自定义的域名才能正常使用，下面就分别介绍一下自定义域名的两种情况。</p>\n<h3 id=\"使用阿里云已经备案的域名\"><a href=\"#使用阿里云已经备案的域名\" class=\"headerlink\" title=\"使用阿里云已经备案的域名\"></a>使用阿里云已经备案的域名</h3><p>如果你已经有一个在阿里云备案过的域名，那么可以在【函数计算 FC】功能首页找到【域名管理】功能<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/9.png\" alt=\"9\"></p>\n<p>通过点击【添加自定义域名】，进入配置页面<br>设置好自定义的域名并在域名解析控制台配置好相应的CNAME<br><strong>HTTPS需要购买证书，或者手动上传（有的话可以选择）</strong><br><strong>CDN加速是要单独收费的，所以这里选择禁用</strong><br>最后设置路由配置到部署好的服务函数即可<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/10.png\" alt=\"10\"></p>\n<h3 id=\"没有已备案的域名\"><a href=\"#没有已备案的域名\" class=\"headerlink\" title=\"没有已备案的域名\"></a>没有已备案的域名</h3><p>如果没有在阿里云已经备案的域名，则可以考虑把函数部署在海外服务节点，细心的读者可能已经发现了，我就是用的这种方式，上面的服务函数其实是部署在新加坡的，通过海外的节点提供服务就不需要提供的域名是备案过的，添加步骤跟上面备案的域名是一样的，只是在创建的时候少了域名备案校验这一步</p>\n<p>配置完成以后，可以通过自定义域名访问验证函数资源</p>\n<h2 id=\"CDN加速和HTTPS\"><a href=\"#CDN加速和HTTPS\" class=\"headerlink\" title=\"CDN加速和HTTPS\"></a>CDN加速和HTTPS</h2><p>前面我们在配置自定义域名的时候就发现<strong>CDN加速</strong>和<strong>HTTPS</strong>这两个都被设计为单独的收费项目了，但是我们可以使用Cloudflare免费使用这两项功能。</p>\n<p>登录Cloudflare，选择【添加站点】，输入自己的域名添加<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/11.png\" alt=\"11\"></p>\n<p>计划选择最下面的Free<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/12.png\" alt=\"12\"></p>\n<p>继续按照步骤，登录到域名的服务商，把对应的DNS服务器改为Cloudflare的DNS服务器地址<br>还是以阿里云为例，在域名管理里面的【DNS管理】-&gt;【DNS修改】界面选择修改DNS服务器，两个都要改成Cloudflare的<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/13.png\" alt=\"13\"></p>\n<p>完成以后在首页能看到添加的域名为有效即为设置成功<br><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/14.png\" alt=\"14\"></p>\n<p>点击域名进入配置页面，选择左侧的【DNS】，把之前配置的云函数的CNAME在这里重新配置一遍</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/15.png\" alt=\"15\"></p>\n<p>再点击左侧的【SSL&#x2F;TLS】，勾选【完全】</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/16.png\" alt=\"16\"></p>\n<p>至此，再次通过自定义域名访问验证，能够通过https访问并正常显示资源即表示成功</p>\n<p><img src=\"https://imgs.doodl6.com/other/serverless-with-cloudflare-support-https/17.png\" alt=\"17\"></p>\n<p><strong>PS：Cloudflare自带免费的CDN加速功能，还有其他免费的功能可以自行研究</strong></p>"},{"title":"记一次堆外内存泄漏排查过程","date":"2021-05-24T13:28:00.000Z","_content":"\n**本文涉及以下内容**\n\n*   开启NMT查看JVM内存使用情况\n*   通过pmap命令查看进程物理内存使用情况\n*   smaps查看进程内存地址\n*   gdb命令dump内存块\n\n## 背景\n最近收到运维反馈，说有项目的一个节点的RSS已经是Xmx的两倍多了，因为是ECS机器所以项目可以一直运行，幸亏机器内存充足，不然就可能影响到其他应用了。\n\n## 排查问题\n通过跳板机登录到目标机器，执行top命令，再按c，看到对应的进程所占用的RES有8个多G（这里当时忘记截图了），但是实际上我们配置的Xmx只有3G，而且程序还是正常运行的，所以不会是堆占用了这么多，于是就把问题方向指向了非堆的内存。\n\n首先想到通过Arthas查看内存分布情况，执行dashboard命令，查看内存分布情况\n\n![1](https://imgs.doodl6.com/problem/record-once-no-heap-oom/1.png)\n\n发现堆和非堆的内存加起来也就2个G不到，但是这里看到的非堆只包含了code_cache和metaspace的部分，那有没有可能是其他非堆的部分有问题呢？\n\n<!--more-->\n\n### NMT\n\n> NMT是Native Memory Tracking的缩写，是Java7U40引入的HotSpot新特性，开启后可以通过jcmd命令来对JVM内存使用情况进行跟踪。注意，根据Java官方文档，开启NMT会有5%－10%的性能损耗。\n\n```\n-XX:NativeMemoryTracking=[off | summary | detail]  \n# off: 默认关闭 \n# summary: 只统计各个分类的内存使用情况.\n# detail: Collect memory usage by individual call sites.\n```\n\n添加`-XX:NativeMemoryTracking=detail`命令到启动参数中，然后重启项目\n\n跑了一段时间后top看了下进程的RES，发现已经5个多G了\n\n执行`jcmd <pid> VM.native_memory summary scale=MB`\n\n![2](https://imgs.doodl6.com/problem/record-once-no-heap-oom/2.png)\n\n从图中可以看到堆和非堆的总使用内存（committed）也就2G多，那还有3个G的内存去哪里了呢\n\n### pmap\n\n> pmap命令是Linux上用来开进程地址空间的\n\n执行`pmap -x <pid> | sort -n -k3 > pmap-sorted.txt`命令可以根据实际内存排序\n\n查看`pmap-sorted.txt`文件，发现有大量的64M内存块\n\n![3](https://imgs.doodl6.com/problem/record-once-no-heap-oom/3.png)\n\n难道是linux glibc 中经典的 64M 内存问题？之前看挖坑的张师傅写过一篇文章（[一次 Java 进程 OOM 的排查分析（glibc 篇）](https://club.perfma.com/article/1709425?last=1714757&type=parent)）讲过这个问题，于是准备参考一下排查思路\n\n尝试设置环境变量MALLOC_ARENA_MAX=1，重启项目，跑了一段时间以后，再次执行`pmap`命令查看内存情况，发现并没有什么变化，看来并不是这个原因，文章后面的步骤就没有什么参考意义了。\n\n### smaps + gdb\n\n既然可以看到有这么多异常的内存块，那有没有办法知道里面存的是什么内容呢，答案是肯定的。经过一番资料查阅，发现可以通过gdb的命令把指定地址范围的内存块dump出来。\n\n要执行gdb的dump需要先知道一个地址范围，通过smaps可以输出进程使用的内存块详细信息，包括地址范围和来源\n\n```\ncat /proc/<pid>/smaps > smaps.txt\n```\n\n查看smaps.txt，找到有问题的内存块地址，比如下图中的 7fb9b0000000-7fb9b3ffe000\n\n![4](https://imgs.doodl6.com/problem/record-once-no-heap-oom/4.png)\n\n启动gdb\n\n```\ngdb attach <pid>\n```\n\ndump指定内存地址到指定的目录下，参数的地址需要在smaps拿到地址前加上0x\n\n``` \ndump memory /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump 0x7fb9b0000000 0x7fb9b3ffe000\n```\n\n显示长度超过10字符的字符串\n\n```\nstrings -10 /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump\n```\n\n![5](https://imgs.doodl6.com/problem/record-once-no-heap-oom/5.png)\n\n发现里面有大量的图中红框中的内容，这个内容是后端给前端websocket推送的内容，怎么会驻留在堆外内存里面呢？检查了项目代码发现，后端的websocket是使用的netty-socketio实现的，maven依赖为\n\n```\n<dependency>\n <groupId>com.corundumstudio.socketio</groupId>\n <artifactId>netty-socketio</artifactId>\n <version>1.7.12</version>\n</dependency>\n```\n\n这是一个开源的socket.io的一个java实现框架，具体可以看\n\n[https://github.com/mrniko/netty-socketio](https://github.com/mrniko/netty-socketio)\n\n看了下最近的版本发布日志，发现这个框架的最新版本已经是1.7.18，而且中间发布的几个版本多次修复了内存泄漏相关的问题\n\n![6](https://imgs.doodl6.com/problem/record-once-no-heap-oom/6.png)\n\n于是把依赖版本升级到最新版，重新发布后，第二天在看，发现RES还是变得很高\n\n中间又仔细看了使用框架的相关代码，发现断开连接的时候没有调用leaveRoom方法，而是调用了joinRoom，导致群发信息的时候还会往断开的连接里面发送数据（理论上会报错，但是没有看到过相关日志），修复代码后又重新发布了一版，跑了一天在看，依然没有效果。\n\n## 结论\n\n到这一步可以确认的是内存泄漏的问题肯定跟这个websocket及相关功能有关的（因为中间升级到1.7.18发现websocket连不上了，后来降到了1.7.17，期间有较长的时间是没有暴露websocket服务的，而正好这段时间的RES是非常稳定的，完全没有上涨的趋势，因为这个功能点比较小，用户没有什么感知），最后，经过跟产品方面沟通，决定把这里的websocet去掉，改为前端直接请求接口获取数据，因为这里的功能就是为了实时推送一个未读信息数量，而这个信息其实很少有用户关心，所以，就改成刷新页面的时候查询一下就行了，就这样，问题算是变相解决了😁。至于这个问题的具体原因还是没有找到，可能是框架BUG，也可能是代码使用问题，后面需要重度依赖websocket的时候或许会基于netty自己写一套，这样比较可控一点。\n\n## 总结\n\n虽然经过这么多的努力，最终只是证明了【没有需求就没有BUG】这句话，但是中间还是有挺多的收获的，很多命令也是第一次使用，中间还有一些曲折，就没有一一写出来了，挑选了一些比较有价值的过程写了这篇文章总结，希望可以分享给有需要的人，以后遇到类似问题，可以做个经验参考。\n\n## 感谢\n\n这次排查问题从网上查找学习了很多资料，非常感谢以下文章作者分享的经验\n\n- [一次 Java 进程 OOM 的排查分析（glibc 篇）](https://club.perfma.com/article/1709425?last=1714757&type=parent)\n- [JAVA堆外内存排查小结](https://zhuanlan.zhihu.com/p/60976273)\n- [Linux中使用gdb dump内存](https://blog.csdn.net/qq_36119192/article/details/96474833)","source":"_posts/problem/record-once-no-heap-oom.md","raw":"---\ntitle: 记一次堆外内存泄漏排查过程\ndate: 2021-05-24 21:28:00\ncategories: \n- 问题排查\n---\n\n**本文涉及以下内容**\n\n*   开启NMT查看JVM内存使用情况\n*   通过pmap命令查看进程物理内存使用情况\n*   smaps查看进程内存地址\n*   gdb命令dump内存块\n\n## 背景\n最近收到运维反馈，说有项目的一个节点的RSS已经是Xmx的两倍多了，因为是ECS机器所以项目可以一直运行，幸亏机器内存充足，不然就可能影响到其他应用了。\n\n## 排查问题\n通过跳板机登录到目标机器，执行top命令，再按c，看到对应的进程所占用的RES有8个多G（这里当时忘记截图了），但是实际上我们配置的Xmx只有3G，而且程序还是正常运行的，所以不会是堆占用了这么多，于是就把问题方向指向了非堆的内存。\n\n首先想到通过Arthas查看内存分布情况，执行dashboard命令，查看内存分布情况\n\n![1](https://imgs.doodl6.com/problem/record-once-no-heap-oom/1.png)\n\n发现堆和非堆的内存加起来也就2个G不到，但是这里看到的非堆只包含了code_cache和metaspace的部分，那有没有可能是其他非堆的部分有问题呢？\n\n<!--more-->\n\n### NMT\n\n> NMT是Native Memory Tracking的缩写，是Java7U40引入的HotSpot新特性，开启后可以通过jcmd命令来对JVM内存使用情况进行跟踪。注意，根据Java官方文档，开启NMT会有5%－10%的性能损耗。\n\n```\n-XX:NativeMemoryTracking=[off | summary | detail]  \n# off: 默认关闭 \n# summary: 只统计各个分类的内存使用情况.\n# detail: Collect memory usage by individual call sites.\n```\n\n添加`-XX:NativeMemoryTracking=detail`命令到启动参数中，然后重启项目\n\n跑了一段时间后top看了下进程的RES，发现已经5个多G了\n\n执行`jcmd <pid> VM.native_memory summary scale=MB`\n\n![2](https://imgs.doodl6.com/problem/record-once-no-heap-oom/2.png)\n\n从图中可以看到堆和非堆的总使用内存（committed）也就2G多，那还有3个G的内存去哪里了呢\n\n### pmap\n\n> pmap命令是Linux上用来开进程地址空间的\n\n执行`pmap -x <pid> | sort -n -k3 > pmap-sorted.txt`命令可以根据实际内存排序\n\n查看`pmap-sorted.txt`文件，发现有大量的64M内存块\n\n![3](https://imgs.doodl6.com/problem/record-once-no-heap-oom/3.png)\n\n难道是linux glibc 中经典的 64M 内存问题？之前看挖坑的张师傅写过一篇文章（[一次 Java 进程 OOM 的排查分析（glibc 篇）](https://club.perfma.com/article/1709425?last=1714757&type=parent)）讲过这个问题，于是准备参考一下排查思路\n\n尝试设置环境变量MALLOC_ARENA_MAX=1，重启项目，跑了一段时间以后，再次执行`pmap`命令查看内存情况，发现并没有什么变化，看来并不是这个原因，文章后面的步骤就没有什么参考意义了。\n\n### smaps + gdb\n\n既然可以看到有这么多异常的内存块，那有没有办法知道里面存的是什么内容呢，答案是肯定的。经过一番资料查阅，发现可以通过gdb的命令把指定地址范围的内存块dump出来。\n\n要执行gdb的dump需要先知道一个地址范围，通过smaps可以输出进程使用的内存块详细信息，包括地址范围和来源\n\n```\ncat /proc/<pid>/smaps > smaps.txt\n```\n\n查看smaps.txt，找到有问题的内存块地址，比如下图中的 7fb9b0000000-7fb9b3ffe000\n\n![4](https://imgs.doodl6.com/problem/record-once-no-heap-oom/4.png)\n\n启动gdb\n\n```\ngdb attach <pid>\n```\n\ndump指定内存地址到指定的目录下，参数的地址需要在smaps拿到地址前加上0x\n\n``` \ndump memory /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump 0x7fb9b0000000 0x7fb9b3ffe000\n```\n\n显示长度超过10字符的字符串\n\n```\nstrings -10 /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump\n```\n\n![5](https://imgs.doodl6.com/problem/record-once-no-heap-oom/5.png)\n\n发现里面有大量的图中红框中的内容，这个内容是后端给前端websocket推送的内容，怎么会驻留在堆外内存里面呢？检查了项目代码发现，后端的websocket是使用的netty-socketio实现的，maven依赖为\n\n```\n<dependency>\n <groupId>com.corundumstudio.socketio</groupId>\n <artifactId>netty-socketio</artifactId>\n <version>1.7.12</version>\n</dependency>\n```\n\n这是一个开源的socket.io的一个java实现框架，具体可以看\n\n[https://github.com/mrniko/netty-socketio](https://github.com/mrniko/netty-socketio)\n\n看了下最近的版本发布日志，发现这个框架的最新版本已经是1.7.18，而且中间发布的几个版本多次修复了内存泄漏相关的问题\n\n![6](https://imgs.doodl6.com/problem/record-once-no-heap-oom/6.png)\n\n于是把依赖版本升级到最新版，重新发布后，第二天在看，发现RES还是变得很高\n\n中间又仔细看了使用框架的相关代码，发现断开连接的时候没有调用leaveRoom方法，而是调用了joinRoom，导致群发信息的时候还会往断开的连接里面发送数据（理论上会报错，但是没有看到过相关日志），修复代码后又重新发布了一版，跑了一天在看，依然没有效果。\n\n## 结论\n\n到这一步可以确认的是内存泄漏的问题肯定跟这个websocket及相关功能有关的（因为中间升级到1.7.18发现websocket连不上了，后来降到了1.7.17，期间有较长的时间是没有暴露websocket服务的，而正好这段时间的RES是非常稳定的，完全没有上涨的趋势，因为这个功能点比较小，用户没有什么感知），最后，经过跟产品方面沟通，决定把这里的websocet去掉，改为前端直接请求接口获取数据，因为这里的功能就是为了实时推送一个未读信息数量，而这个信息其实很少有用户关心，所以，就改成刷新页面的时候查询一下就行了，就这样，问题算是变相解决了😁。至于这个问题的具体原因还是没有找到，可能是框架BUG，也可能是代码使用问题，后面需要重度依赖websocket的时候或许会基于netty自己写一套，这样比较可控一点。\n\n## 总结\n\n虽然经过这么多的努力，最终只是证明了【没有需求就没有BUG】这句话，但是中间还是有挺多的收获的，很多命令也是第一次使用，中间还有一些曲折，就没有一一写出来了，挑选了一些比较有价值的过程写了这篇文章总结，希望可以分享给有需要的人，以后遇到类似问题，可以做个经验参考。\n\n## 感谢\n\n这次排查问题从网上查找学习了很多资料，非常感谢以下文章作者分享的经验\n\n- [一次 Java 进程 OOM 的排查分析（glibc 篇）](https://club.perfma.com/article/1709425?last=1714757&type=parent)\n- [JAVA堆外内存排查小结](https://zhuanlan.zhihu.com/p/60976273)\n- [Linux中使用gdb dump内存](https://blog.csdn.net/qq_36119192/article/details/96474833)","slug":"problem/record-once-no-heap-oom","published":1,"updated":"2024-05-12T08:08:25.251Z","comments":1,"layout":"post","photos":[],"_id":"clw39umoz000c2rvfhpnm1jyz","content":"<p><strong>本文涉及以下内容</strong></p>\n<ul>\n<li>开启NMT查看JVM内存使用情况</li>\n<li>通过pmap命令查看进程物理内存使用情况</li>\n<li>smaps查看进程内存地址</li>\n<li>gdb命令dump内存块</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近收到运维反馈，说有项目的一个节点的RSS已经是Xmx的两倍多了，因为是ECS机器所以项目可以一直运行，幸亏机器内存充足，不然就可能影响到其他应用了。</p>\n<h2 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>通过跳板机登录到目标机器，执行top命令，再按c，看到对应的进程所占用的RES有8个多G（这里当时忘记截图了），但是实际上我们配置的Xmx只有3G，而且程序还是正常运行的，所以不会是堆占用了这么多，于是就把问题方向指向了非堆的内存。</p>\n<p>首先想到通过Arthas查看内存分布情况，执行dashboard命令，查看内存分布情况</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/1.png\" alt=\"1\"></p>\n<p>发现堆和非堆的内存加起来也就2个G不到，但是这里看到的非堆只包含了code_cache和metaspace的部分，那有没有可能是其他非堆的部分有问题呢？</p>\n<span id=\"more\"></span>\n\n<h3 id=\"NMT\"><a href=\"#NMT\" class=\"headerlink\" title=\"NMT\"></a>NMT</h3><blockquote>\n<p>NMT是Native Memory Tracking的缩写，是Java7U40引入的HotSpot新特性，开启后可以通过jcmd命令来对JVM内存使用情况进行跟踪。注意，根据Java官方文档，开启NMT会有5%－10%的性能损耗。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:NativeMemoryTracking=[off | summary | detail]  </span><br><span class=\"line\"># off: 默认关闭 </span><br><span class=\"line\"># summary: 只统计各个分类的内存使用情况.</span><br><span class=\"line\"># detail: Collect memory usage by individual call sites.</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>-XX:NativeMemoryTracking=detail</code>命令到启动参数中，然后重启项目</p>\n<p>跑了一段时间后top看了下进程的RES，发现已经5个多G了</p>\n<p>执行<code>jcmd &lt;pid&gt; VM.native_memory summary scale=MB</code></p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/2.png\" alt=\"2\"></p>\n<p>从图中可以看到堆和非堆的总使用内存（committed）也就2G多，那还有3个G的内存去哪里了呢</p>\n<h3 id=\"pmap\"><a href=\"#pmap\" class=\"headerlink\" title=\"pmap\"></a>pmap</h3><blockquote>\n<p>pmap命令是Linux上用来开进程地址空间的</p>\n</blockquote>\n<p>执行<code>pmap -x &lt;pid&gt; | sort -n -k3 &gt; pmap-sorted.txt</code>命令可以根据实际内存排序</p>\n<p>查看<code>pmap-sorted.txt</code>文件，发现有大量的64M内存块</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/3.png\" alt=\"3\"></p>\n<p>难道是linux glibc 中经典的 64M 内存问题？之前看挖坑的张师傅写过一篇文章（<a href=\"https://club.perfma.com/article/1709425?last=1714757&type=parent\">一次 Java 进程 OOM 的排查分析（glibc 篇）</a>）讲过这个问题，于是准备参考一下排查思路</p>\n<p>尝试设置环境变量MALLOC_ARENA_MAX&#x3D;1，重启项目，跑了一段时间以后，再次执行<code>pmap</code>命令查看内存情况，发现并没有什么变化，看来并不是这个原因，文章后面的步骤就没有什么参考意义了。</p>\n<h3 id=\"smaps-gdb\"><a href=\"#smaps-gdb\" class=\"headerlink\" title=\"smaps + gdb\"></a>smaps + gdb</h3><p>既然可以看到有这么多异常的内存块，那有没有办法知道里面存的是什么内容呢，答案是肯定的。经过一番资料查阅，发现可以通过gdb的命令把指定地址范围的内存块dump出来。</p>\n<p>要执行gdb的dump需要先知道一个地址范围，通过smaps可以输出进程使用的内存块详细信息，包括地址范围和来源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/&lt;pid&gt;/smaps &gt; smaps.txt</span><br></pre></td></tr></table></figure>\n\n<p>查看smaps.txt，找到有问题的内存块地址，比如下图中的 7fb9b0000000-7fb9b3ffe000</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/4.png\" alt=\"4\"></p>\n<p>启动gdb</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p>dump指定内存地址到指定的目录下，参数的地址需要在smaps拿到地址前加上0x</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump memory /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump 0x7fb9b0000000 0x7fb9b3ffe000</span><br></pre></td></tr></table></figure>\n\n<p>显示长度超过10字符的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings -10 /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/5.png\" alt=\"5\"></p>\n<p>发现里面有大量的图中红框中的内容，这个内容是后端给前端websocket推送的内容，怎么会驻留在堆外内存里面呢？检查了项目代码发现，后端的websocket是使用的netty-socketio实现的，maven依赖为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;com.corundumstudio.socketio&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;netty-socketio&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个开源的socket.io的一个java实现框架，具体可以看</p>\n<p><a href=\"https://github.com/mrniko/netty-socketio\">https://github.com/mrniko/netty-socketio</a></p>\n<p>看了下最近的版本发布日志，发现这个框架的最新版本已经是1.7.18，而且中间发布的几个版本多次修复了内存泄漏相关的问题</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/6.png\" alt=\"6\"></p>\n<p>于是把依赖版本升级到最新版，重新发布后，第二天在看，发现RES还是变得很高</p>\n<p>中间又仔细看了使用框架的相关代码，发现断开连接的时候没有调用leaveRoom方法，而是调用了joinRoom，导致群发信息的时候还会往断开的连接里面发送数据（理论上会报错，但是没有看到过相关日志），修复代码后又重新发布了一版，跑了一天在看，依然没有效果。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>到这一步可以确认的是内存泄漏的问题肯定跟这个websocket及相关功能有关的（因为中间升级到1.7.18发现websocket连不上了，后来降到了1.7.17，期间有较长的时间是没有暴露websocket服务的，而正好这段时间的RES是非常稳定的，完全没有上涨的趋势，因为这个功能点比较小，用户没有什么感知），最后，经过跟产品方面沟通，决定把这里的websocet去掉，改为前端直接请求接口获取数据，因为这里的功能就是为了实时推送一个未读信息数量，而这个信息其实很少有用户关心，所以，就改成刷新页面的时候查询一下就行了，就这样，问题算是变相解决了😁。至于这个问题的具体原因还是没有找到，可能是框架BUG，也可能是代码使用问题，后面需要重度依赖websocket的时候或许会基于netty自己写一套，这样比较可控一点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然经过这么多的努力，最终只是证明了【没有需求就没有BUG】这句话，但是中间还是有挺多的收获的，很多命令也是第一次使用，中间还有一些曲折，就没有一一写出来了，挑选了一些比较有价值的过程写了这篇文章总结，希望可以分享给有需要的人，以后遇到类似问题，可以做个经验参考。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>这次排查问题从网上查找学习了很多资料，非常感谢以下文章作者分享的经验</p>\n<ul>\n<li><a href=\"https://club.perfma.com/article/1709425?last=1714757&type=parent\">一次 Java 进程 OOM 的排查分析（glibc 篇）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60976273\">JAVA堆外内存排查小结</a></li>\n<li><a href=\"https://blog.csdn.net/qq_36119192/article/details/96474833\">Linux中使用gdb dump内存</a></li>\n</ul>\n","excerpt":"<p><strong>本文涉及以下内容</strong></p>\n<ul>\n<li>开启NMT查看JVM内存使用情况</li>\n<li>通过pmap命令查看进程物理内存使用情况</li>\n<li>smaps查看进程内存地址</li>\n<li>gdb命令dump内存块</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近收到运维反馈，说有项目的一个节点的RSS已经是Xmx的两倍多了，因为是ECS机器所以项目可以一直运行，幸亏机器内存充足，不然就可能影响到其他应用了。</p>\n<h2 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>通过跳板机登录到目标机器，执行top命令，再按c，看到对应的进程所占用的RES有8个多G（这里当时忘记截图了），但是实际上我们配置的Xmx只有3G，而且程序还是正常运行的，所以不会是堆占用了这么多，于是就把问题方向指向了非堆的内存。</p>\n<p>首先想到通过Arthas查看内存分布情况，执行dashboard命令，查看内存分布情况</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/1.png\" alt=\"1\"></p>\n<p>发现堆和非堆的内存加起来也就2个G不到，但是这里看到的非堆只包含了code_cache和metaspace的部分，那有没有可能是其他非堆的部分有问题呢？</p>","more":"<h3 id=\"NMT\"><a href=\"#NMT\" class=\"headerlink\" title=\"NMT\"></a>NMT</h3><blockquote>\n<p>NMT是Native Memory Tracking的缩写，是Java7U40引入的HotSpot新特性，开启后可以通过jcmd命令来对JVM内存使用情况进行跟踪。注意，根据Java官方文档，开启NMT会有5%－10%的性能损耗。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:NativeMemoryTracking=[off | summary | detail]  </span><br><span class=\"line\"># off: 默认关闭 </span><br><span class=\"line\"># summary: 只统计各个分类的内存使用情况.</span><br><span class=\"line\"># detail: Collect memory usage by individual call sites.</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>-XX:NativeMemoryTracking=detail</code>命令到启动参数中，然后重启项目</p>\n<p>跑了一段时间后top看了下进程的RES，发现已经5个多G了</p>\n<p>执行<code>jcmd &lt;pid&gt; VM.native_memory summary scale=MB</code></p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/2.png\" alt=\"2\"></p>\n<p>从图中可以看到堆和非堆的总使用内存（committed）也就2G多，那还有3个G的内存去哪里了呢</p>\n<h3 id=\"pmap\"><a href=\"#pmap\" class=\"headerlink\" title=\"pmap\"></a>pmap</h3><blockquote>\n<p>pmap命令是Linux上用来开进程地址空间的</p>\n</blockquote>\n<p>执行<code>pmap -x &lt;pid&gt; | sort -n -k3 &gt; pmap-sorted.txt</code>命令可以根据实际内存排序</p>\n<p>查看<code>pmap-sorted.txt</code>文件，发现有大量的64M内存块</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/3.png\" alt=\"3\"></p>\n<p>难道是linux glibc 中经典的 64M 内存问题？之前看挖坑的张师傅写过一篇文章（<a href=\"https://club.perfma.com/article/1709425?last=1714757&type=parent\">一次 Java 进程 OOM 的排查分析（glibc 篇）</a>）讲过这个问题，于是准备参考一下排查思路</p>\n<p>尝试设置环境变量MALLOC_ARENA_MAX&#x3D;1，重启项目，跑了一段时间以后，再次执行<code>pmap</code>命令查看内存情况，发现并没有什么变化，看来并不是这个原因，文章后面的步骤就没有什么参考意义了。</p>\n<h3 id=\"smaps-gdb\"><a href=\"#smaps-gdb\" class=\"headerlink\" title=\"smaps + gdb\"></a>smaps + gdb</h3><p>既然可以看到有这么多异常的内存块，那有没有办法知道里面存的是什么内容呢，答案是肯定的。经过一番资料查阅，发现可以通过gdb的命令把指定地址范围的内存块dump出来。</p>\n<p>要执行gdb的dump需要先知道一个地址范围，通过smaps可以输出进程使用的内存块详细信息，包括地址范围和来源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/&lt;pid&gt;/smaps &gt; smaps.txt</span><br></pre></td></tr></table></figure>\n\n<p>查看smaps.txt，找到有问题的内存块地址，比如下图中的 7fb9b0000000-7fb9b3ffe000</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/4.png\" alt=\"4\"></p>\n<p>启动gdb</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p>dump指定内存地址到指定的目录下，参数的地址需要在smaps拿到地址前加上0x</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump memory /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump 0x7fb9b0000000 0x7fb9b3ffe000</span><br></pre></td></tr></table></figure>\n\n<p>显示长度超过10字符的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings -10 /tmp/0x7fb9b0000000-0x7fb9b3ffe000.dump</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/5.png\" alt=\"5\"></p>\n<p>发现里面有大量的图中红框中的内容，这个内容是后端给前端websocket推送的内容，怎么会驻留在堆外内存里面呢？检查了项目代码发现，后端的websocket是使用的netty-socketio实现的，maven依赖为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;com.corundumstudio.socketio&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;netty-socketio&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个开源的socket.io的一个java实现框架，具体可以看</p>\n<p><a href=\"https://github.com/mrniko/netty-socketio\">https://github.com/mrniko/netty-socketio</a></p>\n<p>看了下最近的版本发布日志，发现这个框架的最新版本已经是1.7.18，而且中间发布的几个版本多次修复了内存泄漏相关的问题</p>\n<p><img src=\"https://imgs.doodl6.com/problem/record-once-no-heap-oom/6.png\" alt=\"6\"></p>\n<p>于是把依赖版本升级到最新版，重新发布后，第二天在看，发现RES还是变得很高</p>\n<p>中间又仔细看了使用框架的相关代码，发现断开连接的时候没有调用leaveRoom方法，而是调用了joinRoom，导致群发信息的时候还会往断开的连接里面发送数据（理论上会报错，但是没有看到过相关日志），修复代码后又重新发布了一版，跑了一天在看，依然没有效果。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>到这一步可以确认的是内存泄漏的问题肯定跟这个websocket及相关功能有关的（因为中间升级到1.7.18发现websocket连不上了，后来降到了1.7.17，期间有较长的时间是没有暴露websocket服务的，而正好这段时间的RES是非常稳定的，完全没有上涨的趋势，因为这个功能点比较小，用户没有什么感知），最后，经过跟产品方面沟通，决定把这里的websocet去掉，改为前端直接请求接口获取数据，因为这里的功能就是为了实时推送一个未读信息数量，而这个信息其实很少有用户关心，所以，就改成刷新页面的时候查询一下就行了，就这样，问题算是变相解决了😁。至于这个问题的具体原因还是没有找到，可能是框架BUG，也可能是代码使用问题，后面需要重度依赖websocket的时候或许会基于netty自己写一套，这样比较可控一点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然经过这么多的努力，最终只是证明了【没有需求就没有BUG】这句话，但是中间还是有挺多的收获的，很多命令也是第一次使用，中间还有一些曲折，就没有一一写出来了，挑选了一些比较有价值的过程写了这篇文章总结，希望可以分享给有需要的人，以后遇到类似问题，可以做个经验参考。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>这次排查问题从网上查找学习了很多资料，非常感谢以下文章作者分享的经验</p>\n<ul>\n<li><a href=\"https://club.perfma.com/article/1709425?last=1714757&type=parent\">一次 Java 进程 OOM 的排查分析（glibc 篇）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60976273\">JAVA堆外内存排查小结</a></li>\n<li><a href=\"https://blog.csdn.net/qq_36119192/article/details/96474833\">Linux中使用gdb dump内存</a></li>\n</ul>"},{"title":"Jetty 9 使用 jetty.sh 启动 Unix 服务","date":"2015-06-19T12:48:00.000Z","_content":"\n每个单独发行的Jetty版本都有`bin/jetty.sh`这个脚本，可以在各种Unix（包括OS X）系统中用来管理jetty的启动。\n\n这个脚本适用于在Unix中把Jetty设置为服务。\n\n## **快速启动Jetty服务**\n\n以下是运行Jetty服务的最短步骤：\n\n```shell\n[/opt/jetty]# tar -zxf /home/user/downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz \n[/opt/jetty]# cd jetty-distribution-9.3.1-SNAPSHOT/\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# ls\nbin        lib                         modules      resources  start.jar\ndemo-base  license-eplv10-aslv20.html  notice.html  start.d    VERSION.txt\netc        logs                        README.TXT   start.ini  webapps\n\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cp bin/jetty.sh /etc/init.d/jetty\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# echo JETTY_HOME=`pwd` > /etc/default/jetty\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cat /etc/default/jetty\nJETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\n\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# service jetty start\nStarting Jetty: OK Wed Nov 20 10:26:53 MST 2013\n```\n\n从这个简单的例子中，我们可以看到在`/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT`文件夹下的Jetty作为Unix服务成功运行了。\n\n这看起来都很好，但是你使用的是root角色运行的默认配置的Jetty服务。\n\n## **Jetty服务的实用性设置**\n\n有多种方式可以实现这一点，这主要取决于你的Unix环境(或者是公司政策)。\n\n这里假设我们使用的是Linux系统（示例版本为Ubuntu 12.04.3 LTS）。\n\n### **准备系统**\n\n```shell\n# mkdir -p /opt/jetty\n# mkdir -p /opt/web/mybase\n# mkdir -p /opt/jetty/temp\n```\n\n以下是这几个文件夹的作用：\n\n- `/opt/jetty` 用于存放解压后的Jetty发布文件。\n- `/opt/web/mybase` 自定义用于存放web应用，包括所有能让它们运行在服务器上的必要配置。\n- `/opt/jetty/temp` 这是分配给java服务的临时文件夹（可以把它看作是`java.io.tmpdir`这个系统属性）。\n\n这里是故意保持和标准的临时文件夹命名`/tmp`不一样的，因为它还兼作servlet的规范工作目录。（这是我们的经验，在长时间运行的Jetty服务器上，标准临时目录通常由各种清理脚本管理）\n\n<!--more-->\n\n### **确认你安装了Java 7**\n\nJetty`${project.version}`运行需要Java 7（或者以上），确保你安装了合适的Java版本。\n\n```shell\n# apt-get install openjdk-7-jdk\n```\n\n或者[下载Java7](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n```shell\n# java -version\njava version \"1.6.0_27\"\nOpenJDK Runtime Environment (IcedTea6 1.12.6) (6b27-1.12.6-1ubuntu0.12.04.2)\nOpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)\n\n# update-alternatives --list java\n/usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java\n/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\n\n# update-alternatives --config java\nThere are 2 choices for the alternative java (providing /usr/bin/java).\n\n  Selection    Path                                            Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      auto mode\n  1            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      manual mode\n  2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      manual mode\n\nPress enter to keep the current choice[*], or type selection number: 2\nupdate-alternatives: using /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode.\n\n# java -version\njava version \"1.7.0_25\"\nOpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)\nOpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)\n```\n\n### **创建用于运行Jetty的用户**\n\n推荐创建一个指定的用户用于运行Jetty，该用户应该拥有运行Jetty的最小设置权限。\n\n```shell\n# useradd --user-group --shell /bin/false --home-dir /opt/jetty/temp jetty\n```\n\n这里创建了一个名为`jetty`的用户，并属于名为`jetty`的组，不能访问shell（`/bin/false`），主目录在`/opt/jetty/temp`。\n\n### **下载并解压你的发布版本**\n\n可以从[Official Eclipse Download Site](http://www.eclipse.org/jetty/documentation/current/quick-start-getting-started.html#jetty-downloading)获取一个发布副本。\n\n解压到指定文件夹。\n\n```shell\n[/opt/jetty]# tar -zxf /home/user/Downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz \n[/opt/jetty]# ls -F\njetty-distribution-9.3.1-SNAPSHOT/\n[/opt/jetty]# mkdir /opt/jetty/temp\n```\n\n可能解压出来的Jetty发布文件夹名称看起来看奇怪或不合理的，但是从Jetty9.1开始，`${jetty.home}`和`${jetty.base}`分开可以隔离你的web引用特殊的设置，从而更简单地升级。\n\n已经创建的`/opt/jetty/temp`作为持久的目录当作Jetty的缓存和工作目录。许多Unix系统会定期清理`/tmp`文件夹，这种行为在不是Servlet容器所期望的，而且会导致问题的发生，`/opt/jetty/temp`这个持久的目录就是应对这种行为的解决方案。\n\n### **配置web应用**\n\n`/opt/web/mybase`这个文件夹就是`${jetty.base}`，所以让我们配置它来保存你的应用及其配置。\n\n***小贴士**：在过去的Jetty版本中，你得在Jetty发布目录下操作修改或添加，虽然这依然支持，但是我们鼓励你设置一个合适的`${jetty.base}`目录，因为这将有利于你在将来更容易升级Jetty的版本。\n\n```shell\n# cd /opt/web/mybase/\n[/opt/web/mybase]# ls\n[/opt/web/mybase]# java -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \\\n   --add-to-start=deploy,http,logging\nWARNING: deploy          initialised in ${jetty.base}/start.ini (appended)\nWARNING: deploy          enabled in     ${jetty.base}/start.ini\nWARNING: server          initialised in ${jetty.base}/start.ini (appended)\nWARNING: server          enabled in     ${jetty.base}/start.ini\nWARNING: http            initialised in ${jetty.base}/start.ini (appended)\nWARNING: http            enabled in     ${jetty.base}/start.ini\nWARNING: server          enabled in     ${jetty.base}/start.ini\nWARNING: logging         initialised in ${jetty.base}/start.ini (appended)\nWARNING: logging         enabled in     ${jetty.base}/start.ini\n[/opt/web/mybase]# ls -F\nstart.ini  webapps/\n```\n\n此时，你已经为你的`/opt/web/mybase`启用以下模块：\n\n**deploy**\t：这个模块将执行`/opt/web/mybase/webapps`目录下的web应用程序部署（war文件、解压的目录或可部署上下文的Jetty IoC XML文件）。\n\n**http**：这个设置一个单独的连接器,监听基本的HTTP请求。可以通过已经创建的`start.ini`文件配置连接器。\n\n**logging**：当Jetty作为服务运行的时候，开启日志是非常重要的。这个模块将开启捕获基本的标准输出和标准错误日志记录功能，并保存到到`/opt/web/mybase/logs/`文件夹。\n\n参考[Using start.jar ](http://www.eclipse.org/jetty/documentation/current/start-jar.html)获取更多关于如何配置`${jetty.base}`文件夹的信息。\n\n复制一个war文件到目录中。\n\n```shell\n# cp /home/user/projects/mywebsite.war /opt/web/mybase/webapps/\n```\n\n大多数服务设备希望Jetty是运行在80端口的，现在你有机会可以把默认的8080改为80。\n编辑`/opt/web/mybase/start.ini`并修改`jetty.http.port`的值。\n\n```shell\n# grep jetty.http.port /opt/web/mybase/start.ini\njetty.port=80\n```\n\n### **修改权限**\n\n修改Jetty发布的权限，设置你创建的用户可以访问你的web应用文件夹。\n\n```shell\n# chown --recursive jetty /opt/jetty\n# chown --recursive jetty /opt/web/mybase\n```\n\n### **配置服务层**\n\n接下来我们需要新建一个Jetty服务让它在Unix系统中可以和标准的服务一样管理调用。\n\n```shell\n# cp /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/bin/jetty.sh /etc/init.d/jetty\n# echo \"JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\" > /etc/default/jetty\n# echo \"JETTY_BASE=/opt/web/mybase\" >> /etc/default/jetty\n# echo \"TMPDIR=/opt/jetty/temp\" >> /etc/default/jetty\n```\n\n测试配置\n\n```shell\n# service jetty status\nChecking arguments to Jetty: \nSTART_INI      =  /opt/web/mybase/start.ini\nJETTY_HOME     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\nJETTY_BASE     =  /opt/web/mybase\nJETTY_CONF     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/etc/jetty.conf\nJETTY_PID      =  /var/run/jetty.pid\nJETTY_START    =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar\nJETTY_LOGS     =  /opt/web/mybase/logs\nCLASSPATH      =  \nJAVA           =  /usr/bin/java\nJAVA_OPTIONS   =  -Djetty.state=/opt/web/mybase/jetty.state \n       -Djetty.logs=/opt/web/mybase/logs\n       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT \n       -Djetty.base=/opt/web/mybase \n       -Djava.io.tmpdir=/opt/jetty/temp\nJETTY_ARGS     =  jetty-logging.xml jetty-started.xml\nRUN_CMD        =  /usr/bin/java \n       -Djetty.state=/opt/web/mybase/jetty.state \n       -Djetty.logs=/opt/web/mybase/logs \n       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT \n       -Djetty.base=/opt/web/mybase \n       -Djava.io.tmpdir=/opt/jetty/temp\n       -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \n       jetty-logging.xml \n       jetty-started.xml\n```\n\n### **启动你的服务**\n\n现在你有一个在`/opt/web/mybase`的`${jetty.base}`和一个在`/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT`的Jetty发布版本，需要启动服务才能让它长时间的成为服务级文件。\n\n开始，启动吧。\n\n```shell\n# service jetty start\nStarting Jetty: OK Wed Nov 20 12:35:28 MST 2013\n\n# service jetty check\n..(snip)..\nJetty running pid=2958\n\n[/opt/web/mybase]# ps u 2958\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\njetty     2958  5.3  0.1 11179176 53984 ?      Sl   12:46   0:00 /usr/bin/java -Djetty...\n```\n\n你现在应该让它在服务器上运行，试一试。\n\n> 原文链接：[Startup a Unix Service using jetty.sh](http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html)","source":"_posts/translate/start-jetty-9.md","raw":"---\ntitle: Jetty 9 使用 jetty.sh 启动 Unix 服务\ndate: 2015-06-19 20:48:00\ncategories: \n- 翻译\n---\n\n每个单独发行的Jetty版本都有`bin/jetty.sh`这个脚本，可以在各种Unix（包括OS X）系统中用来管理jetty的启动。\n\n这个脚本适用于在Unix中把Jetty设置为服务。\n\n## **快速启动Jetty服务**\n\n以下是运行Jetty服务的最短步骤：\n\n```shell\n[/opt/jetty]# tar -zxf /home/user/downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz \n[/opt/jetty]# cd jetty-distribution-9.3.1-SNAPSHOT/\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# ls\nbin        lib                         modules      resources  start.jar\ndemo-base  license-eplv10-aslv20.html  notice.html  start.d    VERSION.txt\netc        logs                        README.TXT   start.ini  webapps\n\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cp bin/jetty.sh /etc/init.d/jetty\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# echo JETTY_HOME=`pwd` > /etc/default/jetty\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cat /etc/default/jetty\nJETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\n\n[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# service jetty start\nStarting Jetty: OK Wed Nov 20 10:26:53 MST 2013\n```\n\n从这个简单的例子中，我们可以看到在`/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT`文件夹下的Jetty作为Unix服务成功运行了。\n\n这看起来都很好，但是你使用的是root角色运行的默认配置的Jetty服务。\n\n## **Jetty服务的实用性设置**\n\n有多种方式可以实现这一点，这主要取决于你的Unix环境(或者是公司政策)。\n\n这里假设我们使用的是Linux系统（示例版本为Ubuntu 12.04.3 LTS）。\n\n### **准备系统**\n\n```shell\n# mkdir -p /opt/jetty\n# mkdir -p /opt/web/mybase\n# mkdir -p /opt/jetty/temp\n```\n\n以下是这几个文件夹的作用：\n\n- `/opt/jetty` 用于存放解压后的Jetty发布文件。\n- `/opt/web/mybase` 自定义用于存放web应用，包括所有能让它们运行在服务器上的必要配置。\n- `/opt/jetty/temp` 这是分配给java服务的临时文件夹（可以把它看作是`java.io.tmpdir`这个系统属性）。\n\n这里是故意保持和标准的临时文件夹命名`/tmp`不一样的，因为它还兼作servlet的规范工作目录。（这是我们的经验，在长时间运行的Jetty服务器上，标准临时目录通常由各种清理脚本管理）\n\n<!--more-->\n\n### **确认你安装了Java 7**\n\nJetty`${project.version}`运行需要Java 7（或者以上），确保你安装了合适的Java版本。\n\n```shell\n# apt-get install openjdk-7-jdk\n```\n\n或者[下载Java7](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n```shell\n# java -version\njava version \"1.6.0_27\"\nOpenJDK Runtime Environment (IcedTea6 1.12.6) (6b27-1.12.6-1ubuntu0.12.04.2)\nOpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)\n\n# update-alternatives --list java\n/usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java\n/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java\n\n# update-alternatives --config java\nThere are 2 choices for the alternative java (providing /usr/bin/java).\n\n  Selection    Path                                            Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      auto mode\n  1            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      manual mode\n  2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      manual mode\n\nPress enter to keep the current choice[*], or type selection number: 2\nupdate-alternatives: using /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode.\n\n# java -version\njava version \"1.7.0_25\"\nOpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)\nOpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)\n```\n\n### **创建用于运行Jetty的用户**\n\n推荐创建一个指定的用户用于运行Jetty，该用户应该拥有运行Jetty的最小设置权限。\n\n```shell\n# useradd --user-group --shell /bin/false --home-dir /opt/jetty/temp jetty\n```\n\n这里创建了一个名为`jetty`的用户，并属于名为`jetty`的组，不能访问shell（`/bin/false`），主目录在`/opt/jetty/temp`。\n\n### **下载并解压你的发布版本**\n\n可以从[Official Eclipse Download Site](http://www.eclipse.org/jetty/documentation/current/quick-start-getting-started.html#jetty-downloading)获取一个发布副本。\n\n解压到指定文件夹。\n\n```shell\n[/opt/jetty]# tar -zxf /home/user/Downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz \n[/opt/jetty]# ls -F\njetty-distribution-9.3.1-SNAPSHOT/\n[/opt/jetty]# mkdir /opt/jetty/temp\n```\n\n可能解压出来的Jetty发布文件夹名称看起来看奇怪或不合理的，但是从Jetty9.1开始，`${jetty.home}`和`${jetty.base}`分开可以隔离你的web引用特殊的设置，从而更简单地升级。\n\n已经创建的`/opt/jetty/temp`作为持久的目录当作Jetty的缓存和工作目录。许多Unix系统会定期清理`/tmp`文件夹，这种行为在不是Servlet容器所期望的，而且会导致问题的发生，`/opt/jetty/temp`这个持久的目录就是应对这种行为的解决方案。\n\n### **配置web应用**\n\n`/opt/web/mybase`这个文件夹就是`${jetty.base}`，所以让我们配置它来保存你的应用及其配置。\n\n***小贴士**：在过去的Jetty版本中，你得在Jetty发布目录下操作修改或添加，虽然这依然支持，但是我们鼓励你设置一个合适的`${jetty.base}`目录，因为这将有利于你在将来更容易升级Jetty的版本。\n\n```shell\n# cd /opt/web/mybase/\n[/opt/web/mybase]# ls\n[/opt/web/mybase]# java -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \\\n   --add-to-start=deploy,http,logging\nWARNING: deploy          initialised in ${jetty.base}/start.ini (appended)\nWARNING: deploy          enabled in     ${jetty.base}/start.ini\nWARNING: server          initialised in ${jetty.base}/start.ini (appended)\nWARNING: server          enabled in     ${jetty.base}/start.ini\nWARNING: http            initialised in ${jetty.base}/start.ini (appended)\nWARNING: http            enabled in     ${jetty.base}/start.ini\nWARNING: server          enabled in     ${jetty.base}/start.ini\nWARNING: logging         initialised in ${jetty.base}/start.ini (appended)\nWARNING: logging         enabled in     ${jetty.base}/start.ini\n[/opt/web/mybase]# ls -F\nstart.ini  webapps/\n```\n\n此时，你已经为你的`/opt/web/mybase`启用以下模块：\n\n**deploy**\t：这个模块将执行`/opt/web/mybase/webapps`目录下的web应用程序部署（war文件、解压的目录或可部署上下文的Jetty IoC XML文件）。\n\n**http**：这个设置一个单独的连接器,监听基本的HTTP请求。可以通过已经创建的`start.ini`文件配置连接器。\n\n**logging**：当Jetty作为服务运行的时候，开启日志是非常重要的。这个模块将开启捕获基本的标准输出和标准错误日志记录功能，并保存到到`/opt/web/mybase/logs/`文件夹。\n\n参考[Using start.jar ](http://www.eclipse.org/jetty/documentation/current/start-jar.html)获取更多关于如何配置`${jetty.base}`文件夹的信息。\n\n复制一个war文件到目录中。\n\n```shell\n# cp /home/user/projects/mywebsite.war /opt/web/mybase/webapps/\n```\n\n大多数服务设备希望Jetty是运行在80端口的，现在你有机会可以把默认的8080改为80。\n编辑`/opt/web/mybase/start.ini`并修改`jetty.http.port`的值。\n\n```shell\n# grep jetty.http.port /opt/web/mybase/start.ini\njetty.port=80\n```\n\n### **修改权限**\n\n修改Jetty发布的权限，设置你创建的用户可以访问你的web应用文件夹。\n\n```shell\n# chown --recursive jetty /opt/jetty\n# chown --recursive jetty /opt/web/mybase\n```\n\n### **配置服务层**\n\n接下来我们需要新建一个Jetty服务让它在Unix系统中可以和标准的服务一样管理调用。\n\n```shell\n# cp /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/bin/jetty.sh /etc/init.d/jetty\n# echo \"JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\" > /etc/default/jetty\n# echo \"JETTY_BASE=/opt/web/mybase\" >> /etc/default/jetty\n# echo \"TMPDIR=/opt/jetty/temp\" >> /etc/default/jetty\n```\n\n测试配置\n\n```shell\n# service jetty status\nChecking arguments to Jetty: \nSTART_INI      =  /opt/web/mybase/start.ini\nJETTY_HOME     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT\nJETTY_BASE     =  /opt/web/mybase\nJETTY_CONF     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/etc/jetty.conf\nJETTY_PID      =  /var/run/jetty.pid\nJETTY_START    =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar\nJETTY_LOGS     =  /opt/web/mybase/logs\nCLASSPATH      =  \nJAVA           =  /usr/bin/java\nJAVA_OPTIONS   =  -Djetty.state=/opt/web/mybase/jetty.state \n       -Djetty.logs=/opt/web/mybase/logs\n       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT \n       -Djetty.base=/opt/web/mybase \n       -Djava.io.tmpdir=/opt/jetty/temp\nJETTY_ARGS     =  jetty-logging.xml jetty-started.xml\nRUN_CMD        =  /usr/bin/java \n       -Djetty.state=/opt/web/mybase/jetty.state \n       -Djetty.logs=/opt/web/mybase/logs \n       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT \n       -Djetty.base=/opt/web/mybase \n       -Djava.io.tmpdir=/opt/jetty/temp\n       -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \n       jetty-logging.xml \n       jetty-started.xml\n```\n\n### **启动你的服务**\n\n现在你有一个在`/opt/web/mybase`的`${jetty.base}`和一个在`/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT`的Jetty发布版本，需要启动服务才能让它长时间的成为服务级文件。\n\n开始，启动吧。\n\n```shell\n# service jetty start\nStarting Jetty: OK Wed Nov 20 12:35:28 MST 2013\n\n# service jetty check\n..(snip)..\nJetty running pid=2958\n\n[/opt/web/mybase]# ps u 2958\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\njetty     2958  5.3  0.1 11179176 53984 ?      Sl   12:46   0:00 /usr/bin/java -Djetty...\n```\n\n你现在应该让它在服务器上运行，试一试。\n\n> 原文链接：[Startup a Unix Service using jetty.sh](http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html)","slug":"translate/start-jetty-9","published":1,"updated":"2024-05-12T08:04:51.090Z","comments":1,"layout":"post","photos":[],"_id":"clw39umpc000p2rvf0raxh8w4","content":"<p>每个单独发行的Jetty版本都有<code>bin/jetty.sh</code>这个脚本，可以在各种Unix（包括OS X）系统中用来管理jetty的启动。</p>\n<p>这个脚本适用于在Unix中把Jetty设置为服务。</p>\n<h2 id=\"快速启动Jetty服务\"><a href=\"#快速启动Jetty服务\" class=\"headerlink\" title=\"快速启动Jetty服务\"></a><strong>快速启动Jetty服务</strong></h2><p>以下是运行Jetty服务的最短步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\">tar -zxf /home/user/downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> jetty-distribution-9.3.1-SNAPSHOT/</span></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# ls</span><br><span class=\"line\">bin        lib                         modules      resources  start.jar</span><br><span class=\"line\">demo-base  license-eplv10-aslv20.html  notice.html  start.d    VERSION.txt</span><br><span class=\"line\">etc        logs                        README.TXT   start.ini  webapps</span><br><span class=\"line\"></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cp bin/jetty.sh /etc/init.d/jetty</span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# echo JETTY_HOME=`pwd` &gt; /etc/default/jetty</span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cat /etc/default/jetty</span><br><span class=\"line\">JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</span><br><span class=\"line\"></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# service jetty start</span><br><span class=\"line\">Starting Jetty: OK Wed Nov 20 10:26:53 MST 2013</span><br></pre></td></tr></table></figure>\n\n<p>从这个简单的例子中，我们可以看到在<code>/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</code>文件夹下的Jetty作为Unix服务成功运行了。</p>\n<p>这看起来都很好，但是你使用的是root角色运行的默认配置的Jetty服务。</p>\n<h2 id=\"Jetty服务的实用性设置\"><a href=\"#Jetty服务的实用性设置\" class=\"headerlink\" title=\"Jetty服务的实用性设置\"></a><strong>Jetty服务的实用性设置</strong></h2><p>有多种方式可以实现这一点，这主要取决于你的Unix环境(或者是公司政策)。</p>\n<p>这里假设我们使用的是Linux系统（示例版本为Ubuntu 12.04.3 LTS）。</p>\n<h3 id=\"准备系统\"><a href=\"#准备系统\" class=\"headerlink\" title=\"准备系统\"></a><strong>准备系统</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/web/mybase</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/jetty/temp</span></span><br></pre></td></tr></table></figure>\n\n<p>以下是这几个文件夹的作用：</p>\n<ul>\n<li><code>/opt/jetty</code> 用于存放解压后的Jetty发布文件。</li>\n<li><code>/opt/web/mybase</code> 自定义用于存放web应用，包括所有能让它们运行在服务器上的必要配置。</li>\n<li><code>/opt/jetty/temp</code> 这是分配给java服务的临时文件夹（可以把它看作是<code>java.io.tmpdir</code>这个系统属性）。</li>\n</ul>\n<p>这里是故意保持和标准的临时文件夹命名<code>/tmp</code>不一样的，因为它还兼作servlet的规范工作目录。（这是我们的经验，在长时间运行的Jetty服务器上，标准临时目录通常由各种清理脚本管理）</p>\n<span id=\"more\"></span>\n\n<h3 id=\"确认你安装了Java-7\"><a href=\"#确认你安装了Java-7\" class=\"headerlink\" title=\"确认你安装了Java 7\"></a><strong>确认你安装了Java 7</strong></h3><p>Jetty<code>$&#123;project.version&#125;</code>运行需要Java 7（或者以上），确保你安装了合适的Java版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apt-get install openjdk-7-jdk</span></span><br></pre></td></tr></table></figure>\n\n<p>或者<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">下载Java7</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">java -version</span></span><br><span class=\"line\">java version &quot;1.6.0_27&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.12.6) (6b27-1.12.6-1ubuntu0.12.04.2)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">update-alternatives --list java</span></span><br><span class=\"line\">/usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">update-alternatives --config java</span></span><br><span class=\"line\">There are 2 choices for the alternative java (providing /usr/bin/java).</span><br><span class=\"line\"></span><br><span class=\"line\">  Selection    Path                                            Priority   Status</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">* 0            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      auto mode</span><br><span class=\"line\">  1            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      manual mode</span><br><span class=\"line\">  2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      manual mode</span><br><span class=\"line\"></span><br><span class=\"line\">Press enter to keep the current choice[*], or type selection number: 2</span><br><span class=\"line\">update-alternatives: using /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">java -version</span></span><br><span class=\"line\">java version &quot;1.7.0_25&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用于运行Jetty的用户\"><a href=\"#创建用于运行Jetty的用户\" class=\"headerlink\" title=\"创建用于运行Jetty的用户\"></a><strong>创建用于运行Jetty的用户</strong></h3><p>推荐创建一个指定的用户用于运行Jetty，该用户应该拥有运行Jetty的最小设置权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">useradd --user-group --shell /bin/false --home-dir /opt/jetty/temp jetty</span></span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个名为<code>jetty</code>的用户，并属于名为<code>jetty</code>的组，不能访问shell（<code>/bin/false</code>），主目录在<code>/opt/jetty/temp</code>。</p>\n<h3 id=\"下载并解压你的发布版本\"><a href=\"#下载并解压你的发布版本\" class=\"headerlink\" title=\"下载并解压你的发布版本\"></a><strong>下载并解压你的发布版本</strong></h3><p>可以从<a href=\"http://www.eclipse.org/jetty/documentation/current/quick-start-getting-started.html#jetty-downloading\">Official Eclipse Download Site</a>获取一个发布副本。</p>\n<p>解压到指定文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\">tar -zxf /home/user/Downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -F</span></span><br><span class=\"line\">jetty-distribution-9.3.1-SNAPSHOT/</span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> /opt/jetty/temp</span></span><br></pre></td></tr></table></figure>\n\n<p>可能解压出来的Jetty发布文件夹名称看起来看奇怪或不合理的，但是从Jetty9.1开始，<code>$&#123;jetty.home&#125;</code>和<code>$&#123;jetty.base&#125;</code>分开可以隔离你的web引用特殊的设置，从而更简单地升级。</p>\n<p>已经创建的<code>/opt/jetty/temp</code>作为持久的目录当作Jetty的缓存和工作目录。许多Unix系统会定期清理<code>/tmp</code>文件夹，这种行为在不是Servlet容器所期望的，而且会导致问题的发生，<code>/opt/jetty/temp</code>这个持久的目录就是应对这种行为的解决方案。</p>\n<h3 id=\"配置web应用\"><a href=\"#配置web应用\" class=\"headerlink\" title=\"配置web应用\"></a><strong>配置web应用</strong></h3><p><code>/opt/web/mybase</code>这个文件夹就是<code>$&#123;jetty.base&#125;</code>，所以让我们配置它来保存你的应用及其配置。</p>\n<p>*<strong>小贴士</strong>：在过去的Jetty版本中，你得在Jetty发布目录下操作修改或添加，虽然这依然支持，但是我们鼓励你设置一个合适的<code>$&#123;jetty.base&#125;</code>目录，因为这将有利于你在将来更容易升级Jetty的版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /opt/web/mybase/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\">java -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   --add-to-start=deploy,http,logging</span></span><br><span class=\"line\">WARNING: deploy          initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: deploy          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: server          initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: server          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: http            initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: http            enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: server          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: logging         initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: logging         enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -F</span></span><br><span class=\"line\">start.ini  webapps/</span><br></pre></td></tr></table></figure>\n\n<p>此时，你已经为你的<code>/opt/web/mybase</code>启用以下模块：</p>\n<p><strong>deploy</strong>\t：这个模块将执行<code>/opt/web/mybase/webapps</code>目录下的web应用程序部署（war文件、解压的目录或可部署上下文的Jetty IoC XML文件）。</p>\n<p><strong>http</strong>：这个设置一个单独的连接器,监听基本的HTTP请求。可以通过已经创建的<code>start.ini</code>文件配置连接器。</p>\n<p><strong>logging</strong>：当Jetty作为服务运行的时候，开启日志是非常重要的。这个模块将开启捕获基本的标准输出和标准错误日志记录功能，并保存到到<code>/opt/web/mybase/logs/</code>文件夹。</p>\n<p>参考<a href=\"http://www.eclipse.org/jetty/documentation/current/start-jar.html\">Using start.jar </a>获取更多关于如何配置<code>$&#123;jetty.base&#125;</code>文件夹的信息。</p>\n<p>复制一个war文件到目录中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> /home/user/projects/mywebsite.war /opt/web/mybase/webapps/</span></span><br></pre></td></tr></table></figure>\n\n<p>大多数服务设备希望Jetty是运行在80端口的，现在你有机会可以把默认的8080改为80。<br>编辑<code>/opt/web/mybase/start.ini</code>并修改<code>jetty.http.port</code>的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">grep jetty.http.port /opt/web/mybase/start.ini</span></span><br><span class=\"line\">jetty.port=80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a><strong>修改权限</strong></h3><p>修改Jetty发布的权限，设置你创建的用户可以访问你的web应用文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">chown</span> --recursive jetty /opt/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">chown</span> --recursive jetty /opt/web/mybase</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置服务层\"><a href=\"#配置服务层\" class=\"headerlink\" title=\"配置服务层\"></a><strong>配置服务层</strong></h3><p>接下来我们需要新建一个Jetty服务让它在Unix系统中可以和标准的服务一样管理调用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/bin/jetty.sh /etc/init.d/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT&quot;</span> &gt; /etc/default/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;JETTY_BASE=/opt/web/mybase&quot;</span> &gt;&gt; /etc/default/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;TMPDIR=/opt/jetty/temp&quot;</span> &gt;&gt; /etc/default/jetty</span></span><br></pre></td></tr></table></figure>\n\n<p>测试配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty status</span></span><br><span class=\"line\">Checking arguments to Jetty: </span><br><span class=\"line\">START_INI      =  /opt/web/mybase/start.ini</span><br><span class=\"line\">JETTY_HOME     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</span><br><span class=\"line\">JETTY_BASE     =  /opt/web/mybase</span><br><span class=\"line\">JETTY_CONF     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/etc/jetty.conf</span><br><span class=\"line\">JETTY_PID      =  /var/run/jetty.pid</span><br><span class=\"line\">JETTY_START    =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar</span><br><span class=\"line\">JETTY_LOGS     =  /opt/web/mybase/logs</span><br><span class=\"line\">CLASSPATH      =  </span><br><span class=\"line\">JAVA           =  /usr/bin/java</span><br><span class=\"line\">JAVA_OPTIONS   =  -Djetty.state=/opt/web/mybase/jetty.state </span><br><span class=\"line\">       -Djetty.logs=/opt/web/mybase/logs</span><br><span class=\"line\">       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT </span><br><span class=\"line\">       -Djetty.base=/opt/web/mybase </span><br><span class=\"line\">       -Djava.io.tmpdir=/opt/jetty/temp</span><br><span class=\"line\">JETTY_ARGS     =  jetty-logging.xml jetty-started.xml</span><br><span class=\"line\">RUN_CMD        =  /usr/bin/java </span><br><span class=\"line\">       -Djetty.state=/opt/web/mybase/jetty.state </span><br><span class=\"line\">       -Djetty.logs=/opt/web/mybase/logs </span><br><span class=\"line\">       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT </span><br><span class=\"line\">       -Djetty.base=/opt/web/mybase </span><br><span class=\"line\">       -Djava.io.tmpdir=/opt/jetty/temp</span><br><span class=\"line\">       -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar </span><br><span class=\"line\">       jetty-logging.xml </span><br><span class=\"line\">       jetty-started.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动你的服务\"><a href=\"#启动你的服务\" class=\"headerlink\" title=\"启动你的服务\"></a><strong>启动你的服务</strong></h3><p>现在你有一个在<code>/opt/web/mybase</code>的<code>$&#123;jetty.base&#125;</code>和一个在<code>/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</code>的Jetty发布版本，需要启动服务才能让它长时间的成为服务级文件。</p>\n<p>开始，启动吧。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty start</span></span><br><span class=\"line\">Starting Jetty: OK Wed Nov 20 12:35:28 MST 2013</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty check</span></span><br><span class=\"line\">..(snip)..</span><br><span class=\"line\">Jetty running pid=2958</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\">ps u 2958</span></span><br><span class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">jetty     2958  5.3  0.1 11179176 53984 ?      Sl   12:46   0:00 /usr/bin/java -Djetty...</span><br></pre></td></tr></table></figure>\n\n<p>你现在应该让它在服务器上运行，试一试。</p>\n<blockquote>\n<p>原文链接：<a href=\"http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html\">Startup a Unix Service using jetty.sh</a></p>\n</blockquote>\n","excerpt":"<p>每个单独发行的Jetty版本都有<code>bin/jetty.sh</code>这个脚本，可以在各种Unix（包括OS X）系统中用来管理jetty的启动。</p>\n<p>这个脚本适用于在Unix中把Jetty设置为服务。</p>\n<h2 id=\"快速启动Jetty服务\"><a href=\"#快速启动Jetty服务\" class=\"headerlink\" title=\"快速启动Jetty服务\"></a><strong>快速启动Jetty服务</strong></h2><p>以下是运行Jetty服务的最短步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\">tar -zxf /home/user/downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> jetty-distribution-9.3.1-SNAPSHOT/</span></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# ls</span><br><span class=\"line\">bin        lib                         modules      resources  start.jar</span><br><span class=\"line\">demo-base  license-eplv10-aslv20.html  notice.html  start.d    VERSION.txt</span><br><span class=\"line\">etc        logs                        README.TXT   start.ini  webapps</span><br><span class=\"line\"></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cp bin/jetty.sh /etc/init.d/jetty</span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# echo JETTY_HOME=`pwd` &gt; /etc/default/jetty</span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# cat /etc/default/jetty</span><br><span class=\"line\">JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</span><br><span class=\"line\"></span><br><span class=\"line\">[/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT]# service jetty start</span><br><span class=\"line\">Starting Jetty: OK Wed Nov 20 10:26:53 MST 2013</span><br></pre></td></tr></table></figure>\n\n<p>从这个简单的例子中，我们可以看到在<code>/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</code>文件夹下的Jetty作为Unix服务成功运行了。</p>\n<p>这看起来都很好，但是你使用的是root角色运行的默认配置的Jetty服务。</p>\n<h2 id=\"Jetty服务的实用性设置\"><a href=\"#Jetty服务的实用性设置\" class=\"headerlink\" title=\"Jetty服务的实用性设置\"></a><strong>Jetty服务的实用性设置</strong></h2><p>有多种方式可以实现这一点，这主要取决于你的Unix环境(或者是公司政策)。</p>\n<p>这里假设我们使用的是Linux系统（示例版本为Ubuntu 12.04.3 LTS）。</p>\n<h3 id=\"准备系统\"><a href=\"#准备系统\" class=\"headerlink\" title=\"准备系统\"></a><strong>准备系统</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/web/mybase</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /opt/jetty/temp</span></span><br></pre></td></tr></table></figure>\n\n<p>以下是这几个文件夹的作用：</p>\n<ul>\n<li><code>/opt/jetty</code> 用于存放解压后的Jetty发布文件。</li>\n<li><code>/opt/web/mybase</code> 自定义用于存放web应用，包括所有能让它们运行在服务器上的必要配置。</li>\n<li><code>/opt/jetty/temp</code> 这是分配给java服务的临时文件夹（可以把它看作是<code>java.io.tmpdir</code>这个系统属性）。</li>\n</ul>\n<p>这里是故意保持和标准的临时文件夹命名<code>/tmp</code>不一样的，因为它还兼作servlet的规范工作目录。（这是我们的经验，在长时间运行的Jetty服务器上，标准临时目录通常由各种清理脚本管理）</p>","more":"<h3 id=\"确认你安装了Java-7\"><a href=\"#确认你安装了Java-7\" class=\"headerlink\" title=\"确认你安装了Java 7\"></a><strong>确认你安装了Java 7</strong></h3><p>Jetty<code>$&#123;project.version&#125;</code>运行需要Java 7（或者以上），确保你安装了合适的Java版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apt-get install openjdk-7-jdk</span></span><br></pre></td></tr></table></figure>\n\n<p>或者<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">下载Java7</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">java -version</span></span><br><span class=\"line\">java version &quot;1.6.0_27&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.12.6) (6b27-1.12.6-1ubuntu0.12.04.2)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">update-alternatives --list java</span></span><br><span class=\"line\">/usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java</span><br><span class=\"line\">/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">update-alternatives --config java</span></span><br><span class=\"line\">There are 2 choices for the alternative java (providing /usr/bin/java).</span><br><span class=\"line\"></span><br><span class=\"line\">  Selection    Path                                            Priority   Status</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">* 0            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      auto mode</span><br><span class=\"line\">  1            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      manual mode</span><br><span class=\"line\">  2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      manual mode</span><br><span class=\"line\"></span><br><span class=\"line\">Press enter to keep the current choice[*], or type selection number: 2</span><br><span class=\"line\">update-alternatives: using /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">java -version</span></span><br><span class=\"line\">java version &quot;1.7.0_25&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用于运行Jetty的用户\"><a href=\"#创建用于运行Jetty的用户\" class=\"headerlink\" title=\"创建用于运行Jetty的用户\"></a><strong>创建用于运行Jetty的用户</strong></h3><p>推荐创建一个指定的用户用于运行Jetty，该用户应该拥有运行Jetty的最小设置权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">useradd --user-group --shell /bin/false --home-dir /opt/jetty/temp jetty</span></span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个名为<code>jetty</code>的用户，并属于名为<code>jetty</code>的组，不能访问shell（<code>/bin/false</code>），主目录在<code>/opt/jetty/temp</code>。</p>\n<h3 id=\"下载并解压你的发布版本\"><a href=\"#下载并解压你的发布版本\" class=\"headerlink\" title=\"下载并解压你的发布版本\"></a><strong>下载并解压你的发布版本</strong></h3><p>可以从<a href=\"http://www.eclipse.org/jetty/documentation/current/quick-start-getting-started.html#jetty-downloading\">Official Eclipse Download Site</a>获取一个发布副本。</p>\n<p>解压到指定文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\">tar -zxf /home/user/Downloads/jetty-distribution-9.3.1-SNAPSHOT.tar.gz</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -F</span></span><br><span class=\"line\">jetty-distribution-9.3.1-SNAPSHOT/</span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/jetty]# </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> /opt/jetty/temp</span></span><br></pre></td></tr></table></figure>\n\n<p>可能解压出来的Jetty发布文件夹名称看起来看奇怪或不合理的，但是从Jetty9.1开始，<code>$&#123;jetty.home&#125;</code>和<code>$&#123;jetty.base&#125;</code>分开可以隔离你的web引用特殊的设置，从而更简单地升级。</p>\n<p>已经创建的<code>/opt/jetty/temp</code>作为持久的目录当作Jetty的缓存和工作目录。许多Unix系统会定期清理<code>/tmp</code>文件夹，这种行为在不是Servlet容器所期望的，而且会导致问题的发生，<code>/opt/jetty/temp</code>这个持久的目录就是应对这种行为的解决方案。</p>\n<h3 id=\"配置web应用\"><a href=\"#配置web应用\" class=\"headerlink\" title=\"配置web应用\"></a><strong>配置web应用</strong></h3><p><code>/opt/web/mybase</code>这个文件夹就是<code>$&#123;jetty.base&#125;</code>，所以让我们配置它来保存你的应用及其配置。</p>\n<p>*<strong>小贴士</strong>：在过去的Jetty版本中，你得在Jetty发布目录下操作修改或添加，虽然这依然支持，但是我们鼓励你设置一个合适的<code>$&#123;jetty.base&#125;</code>目录，因为这将有利于你在将来更容易升级Jetty的版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /opt/web/mybase/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\">java -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   --add-to-start=deploy,http,logging</span></span><br><span class=\"line\">WARNING: deploy          initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: deploy          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: server          initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: server          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: http            initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: http            enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: server          enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\">WARNING: logging         initialised in $&#123;jetty.base&#125;/start.ini (appended)</span><br><span class=\"line\">WARNING: logging         enabled in     $&#123;jetty.base&#125;/start.ini</span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -F</span></span><br><span class=\"line\">start.ini  webapps/</span><br></pre></td></tr></table></figure>\n\n<p>此时，你已经为你的<code>/opt/web/mybase</code>启用以下模块：</p>\n<p><strong>deploy</strong>\t：这个模块将执行<code>/opt/web/mybase/webapps</code>目录下的web应用程序部署（war文件、解压的目录或可部署上下文的Jetty IoC XML文件）。</p>\n<p><strong>http</strong>：这个设置一个单独的连接器,监听基本的HTTP请求。可以通过已经创建的<code>start.ini</code>文件配置连接器。</p>\n<p><strong>logging</strong>：当Jetty作为服务运行的时候，开启日志是非常重要的。这个模块将开启捕获基本的标准输出和标准错误日志记录功能，并保存到到<code>/opt/web/mybase/logs/</code>文件夹。</p>\n<p>参考<a href=\"http://www.eclipse.org/jetty/documentation/current/start-jar.html\">Using start.jar </a>获取更多关于如何配置<code>$&#123;jetty.base&#125;</code>文件夹的信息。</p>\n<p>复制一个war文件到目录中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> /home/user/projects/mywebsite.war /opt/web/mybase/webapps/</span></span><br></pre></td></tr></table></figure>\n\n<p>大多数服务设备希望Jetty是运行在80端口的，现在你有机会可以把默认的8080改为80。<br>编辑<code>/opt/web/mybase/start.ini</code>并修改<code>jetty.http.port</code>的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">grep jetty.http.port /opt/web/mybase/start.ini</span></span><br><span class=\"line\">jetty.port=80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a><strong>修改权限</strong></h3><p>修改Jetty发布的权限，设置你创建的用户可以访问你的web应用文件夹。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">chown</span> --recursive jetty /opt/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">chown</span> --recursive jetty /opt/web/mybase</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置服务层\"><a href=\"#配置服务层\" class=\"headerlink\" title=\"配置服务层\"></a><strong>配置服务层</strong></h3><p>接下来我们需要新建一个Jetty服务让它在Unix系统中可以和标准的服务一样管理调用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/bin/jetty.sh /etc/init.d/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;JETTY_HOME=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT&quot;</span> &gt; /etc/default/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;JETTY_BASE=/opt/web/mybase&quot;</span> &gt;&gt; /etc/default/jetty</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;TMPDIR=/opt/jetty/temp&quot;</span> &gt;&gt; /etc/default/jetty</span></span><br></pre></td></tr></table></figure>\n\n<p>测试配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty status</span></span><br><span class=\"line\">Checking arguments to Jetty: </span><br><span class=\"line\">START_INI      =  /opt/web/mybase/start.ini</span><br><span class=\"line\">JETTY_HOME     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</span><br><span class=\"line\">JETTY_BASE     =  /opt/web/mybase</span><br><span class=\"line\">JETTY_CONF     =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/etc/jetty.conf</span><br><span class=\"line\">JETTY_PID      =  /var/run/jetty.pid</span><br><span class=\"line\">JETTY_START    =  /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar</span><br><span class=\"line\">JETTY_LOGS     =  /opt/web/mybase/logs</span><br><span class=\"line\">CLASSPATH      =  </span><br><span class=\"line\">JAVA           =  /usr/bin/java</span><br><span class=\"line\">JAVA_OPTIONS   =  -Djetty.state=/opt/web/mybase/jetty.state </span><br><span class=\"line\">       -Djetty.logs=/opt/web/mybase/logs</span><br><span class=\"line\">       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT </span><br><span class=\"line\">       -Djetty.base=/opt/web/mybase </span><br><span class=\"line\">       -Djava.io.tmpdir=/opt/jetty/temp</span><br><span class=\"line\">JETTY_ARGS     =  jetty-logging.xml jetty-started.xml</span><br><span class=\"line\">RUN_CMD        =  /usr/bin/java </span><br><span class=\"line\">       -Djetty.state=/opt/web/mybase/jetty.state </span><br><span class=\"line\">       -Djetty.logs=/opt/web/mybase/logs </span><br><span class=\"line\">       -Djetty.home=/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT </span><br><span class=\"line\">       -Djetty.base=/opt/web/mybase </span><br><span class=\"line\">       -Djava.io.tmpdir=/opt/jetty/temp</span><br><span class=\"line\">       -jar /opt/jetty/jetty-distribution-9.3.1-SNAPSHOT/start.jar </span><br><span class=\"line\">       jetty-logging.xml </span><br><span class=\"line\">       jetty-started.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动你的服务\"><a href=\"#启动你的服务\" class=\"headerlink\" title=\"启动你的服务\"></a><strong>启动你的服务</strong></h3><p>现在你有一个在<code>/opt/web/mybase</code>的<code>$&#123;jetty.base&#125;</code>和一个在<code>/opt/jetty/jetty-distribution-9.3.1-SNAPSHOT</code>的Jetty发布版本，需要启动服务才能让它长时间的成为服务级文件。</p>\n<p>开始，启动吧。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty start</span></span><br><span class=\"line\">Starting Jetty: OK Wed Nov 20 12:35:28 MST 2013</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service jetty check</span></span><br><span class=\"line\">..(snip)..</span><br><span class=\"line\">Jetty running pid=2958</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">[/opt/web/mybase]# </span><span class=\"language-bash\">ps u 2958</span></span><br><span class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">jetty     2958  5.3  0.1 11179176 53984 ?      Sl   12:46   0:00 /usr/bin/java -Djetty...</span><br></pre></td></tr></table></figure>\n\n<p>你现在应该让它在服务器上运行，试一试。</p>\n<blockquote>\n<p>原文链接：<a href=\"http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html\">Startup a Unix Service using jetty.sh</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"clw39umoq00012rvfar7o07l7","category_id":"clw39umov00032rvf6s36583y","_id":"clw39umoz000a2rvf9vvqc7x4"},{"post_id":"clw39umot00022rvfauawe1j7","category_id":"clw39umoy00072rvfc34g8sq8","_id":"clw39ump0000d2rvf07w36h9y"},{"post_id":"clw39umow00042rvf4dhu9unq","category_id":"clw39umoz000b2rvfd44rd2ns","_id":"clw39ump2000g2rvf643ldsok"},{"post_id":"clw39umow00052rvfbk0i883s","category_id":"clw39umoy00072rvfc34g8sq8","_id":"clw39ump2000h2rvfhuqr656t"},{"post_id":"clw39umox00062rvfb6ijgrs6","category_id":"clw39ump2000f2rvfgzsufxce","_id":"clw39ump3000k2rvfdwq69mrx"},{"post_id":"clw39umoy00082rvfhxu4aa0v","category_id":"clw39ump2000f2rvfgzsufxce","_id":"clw39ump3000l2rvfgn758prf"},{"post_id":"clw39umoz00092rvf0mmff6us","category_id":"clw39ump2000j2rvff1u4bxyh","_id":"clw39ump3000n2rvf0l6wd7au"},{"post_id":"clw39umoz000c2rvfhpnm1jyz","category_id":"clw39ump3000m2rvf55po68dj","_id":"clw39ump3000o2rvfcm76ak0r"},{"post_id":"clw39umpc000p2rvf0raxh8w4","category_id":"clw39umpd000q2rvfb5oihg5y","_id":"clw39umpd000r2rvfhzx5fudr"}],"PostTag":[],"Tag":[]}}